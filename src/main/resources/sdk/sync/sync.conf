rdb {
  url = "jdbc:mysql://rest-db:3306/sight"
  user = "sight"
  password = "%oEL!L#Lkf&B!$F9JapY"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://master:10000/default"
}
message.client.url="http://rest:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="kafka001:6667,kafka002:6667,kafka003:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "kafka001:6667,kafka002:6667,kafka003:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    //auto.offset.reset = "earliest"
    //集群有问题，只能用latest
    auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}

hbase {
  set {
    hbase.zookeeper.quorum = "master"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  streaming.batch.buration = 90
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
    //    spark.streaming.kafka.maxRatePerPartition = 2000
    spark.streaming.kafka.maxRatePerPartition = 5000
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 5
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 5
    spark.kryoserializer.buffer=64m
    spark.kryoserializer.buffer.max=512m
    spark.scheduler.mode=FAIR
    spark.history.fs.cleaner.enabled = true
    spark.history.fs.cleaner.interval = 1d
    spark.history.fs.cleaner.maxAge = 3d
  }
}
modules {

  // ===================================== day cost/showCount/clickCount ============================================
    sdk_sync_mysql2hive {
      class = "com.mobikok.ssp.data.streaming.module.MixModule"
      //取日期部分
      business.date.extract.by = "dwrBusinessDate"
      commit.batch.size = 0
      commit.time.interval = 0
      dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.SspShowDWRSchema"
      dm.handler.enable = true
      dm.handler.setting = [{
        class = "com.mobikok.ssp.data.streaming.handler.dm.SyncMysql2HiveHandlerV4"
        tables = [
          {mysql="advertiser", hive="advertiser", uuid="id",      incr="update_time"},
          {mysql="jar",        hive="jar",        uuid="id",      incr="update_time"},
          {mysql="publisher",  hive="publisher",  uuid="id",      incr="update_time"},
          {mysql="app",        hive="app",        uuid="id",      incr="update_time"},
          {mysql="sys_user",   hive="sys_user",   uuid="user_id", incr="update_time"}
        ]
//        PRO
//        rdb.url = "jdbc:mysql://104.250.131.130:8904/kok_ssp?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
        rdb.url = "jdbc:mysql://8.209.82.188:3306/mashup?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
        rdb.user = "root"
        rdb.password = "mashup"
      }]
      kafka.consumer {
        partitions = [
          {
            topic = "topic_empty"
            partition = 0
          }
        ]
      }
    }
}