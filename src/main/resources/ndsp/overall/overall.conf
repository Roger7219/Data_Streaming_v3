rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://master:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="node187:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node187:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
//    auto.offset.reset = "earliest"
        auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "master,node187"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  app.name = "ndsp_overall"
  streaming.batch.buration = 100
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.default.fileformat=Orc
    hive.exec.dynamic.partition.mode = nonstrict
    //    spark.streaming.kafka.maxRatePerPartition = 2000
    spark.streaming.kafka.maxRatePerPartition = 3000
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 8
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 8
    spark.kryoserializer.buffer.max=256
    spark.scheduler.mode=FAIR
    spark.history.fs.cleaner.enabled = true
    spark.history.fs.cleaner.interval = 1d
    spark.history.fs.cleaner.maxAge = 3d
    //    spark.streaming.concurrentJobs = 6
  }
}
modules {
  ndsp_overall_traffic {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    // timestamp 精确到了秒,非毫秒，所以不用除于1000
    business.time.extract.by = "from_unixtime(timestamp, 'yyyy-MM-dd HH:mm:ss')"
    master = true
    dwi.enable = false
    dwi.table = "ndsp_overall_traffic_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.NdspTrafficDWISchema"
    dwr.enable = true
    dwr.groupby.fields = [
      { expr = "supply_id",          as = "supply_id"},
      { expr = "supply_protocol",    as = "supply_protocol"},
      { expr = "request_flag",       as = "request_flag"},
      { expr = "request_status",     as = "request_status"},
      { expr = "ad_format",          as = "ad_format"},
      { expr = "site_app_id",        as = "site_app_id"},
      { expr = "placement_id",       as = "placement_id"},
      { expr = "position",           as = "position"},
      { expr = "country",            as = "country"},
      { expr = "region",             as = "region"},
      { expr = "city",               as = "city"},
      { expr = "carrier",            as = "carrier"},
      { expr = "os",                 as = "os"},
      { expr = "os_version",         as = "os_version"},
      { expr = "device_type",        as = "device_type"},
      { expr = "device_brand",       as = "device_brand"},
      { expr = "device_model",       as = "device_model"},
      { expr = "age",                as = "age"},
      { expr = "gender",             as = "gender"},
      { expr = "cost_currency",      as = "cost_currency"},
      { expr = "proxy_id",            as = "proxy_id"},
      { expr = "mediabuy_id",         as = "mediabuy_id"},
      { expr = "bd_id",               as = "bd_id"},
      { expr = "am_id",               as = "am_id"},
      { expr = "campaign_id",         as = "campaign_id"},
      { expr = "ad_id",               as = "ad_id"},
      { expr = "revenue_currency",   as = "revenue_currency"},
      { expr = "bid_price_model",    as = "bid_price_model"},
      { expr = "traffic_type",       as = "traffic_type"},
      { expr = "currency",           as = "currency"},
      { expr = "bundle",               as = "bundle"},
      { expr = "size",               as = "size"}
    ]
    dwr.groupby.aggs = [
      { expr = "sum(supply_request_count)",                                                     as ="supply_request_count",              union = "sum(supply_request_count)"},
      { expr = "sum(supply_bid_count)",                                                         as ="supply_bid_count",                  union = "sum(supply_bid_count)"},
      { expr = "sum(supply_bid_price_cost_currency/ IF(bid_price_model = 1, 1000.0, 1.0) )",    as ="supply_bid_price_cost_currency",    union = "sum(supply_bid_price_cost_currency)"},
      { expr = "sum(supply_bid_price/ IF(bid_price_model = 1, 1000.0, 1.0) )",                  as ="supply_bid_price",                  union = "sum(supply_bid_price)"},
      { expr = "sum(supply_win_count)",                                                         as ="supply_win_count",                  union = "sum(supply_win_count)",               overwrite = true},
      { expr = "sum(supply_win_price_cost_currency/ IF(bid_price_model = 1, 1000.0, 1.0) )",    as ="supply_win_price_cost_currency",    union = "sum(supply_win_price_cost_currency)", overwrite = true},
      { expr = "sum(supply_win_price/ IF(bid_price_model = 1, 1000.0, 1.0) )",                  as ="supply_win_price",                  union = "sum(supply_win_price)",               overwrite = true},
      { expr = "sum(impression_count)",                                                         as ="impression_count",                  union = "sum(impression_count)",            overwrite = true},
      { expr = "sum(impression_cost_currency/ IF(bid_price_model = 1, 1000.0, 1.0) )",          as ="impression_cost_currency",          union = "sum(impression_cost_currency)",    overwrite = true},
      { expr = "sum(impression_cost/ IF(bid_price_model = 1, 1000.0, 1.0) )",                   as ="impression_cost",                   union = "sum(impression_cost)",             overwrite = true},
      { expr = "sum(impression_revenue_currency/ IF(bid_price_model = 1, 1000.0, 1.0) )",        as ="impression_revenue_currency",       union = "sum(impression_revenue_currency)", overwrite = true},
      { expr = "sum(impression_revenue/ IF(bid_price_model = 1, 1000.0, 1.0) )",                as ="impression_revenue",                union = "sum(impression_revenue)",          overwrite = true},
      { expr = "sum(click_count)",                                                              as ="click_count",                       union = "sum(click_count)",                 overwrite = true},
      { expr = "sum(click_cost_currency)",                                                      as ="click_cost_currency",               union = "sum(click_cost_currency)",         overwrite = true},
      { expr = "sum(click_cost)",                                                               as ="click_cost",                        union = "sum(click_cost)",                  overwrite = true},
      { expr = "sum(click_revenue_currency)",                                                   as ="click_revenue_currency",            union = "sum(click_revenue_currency)",      overwrite = true},
      { expr = "sum(click_revenue)",                                                            as ="click_revenue",                     union = "sum(click_revenue)",    },
      { expr = "sum(conversion_count)",                                                         as ="conversion_count",                  union = "sum(conversion_count)",            overwrite = true},
      { expr = "sum(conversion_price)",                                                         as ="conversion_price",                  union = "sum(conversion_price)",            overwrite = true}
    ]
    dwr.include.repeated = true
    dwr.table = "ndsp_overall_dwr"
    kafka.consumer {
      partitoins = [
        {topic = "ndsp_traffic_topic", partition = 0},
        {topic = "ndsp_traffic_topic", partition = 1},
        {topic = "ndsp_traffic_topic", partition = 2},
        {topic = "ndsp_traffic_topic", partition = 3}
      ]
    }
  }

  ndsp_overall_performance {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    // timestamp 精确到了秒,非毫秒，所以不用除于1000
    business.time.extract.by = "from_unixtime(timestamp, 'yyyy-MM-dd HH:mm:ss')"
    dwi.enable = true
    dwi.table = "ndsp_overall_performance_matched_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.NdspTrafficDWISchema"

    dwi.handler = [{
      class = "com.mobikok.ssp.data.streaming.handler.dwi.core.SQLHandler"
      message.topics = ["ndsp_performance_dwi", "ndsp_traffic_dwi"]
      message.consumer = "ndsp_p_matched_dwi_cer"
      sql = """
        drop view if exists ndsp_p_matched_dwi_tmp;
        create temporary view ndsp_p_matched_dwi_tmp as
        select
          pDwi.repeats,
          pDwi.rowkey,
          pDwi.type      AS type,
          pDwi.bidTime   AS bidTime,
          pDwi.supplyid  AS supplyid,
          pDwi.bidid     AS bidid,
          pDwi.impid     AS impid,
          pDwi.price     AS price,
          pDwi.cur       AS cur,
          pDwi.withPrice AS withPrice,
          pDwi.eventType AS eventType,
          CASE pDwi.type
            WHEN 'win' then 5
            WHEN 'impression' then 6
            WHEN 'click' then 7
            WHEN 'conversion' then 8
            WHEN 'event' THEN (CASE pDwi.eventType
              WHEN 1 THEN 6
              WHEN 2 THEN 7
              WHEN 3 THEN 7
              WHEN 4 THEN 7
              ELSE null END
            )
            ELSE null END
          AS dataType,

          tDwi.`timestamp`,
          tDwi.supply_id,
          tDwi.supply_protocol,
          tDwi.request_flag,
          tDwi.request_status,

          tDwi.ad_format,
          tDwi.site_app_id,
          tDwi.placement_id,
          tDwi.position,

          tDwi.country,
          tDwi.region,
          tDwi.city,

          tDwi.carrier,

          tDwi.os,
          tDwi.os_version,

          tDwi.device_type,
          tDwi.device_brand,
          tDwi.device_model,

          tDwi.age,
          tDwi.gender,

          tDwi.cost_currency,

          tDwi.proxy_id,
          tDwi.mediabuy_id,
          tDwi.bd_id,

          tDwi.am_id,
          tDwi.campaign_id,
          tDwi.ad_id,
          tDwi.revenue_currency,

          tDwi.bid_price_model,
          tDwi.traffic_type,
          tDwi.currency,
          tDwi.supplyBidId,
          tDwi.bidRequestId,
          tDwi.bundle,
          tDwi.size,

          0  AS supply_request_count,
          0  AS supply_bid_count,
          0. AS supply_bid_price_cost_currency,
          0. AS supply_bid_price,

          CASE pDwi.type
            WHEN 'win' THEN 1
            ELSE 0 END
          AS supply_win_count,

          CASE pDwi.type
            WHEN 'win' THEN (
             CASE
               WHEN (!pDwi.withPrice OR (pDwi.withPrice AND winDwi.price is null)) THEN tDwi.supply_bid_price_cost_currency
               ELSE (CASE
                 WHEN pDwi.cur is null OR pDwi.cur = tDwi.cost_currency THEN winDwi.price
                 ELSE winDwi.price*1.00000000 END
               ) END
            )
            ELSE 0. END
          AS supply_win_price_cost_currency,

          CASE pDwi.type
            WHEN 'win' THEN (
             CASE
               WHEN (!winDwi.withPrice OR (winDwi.withPrice AND winDwi.price is null)) THEN tDwi.supply_bid_price
               ELSE (CASE
                 WHEN pDwi.cur is null OR pDwi.cur = tDwi.cost_currency THEN (CASE
                   WHEN tDwi.cost_currency = tDwi.currency THEN winDwi.price
                   ELSE winDwi.price*1.000000 END
                 )
                 ELSE (CASE
                   WHEN pDwi.cur = tDwi.currency THEN winDwi.price
                   ELSE winDwi.price*1.000000 END
                 ) END
               ) END
            )
            ELSE 0. END
          AS supply_win_price,

          CASE pDwi.type
            WHEN 'impression' THEN 1
            WHEN 'event' THEN (CASE pDwi.eventType
              WHEN 1 THEN 1
              ELSE 0 END
            )
            ELSE 0 END
          AS impression_count,

          CASE pDwi.type
            WHEN 'impression' THEN (CASE
              WHEN !winDwi.withPrice OR winDwi.price is null THEN tDwi.supply_bid_price_cost_currency
              ELSE (CASE
                WHEN pDwi.cur is null OR pDwi.cur = tDwi.cost_currency THEN winDwi.price
                ELSE winDwi.price*1.0000000 END
              )END
            )
            ELSE 0. END
          AS impression_cost_currency,

          CASE pDwi.type
            WHEN 'impression' THEN (CASE
              WHEN !winDwi.withPrice OR winDwi.price is null THEN tDwi.supply_bid_price
              ELSE (CASE
                WHEN pDwi.cur is null OR pDwi.cur = tDwi.cost_currency THEN (CASE
                  WHEN tDwi.cost_currency = tDwi.currency THEN winDwi.price
                  ELSE winDwi.price*1.000000 END
                )
                ELSE (CASE
                  WHEN pDwi.cur = tDwi.currency THEN winDwi.price
                  ELSE winDwi.price*1.0000000 END
                ) END
              )END
            )
            ELSE 0. END
          AS impression_cost,

          CASE pDwi.type
            WHEN 'impression' THEN (case tDwi.adver_bid_price_cost_currency when tDwi.adver_bid_price_cost_currency is null then tDwi.supply_bid_price else tDwi.adver_bid_price_cost_currency end )
            ELSE 0. END
          AS impression_revenue_currency,

          CASE pDwi.type
            WHEN 'impression' THEN (case tDwi.adver_bid_price when tDwi.adver_bid_price is null then tDwi.supply_bid_price else tDwi.adver_bid_price end )
            ELSE 0. END
          AS impression_revenue,

          CASE pDwi.type
            WHEN 'click' THEN 1
            WHEN 'event' THEN (CASE pDwi.eventType
              WHEN 2 THEN 1
              WHEN 3 THEN 1
              WHEN 4 THEN 1
              ELSE 0 END
            )
            ELSE 0 END
          AS click_count,

          0. as click_cost_currency,
          0. as click_cost,
          0. as click_revenue_currency,
          0. as click_revenue,

          CASE pDwi.type
            WHEN 'conversion' THEN 1
            ELSE 0 END
          AS conversion_count,

          0. as conversion_price,


          pDwi.repeated,
          from_unixtime(unix_timestamp(),'yyyy-MM-dd HH:00:00') as l_time,
          pDwi.b_date,
          pDwi.b_time,
          pDwi.b_version as b_version

        from (
          select * from ndsp_performance_dwi where repeated = 'N' AND b_time >= date_format(current_timestamp() + INTERVAL -36 HOUR, 'yyyy-MM-dd HH:00:00') AND ${b_time_where}
        ) pDwi
        left join (
          select * from ndsp_traffic_dwi where dataType = 1 AND b_time >= date_format(current_timestamp() + INTERVAL -36 HOUR, 'yyyy-MM-dd HH:00:00') AND ${b_time_where}
        ) tDwi ON tDwi.b_time = pDwi.b_time AND pDwi.bidid = tDwi.bidRequestId
        left join (
          select * from ndsp_performance_dwi where repeated = 'N' AND b_time >= date_format(current_timestamp() + INTERVAL -36 HOUR, 'yyyy-MM-dd HH:00:00') AND ${b_time_where} AND type = 'win'
        ) winDwi ON winDwi.b_time = pDwi.b_time AND winDwi.bidid = pDwi.bidid;

        -- 去重
        -- drop table if exists ndsp_p_matched_dwi_tmp_unrepeated;
        -- create table ndsp_p_matched_dwi_tmp_unrepeated as
        select
          repeats                           ,
          rowkey                            ,

          dataType                         ,
          `timestamp`                      ,
          supply_id                        ,
          supply_protocol                  ,
          request_flag                     ,
          request_status                     ,

          ad_format                         ,
          site_app_id                       ,
          placement_id                      ,
          position                          ,

          country                           ,
          region                             ,
          city                              ,

          carrier                           ,

          os                                ,
          os_version                        ,

          device_type                       ,
          device_brand                      ,
          device_model                      ,

          age                               ,
          gender                            ,

          cost_currency                     ,

        -- demand
          proxy_id                      ,
          mediabuy_id                      ,
          bd_id                         ,
          am_id                         ,
          campaign_id                         ,
          ad_id                         ,

        -- destination
          revenue_currency                  ,

        -- common
          bid_price_model                   ,
          traffic_type                      ,
          currency                          ,

        -- id
          supplyBidId                       ,
          bidRequestId                      ,

          bundle                            ,
          size                              ,

          supply_request_count              ,
          supply_bid_count                  ,
          supply_bid_price_cost_currency    ,
          supply_bid_price                  ,
          supply_win_count                  ,
          supply_win_price_cost_currency    ,
          supply_win_price                  ,

          impression_count                  ,
          impression_cost_currency          ,
          impression_cost                   ,
          impression_revenue_currency       ,
          impression_revenue                ,
          click_count                       ,
          click_cost_currency               ,
          click_cost                        ,
          click_revenue_currency            ,
          click_revenue                     ,
          conversion_count                  ,
          conversion_price                  ,

          repeated                          ,
          l_time                            ,
          b_date                            ,
          b_time                            ,
          b_version
        from(
          select
            *,
            row_number() over(partition by dataType, bidRequestId order by 1 desc) row_num
          from ndsp_p_matched_dwi_tmp
        )
        where row_num = 1;
      """
    }]
    dwr.enable = true
    dwr.groupby.fields = [
      { expr = "supply_id",          as = "supply_id"},
      { expr = "supply_protocol",    as = "supply_protocol"},
      { expr = "request_flag",       as = "request_flag"},
      { expr = "request_status",     as = "request_status"},
      { expr = "ad_format",          as = "ad_format"},
      { expr = "site_app_id",        as = "site_app_id"},
      { expr = "placement_id",       as = "placement_id"},
      { expr = "position",           as = "position"},
      { expr = "country",            as = "country"},
      { expr = "region",             as = "region"},
      { expr = "city",               as = "city"},
      { expr = "carrier",            as = "carrier"},
      { expr = "os",                 as = "os"},
      { expr = "os_version",         as = "os_version"},
      { expr = "device_type",        as = "device_type"},
      { expr = "device_brand",       as = "device_brand"},
      { expr = "device_model",       as = "device_model"},
      { expr = "age",                as = "age"},
      { expr = "gender",             as = "gender"},
      { expr = "cost_currency",       as = "cost_currency"},
      { expr = "proxy_id",            as = "proxy_id"},
      { expr = "mediabuy_id",         as = "mediabuy_id"},
      { expr = "bd_id",               as = "bd_id"},
      { expr = "am_id",               as = "am_id"},
      { expr = "campaign_id",         as = "campaign_id"},
      { expr = "ad_id",               as = "ad_id"},
      { expr = "revenue_currency",   as = "revenue_currency"},
      { expr = "bid_price_model",    as = "bid_price_model"},
      { expr = "traffic_type",       as = "traffic_type"},
      { expr = "currency",           as = "currency"},
      { expr = "bundle",               as = "bundle"},
      { expr = "size",               as = "size"}
    ]
    dwr.groupby.aggs = [
      { expr = "sum(supply_request_count)",                                                     as ="supply_request_count",              union = "sum(supply_request_count)"},
      { expr = "sum(supply_bid_count)",                                                         as ="supply_bid_count",                  union = "sum(supply_bid_count)"},
      { expr = "sum(supply_bid_price_cost_currency/ IF(bid_price_model = 1, 1000.0, 1.0) )",    as ="supply_bid_price_cost_currency",    union = "sum(supply_bid_price_cost_currency)"},
      { expr = "sum(supply_bid_price/ IF(bid_price_model = 1, 1000.0, 1.0) )",                  as ="supply_bid_price",                  union = "sum(supply_bid_price)"},
      { expr = "sum(supply_win_count)",                                                         as ="supply_win_count",                  union = "sum(supply_win_count)",               overwrite = true},
      { expr = "sum(supply_win_price_cost_currency/ IF(bid_price_model = 1, 1000.0, 1.0) )",    as ="supply_win_price_cost_currency",    union = "sum(supply_win_price_cost_currency)", overwrite = true},
      { expr = "sum(supply_win_price/ IF(bid_price_model = 1, 1000.0, 1.0) )",                  as ="supply_win_price",                  union = "sum(supply_win_price)",               overwrite = true},
      { expr = "sum(impression_count)",                                                         as ="impression_count",                  union = "sum(impression_count)",            overwrite = true},
      { expr = "sum(impression_cost_currency/ IF(bid_price_model = 1, 1000.0, 1.0) )",          as ="impression_cost_currency",          union = "sum(impression_cost_currency)",    overwrite = true},
      { expr = "sum(impression_cost/ IF(bid_price_model = 1, 1000.0, 1.0) )",                   as ="impression_cost",                   union = "sum(impression_cost)",             overwrite = true},
      { expr = "sum(impression_revenue_currency/ IF(bid_price_model = 1, 1000.0, 1.0) )",        as ="impression_revenue_currency",       union = "sum(impression_revenue_currency)", overwrite = true},
      { expr = "sum(impression_revenue/ IF(bid_price_model = 1, 1000.0, 1.0) )",                as ="impression_revenue",                union = "sum(impression_revenue)",          overwrite = true},
      { expr = "sum(click_count)",                                                              as ="click_count",                       union = "sum(click_count)",                 overwrite = true},
      { expr = "sum(click_cost_currency)",                                                      as ="click_cost_currency",               union = "sum(click_cost_currency)",         overwrite = true},
      { expr = "sum(click_cost)",                                                               as ="click_cost",                        union = "sum(click_cost)",                  overwrite = true},
      { expr = "sum(click_revenue_currency)",                                                   as ="click_revenue_currency",            union = "sum(click_revenue_currency)",      overwrite = true},
      { expr = "sum(click_revenue)",                                                            as ="click_revenue",                     union = "sum(click_revenue)",    },
      { expr = "sum(conversion_count)",                                                         as ="conversion_count",                  union = "sum(conversion_count)",            overwrite = true},
      { expr = "sum(conversion_price)",                                                         as ="conversion_price",                  union = "sum(conversion_price)",            overwrite = true}
    ]
    dwr.include.repeated = true
    dwr.table = "ndsp_overall_dwr"
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
}