rdb {
  url = "jdbc:mysql://node17:3306/sight?autoReconnect=true&failOverReadOnly=false"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://node17:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="node30:6667,node31:6667,node32:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node30:6667,node31:6667,node32:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
//    auto.offset.reset = "earliest"
    auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  transactional {
    tables = ["uuid.stat"]
  }
  set {
    hbase.zookeeper.quorum = "node106,node107,node108"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  streaming.batch.buration = 300
//  streaming.batch.buration = 10
  set {
    spark.app.name = "bq_mix"
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
//    spark.streaming.backpressure.enabled = true
    spark.streaming.kafka.maxRatePerPartition = 5000
//    spark.streaming.kafka.maxRatePerPartition = 6000C0
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 3
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 3
    spark.kryoserializer.buffer.max=512
//    spark.kryo.registrationRequired = true
    spark.streaming.concurrentJobs = 16
    spark.scheduler.mode=FAIR
    spark.sql.broadcastTimeout=3000
  }
}
clickhouse {
  hosts = [
    "node111",
    "node110",
    "node15",
    "node16"
  ]
}
modules= {

  ck_overall_import_month {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    business.date.extract.by = "createTime"
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.offline.handler.enable = true
    dm.offline.handlers = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.offline.ClickHouseQueryMonthHandler"
      items = [{
        view = "test__ssp_report_overall_dwr_accmonth"
        message.consumer = "ck_overall_import_month"
        message.topics = [
          "ck_overall_import_month",
        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }

  ck_report_overall_day {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.offline.handler.enable = true
    dm.offline.handlers = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.offline.ClickHouseQueryByBTimeHandler"
      items = [{
        view = "ssp_report_overall_dm_day_v2"
        message.consumer = "ck_report_overall_day"
        message.topics = [
          "ssp_report_overall_dwr_day",
          "ssp_report_overall_dm_day_v2_update",
          "ck_report_overall_day",
          "PublisherThirdIncomeDMReflush"
        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }

  ck_report_overall {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.offline.handler.enable = true
    dm.offline.handlers = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.offline.ClickHouseQueryByBTimeHandler"
      items = [{
        view = "ssp_report_overall_dm"
        message.consumer = "cktest"
        message.topics = [
          "ssp_report_overall_dwr",
          "update_ssp_report_overall2",
          "PublisherThirdIncomeDMReflush",
          "ck_report_overall"
        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }


}

