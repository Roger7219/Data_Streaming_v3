rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://node17:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=true
  set {
    bootstrap.servers="104.250.136.138:6667,104.250.133.18:6667,104.250.130.82:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node30:6667,node31:6667,node32:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    auto.offset.reset = "earliest"
    #auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "node106,node107,node108"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  app.name = "agg_dm"
//  streaming.batch.buration = 300
  streaming.batch.buration = 10
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
    spark.streaming.kafka.maxRatePerPartition = 2000
    #spark.streaming.kafka.maxRatePerPartition = 50000
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 3
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 3
    spark.kryoserializer.buffer.max=256
//    spark.streaming.concurrentJobs = 14
  }
}
modules {

  agg_traffic_user_new {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "dwrBusinessDate"
    commit.batch.size = 1
    commit.time.interval = 1800
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.AggUserNewDWRSchema"
    dwr.enable = true
    dwr.groupby.fields = [ {
      expr = "jarId",       as = "jarId"
    }, {
      expr = "appId",       as = "appId"
    }, {
      expr = "countryId",   as = "countryId"
    }, {
      expr = "carrierId",   as = "carrierId"
    }, {
      expr = "connectType", as = "connectType"
    }, {
      expr = "publisherId", as = "publisherId"
    }, {
      expr = "affSub",      as = "affSub"
    }]
    dwr.groupby.aggs = [{
      expr = "sum(newCount)",as = "userNewCount",    union = "sum(userNewCount)"
    },{
      expr = "0",            as = "userActiveCount", union = "sum(userActiveCount)"
    },{
      expr = "0",            as = "fillCount",       union = "sum(fillCount)"
    },{
      expr = "0",            as = "sendCount",       union = "sum(sendCount)"
    },{
      expr = "0",            as = "showCount",       union = "sum(showCount)"
    },{
      expr = "0",            as ="clickCount",       union = "sum(clickCount)"
    },{
      expr = "0",            as ="cost",             union = "sum(cost)"
    }]
    dwr.table = "agg_traffic_dwr"
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_agg_user_new_dwr"
          partition = 0
        }
      ]
    }
  }

  agg_traffic_user_active {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "dwrBusinessDate"
    commit.batch.size = 1
    commit.time.interval = 1800
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.AggUserActiveDWRSchema"
    dwr.enable = true
    dwr.groupby.fields = [ {
      expr = "jarId",       as = "jarId"
    }, {
      expr = "appId",       as = "appId"
    }, {
      expr = "countryId",   as = "countryId"
    }, {
      expr = "carrierId",   as = "carrierId"
    }, {
      expr = "connectType", as = "connectType"
    }, {
      expr = "publisherId", as = "publisherId"
    }, {
      expr = "affSub",      as = "affSub"
    } ]
    dwr.groupby.aggs = [{
      expr = "0",                as = "userNewCount",    union = "sum(userNewCount)"
    },{
      expr = "sum(activeCount)", as = "userActiveCount", union = "sum(userActiveCount)"
    },{
      expr = "0",                as = "fillCount",       union = "sum(fillCount)"
    },{
      expr = "0",                as = "sendCount",       union = "sum(sendCount)"
    },{
      expr = "0",                as = "showCount",       union = "sum(showCount)"
    },{
      expr = "0",                as ="clickCount",       union = "sum(clickCount)"
    },{
      expr = "0",                as ="cost",             union = "sum(cost)"
    }]
    dwr.table = "agg_traffic_dwr"
    dm.greenplum.enable = false
    dm.greenplum.hive.view = "agg_traffic_dm"
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_agg_user_active_dwr"
          partition = 0
        }
      ]
    }
  }

  agg_traffic_fill {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "dwrBusinessDate"
    commit.batch.size = 1
    commit.time.interval = 1800
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.AggTrafficDWRSchema"
    dwr.enable = true
    dwr.groupby.fields = [ {
      expr = "jarId",       as = "jarId"
    }, {
      expr = "appId",       as = "appId"
    }, {
      expr = "countryId",   as = "countryId"
    }, {
      expr = "carrierId",   as = "carrierId"
    }, {
      expr = "connectType", as = "connectType"
    }, {
      expr = "publisherId", as = "publisherId"
    }, {
      expr = "affSub",      as = "affSub"
    } ]
    dwr.groupby.aggs = [{
      expr = "0",           as = "userNewCount",    union = "sum(userNewCount)"
    },{
      expr = "0",           as = "userActiveCount", union = "sum(userActiveCount)"
    },{
      expr = "sum(times)",  as = "fillCount",       union = "sum(fillCount)"
    },{
      expr = "0",           as = "sendCount",       union = "sum(sendCount)"
    },{
      expr = "0",           as = "showCount",       union = "sum(showCount)"
    },{
      expr = "0",           as ="clickCount",       union = "sum(clickCount)"
    },{
      expr = "0",           as ="cost",            union = "sum(cost)"
    }]
    dwr.table = "agg_traffic_dwr"
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_agg_fill_dwr"
          partition = 0
        }
      ]
    }
  }

  agg_traffic_send {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "dwrBusinessDate"
    commit.batch.size = 1
    commit.time.interval = 1800
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.AggTrafficDWRSchema"
    dwr.enable = true
    dwr.groupby.fields = [ {
      expr = "jarId",       as = "jarId"
    }, {
      expr = "appId",       as = "appId"
    }, {
      expr = "countryId",   as = "countryId"
    }, {
      expr = "carrierId",   as = "carrierId"
    }, {
      expr = "connectType", as = "connectType"
    }, {
      expr = "publisherId", as = "publisherId"
    }, {
      expr = "affSub",      as = "affSub"
    } ]
    dwr.groupby.aggs = [{
      expr = "0",           as = "userNewCount",    union = "sum(userNewCount)"
    },{
      expr = "0",           as = "userActiveCount", union = "sum(userActiveCount)"
    },{
      expr = "0",           as = "fillCount",       union = "sum(fillCount)"
    },{
      expr = "sum(times)",  as = "sendCount",       union = "sum(sendCount)"
    },{
      expr = "0",           as = "showCount",       union = "sum(showCount)"
    },{
      expr = "0",           as ="clickCount",       union = "sum(clickCount)"
    },{
      expr = "0",           as ="cost",             union = "sum(cost)"
    }]
    dwr.table = "agg_traffic_dwr"
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_agg_send_dwr"
          partition = 0
        }
      ]
    }
  }

  agg_traffic_show {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "dwrBusinessDate"
    commit.batch.size = 1
    commit.time.interval = 1800
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.AggTrafficDWRSchema"
    dwr.enable = true
    dwr.groupby.fields = [ {
      expr = "jarId",       as = "jarId"
    }, {
      expr = "appId",       as = "appId"
    }, {
      expr = "countryId",   as = "countryId"
    }, {
      expr = "carrierId",   as = "carrierId"
    }, {
      expr = "connectType", as = "connectType"
    }, {
      expr = "publisherId", as = "publisherId"
    }, {
      expr = "affSub",      as = "affSub"
    } ]
    dwr.groupby.aggs = [{
      expr = "0",           as = "userNewCount",    union = "sum(userNewCount)"
    },{
      expr = "0",           as = "userActiveCount", union = "sum(userActiveCount)"
    },{
      expr = "0",           as = "fillCount",       union = "sum(fillCount)"
    },{
      expr = "0",           as = "sendCount",       union = "sum(sendCount)"
    },{
      expr = "sum(times)",  as = "showCount",       union = "sum(showCount)"
    },{
      expr = "0",           as ="clickCount",       union = "sum(clickCount)"
    },{
      expr = "0",           as ="cost",             union = "sum(cost)"
    }]
    dwr.table = "agg_traffic_dwr"
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_agg_show_dwr"
          partition = 0
        }
      ]
    }
  }

  agg_traffic_click {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "dwrBusinessDate"
    commit.batch.size = 1
    commit.time.interval = 1800
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.AggTrafficDWRSchema"
    dwr.enable = true
    dwr.groupby.fields = [ {
      expr = "jarId",       as = "jarId"
    }, {
      expr = "appId",       as = "appId"
    }, {
      expr = "countryId",   as = "countryId"
    }, {
      expr = "carrierId",   as = "carrierId"
    }, {
      expr = "connectType", as = "connectType"
    }, {
      expr = "publisherId", as = "publisherId"
    }, {
      expr = "affSub",      as = "affSub"
    } ]
    dwr.groupby.aggs = [{
      expr = "0",           as = "userNewCount",    union = "sum(userNewCount)"
    },{
      expr = "0",           as = "userActiveCount", union = "sum(userActiveCount)"
    },{
      expr = "0",           as = "fillCount",       union = "sum(fillCount)"
    },{
      expr = "0",           as = "sendCount",       union = "sum(sendCount)"
    },{
      expr = "0",           as = "showCount",       union = "sum(showCount)"
    },{
      expr = "sum(times)",  as ="clickCount",       union = "sum(clickCount)"
    },{
      expr = "0",           as ="cost",             union = "sum(cost)"
    }]
    dwr.table = "agg_traffic_dwr"
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_agg_click_dwr"
          partition = 0
        }
      ]
    }
  }

  agg_traffic_click {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "dwrBusinessDate"
    commit.batch.size = 1
    commit.time.interval = 1800
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.AggTrafficDWRSchema"
    dwr.enable = true
    dwr.groupby.fields = [ {
      expr = "jarId",       as = "jarId"
    }, {
      expr = "appId",       as = "appId"
    }, {
      expr = "countryId",   as = "countryId"
    }, {
      expr = "carrierId",   as = "carrierId"
    }, {
      expr = "connectType", as = "connectType"
    }, {
      expr = "publisherId", as = "publisherId"
    }, {
      expr = "affSub",      as = "affSub"
    } ]
    dwr.groupby.aggs = [{
      expr = "0",           as = "userNewCount",    union = "sum(userNewCount)"
    },{
      expr = "0",           as = "userActiveCount", union = "sum(userActiveCount)"
    },{
      expr = "0",           as = "fillCount",       union = "sum(fillCount)"
    },{
      expr = "0",           as = "sendCount",       union = "sum(sendCount)"
    },{
      expr = "0",           as = "showCount",       union = "sum(showCount)"
    },{
      expr = "sum(times)",  as ="clickCount",       union = "sum(clickCount)"
    },{
      expr = "0",           as ="cost",             union = "sum(cost)"
    }]
    dwr.table = "agg_traffic_dwr"
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_agg_click_dwr"
          partition = 0
        }
      ]
    }
  }

  agg_traffic_fee {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "dwrBusinessDate"
    commit.batch.size = 1
    commit.time.interval = 1800
    master = true
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.AggFeeDWRSchema"
    dwr.enable = true
    dwr.groupby.fields = [ {
      expr = "jarId",       as = "jarId"
    }, {
      expr = "appId",       as = "appId"
    }, {
      expr = "countryId",   as = "countryId"
    }, {
      expr = "carrierId",   as = "carrierId"
    }, {
      expr = "connectType", as = "connectType"
    }, {
      expr = "publisherId", as = "publisherId"
    }, {
      expr = "affSub",      as = "affSub"
    } ]
    dwr.groupby.aggs = [{
      expr = "0",           as = "userNewCount",    union = "sum(userNewCount)"
    },{
      expr = "0",           as = "userActiveCount", union = "sum(userActiveCount)"
    },{
      expr = "0",           as = "fillCount",       union = "sum(fillCount)"
    },{
      expr = "0",           as = "sendCount",       union = "sum(sendCount)"
    },{
      expr = "0",           as = "showCount",       union = "sum(showCount)"
    },{
      expr = "0",           as ="clickCount",       union = "sum(clickCount)"
    },{
      expr = "sum(cost)",   as ="cost",             union = "sum(cost)"
    }]
    dwr.table = "agg_traffic_dwr"
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.AggHandler"
//      dwr.table = "agg_traffic_dwr"
      mysql.table = "JAR_ECPM"
      //        TEST
      //      rdb.url = "jdbc:mysql://node17:3306/kok_ssp?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
      //      rdb.user = "root"
      //      rdb.password = "root_root"
      //      PRO
//      rdb.url = "jdbc:mysql://104.250.131.130:8904/kok_ssp?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
      rdb.url = "jdbc:mysql://192.168.111.22:4000/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
      rdb.user = "root"
      rdb.password = "@dfei$@DCcsYG"
    }]
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_agg_fee_dwr"
          partition = 0
        }
      ]
    }
  }

}