rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  # transactional {
  #    tables = ["ad_click_dwi", "ad_fee_dwi"]
  #  }
  jdbc.url = "jdbc:hive2://node17:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=true
  set {
    bootstrap.servers="104.250.136.138:6667,104.250.133.18:6667,104.250.130.82:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node30:6667,node31:6667,node32:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    auto.offset.reset = "earliest"
    #auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  transactional {
    tables = ["uuid.stat"]
  }
  set {
    hbase.zookeeper.quorum = "node14,node17,node15"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  app.name = "agg_fill"
//  streaming.batch.buration = 300
    streaming.batch.buration = 10
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
    spark.streaming.kafka.maxRatePerPartition = 2000
    #spark.streaming.kafka.maxRatePerPartition = 50000
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 10
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 3
    spark.kryoserializer.buffer.max=256
    //    spark.streaming.concurrentJobs = 3
  }
}
modules {

  agg_fill {
    class = "com.mobikok.ssp.data.streaming.module.GenericModule"
    business.date.extract.by = "createTime"
    commit.batch.size = 50000
    commit.time.interval = 1
    dwi.enable = true
    dwi.table = "agg_fill_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.AggTrafficDWISchema"
    dwi.phoenix.enable = true
    //ttl为一个月,60*60*24*30
    // dwi.phoenix.ttl=2592000
    // disable 'AGG_FILL_DWI_PHOENIX'
    // alter 'AGG_FILL_DWI_PHOENIX',{NAME=>'0',TTL=>'2592000'}
    // alter 'AGG_FILL_DWI_PHOENIX', NAME => '0', COMPRESSION => 'snappy'
    // enable 'AGG_FILL_DWI_PHOENIX'
    dwi.phoenix.table = "AGG_FILL_DWI_PHOENIX"
    dwi.phoenix.hbase.storable.class = "com.mobikok.ssp.data.streaming.entity.AggTrafficDWI"
    dwr.enable = true
    dwr.groupby.fields = [ {
      expr = "jarId",       as = "jarId"
    }, {
      expr = "appId",       as = "appId"
    }, {
      expr = "countryId",   as = "countryId"
    }, {
      expr = "carrierId",   as = "carrierId"
    },{
      expr = "connectType", as = "connectType"
    },{
      expr = "publisherId", as = "publisherId"
    },{
      expr = "affSub", as = "affSub"
    }]
    dwr.groupby.aggs = [{
      expr = "count(1)"
      as ="times"
      union = "sum(times)"
    }]
    dwr.table = "agg_fill_dwr"
    dm.kafka.enable = true
    dm.kafka.topic = "topic_agg_fill_dwr"
    kafka.consumer {
      partitoins = [
        {
          topic = "kok_inter_fill_info"
          partition = 0
        }
      ]
    }
  }
}