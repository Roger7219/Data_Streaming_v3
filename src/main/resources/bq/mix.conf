rdb {
  url = "jdbc:mysql://node17:3306/sight?autoReconnect=true&failOverReadOnly=false"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://node17:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="node30:6667,node31:6667,node32:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node30:6667,node31:6667,node32:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
//    auto.offset.reset = "earliest"
    auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  transactional {
    tables = ["uuid.stat"]
  }
  set {
    hbase.zookeeper.quorum = "node106,node107,node108"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  streaming.batch.buration = 200
//  streaming.batch.buration = 10
  set {
    spark.app.name = "bq_mix"
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
//    spark.streaming.backpressure.enabled = true
    spark.streaming.kafka.maxRatePerPartition = 5000
//    spark.streaming.kafka.maxRatePerPartition = 60000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 3
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 3
    spark.kryoserializer.buffer.max=512
//    spark.kryo.registrationRequired = true
    spark.streaming.concurrentJobs = 16
    spark.scheduler.mode=FAIR
    spark.sql.broadcastTimeout=3000
  }
}
modules= {

  redis_offfer_country_stat {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable=true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.OffferCountryStat2RedisHandler"
      //        PRO 104.250.143.251:3306
      //      rdb.url = "jdbc:mysql://104.250.131.130:8904/kok_ssp_stat?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
      rdb.url = "jdbc:mysql://104.250.143.251:3306/kok_ssp?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
      rdb.user = "root"
      rdb.password = "@dfei$@DCcsYG"
    }]
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }


  publisher_third_income {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable=true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.PublisherThirdIncomeHandler"
      //        PRO 104.250.143.251:3306
      //      rdb.url = "jdbc:mysql://104.250.131.130:8904/kok_ssp_stat?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
      rdb.url = "jdbc:mysql://104.250.143.251:3306/kok_ssp_stat?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
      rdb.user = "root"
      rdb.password = "@dfei$@DCcsYG"
    }]
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }

  ssp_report_overall_dwr_day {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.AccelerateTableHandlerV3"
      items = [{
        view = "ssp_report_overall_dwr_day"
        sql="""
            select
                publisherid                                         ,
                appid                                               ,
                countryid                                           ,
                carrierid                                           ,
                versionname                                         ,
                adtype                                              ,
                campaignid                                          ,
                offerid                                             ,
                imageid                                             ,
                affsub                                              ,
                sum(requestcount) as requestcount                   ,
                sum(sendcount)    as sendcount                      ,
                sum(showcount)    as showcount                      ,
                sum(clickcount) as clickcount                       ,
                sum(feereportcount) as feereportcount               ,
                sum(feesendcount) as feesendcount                   ,
                sum(feereportprice) as feereportprice               ,
                sum(feesendprice) as feesendprice                   ,
                sum(cpcbidprice) as cpcbidprice                     ,
                sum(cpmbidprice) as cpmbidprice                     ,
                sum(conversion) as conversion                       ,
                sum(allconversion) as allconversion                 ,
                sum(revenue) as revenue                             ,
                sum(realrevenue) as realrevenue                     ,
                sum(feecpctimes) as feecpctimes                     ,
                sum(feecpmtimes) as feecpmtimes                     ,
                sum(feecpatimes) as feecpatimes                     ,
                sum(feecpasendtimes) as feecpasendtimes             ,
                sum(feecpcreportprice) as feecpcreportprice         ,
                sum(feecpmreportprice) as feecpmreportprice         ,
                sum(feecpareportprice) as feecpareportprice         ,
                sum(feecpcsendprice) as feecpcsendprice             ,
                sum(feecpmsendprice) as feecpmsendprice             ,
                sum(feecpasendprice) as feecpasendprice             ,
                sum(newcount)    as newcount                        ,
                sum(activecount) as activecount                     ,
                date_format(b_time, 'yyyy-MM-dd 00:00:00') as b_time,
                date_format(l_time, 'yyyy-MM-dd 00:00:00') as l_time,
                b_date
            from ssp_report_overall_dwr
            where ${l_time} and b_date > "2018-01-15"
            group by
                publisherid                                         ,
                appid                                               ,
                countryid                                           ,
                carrierid                                           ,
                versionname                                         ,
                adtype                                              ,
                campaignid                                          ,
                offerid                                             ,
                imageid                                             ,
                affsub                                              ,
                date_format(b_time, 'yyyy-MM-dd 00:00:00')          ,
                date_format(l_time, 'yyyy-MM-dd 00:00:00')          ,
                b_date
        """
      }]
    }]
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }

    //          var dwiBTimeFormat = "yyyy-MM-dd 00:00:00"
    //          var dwrBTimeFormat = "yyyy-MM-dd HH:00:00"
    //          var dwiLoadTimeFormat = CSTTime.formatter("yyyy-MM-dd HH:00:00")
    //          var dwrLoadTimeFormat = CSTTime.formatter("yyyy-MM-dd 00:00:00")
  }

  ssp_report_overall_dwr_month {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.AccelerateTableHandlerV3"
      items = [{
        view = "ssp_report_overall_dwr_month"
        sql="""
            select
                publisherid                                         ,
                appid                                               ,
                countryid                                           ,
                campaignid                                          ,
                offerid                                             ,
                versionname                                         ,
                sum(requestcount) as requestcount                   ,
                sum(sendcount)    as sendcount                      ,
                sum(showcount)    as showcount                      ,
                sum(clickcount) as clickcount                       ,
                sum(feereportcount) as feereportcount               ,
                sum(feesendcount) as feesendcount                   ,
                sum(feereportprice) as feereportprice               ,
                sum(feesendprice) as feesendprice                   ,
                sum(cpcbidprice) as cpcbidprice                     ,
                sum(cpmbidprice) as cpmbidprice                     ,
                sum(conversion) as conversion                       ,
                sum(allconversion) as allconversion                 ,
                sum(revenue) as revenue                             ,
                sum(realrevenue) as realrevenue                     ,
                sum(feecpctimes) as feecpctimes                     ,
                sum(feecpmtimes) as feecpmtimes                     ,
                sum(feecpatimes) as feecpatimes                     ,
                sum(feecpasendtimes) as feecpasendtimes             ,
                sum(feecpcreportprice) as feecpcreportprice         ,
                sum(feecpmreportprice) as feecpmreportprice         ,
                sum(feecpareportprice) as feecpareportprice         ,
                sum(feecpcsendprice) as feecpcsendprice             ,
                sum(feecpmsendprice) as feecpmsendprice             ,
                sum(feecpasendprice) as feecpasendprice             ,
                date_format(b_time, 'yyyy-MM-01 00:00:00') as b_time,
                date_format(l_time, 'yyyy-MM-01 00:00:00') as l_time,
                date_format(b_date, 'yyyy-MM-01') as b_date
            from ssp_report_overall_dwr
            where ${l_time}
            group by
                publisherid                                         ,
                appid                                               ,
                countryid                                           ,
                campaignid                                          ,
                offerid                                             ,
                versionname                                         ,
                date_format(b_time, 'yyyy-MM-01 00:00:00')          ,
                date_format(l_time, 'yyyy-MM-01 00:00:00')          ,
                date_format(b_date, 'yyyy-MM-01')
        """
      }]
    }]
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }

    //          var dwiBTimeFormat = "yyyy-MM-dd 00:00:00"
    //          var dwrBTimeFormat = "yyyy-MM-dd HH:00:00"
    //          var dwiLoadTimeFormat = CSTTime.formatter("yyyy-MM-dd HH:00:00")
    //          var dwrLoadTimeFormat = CSTTime.formatter("yyyy-MM-dd 00:00:00")
  }

//  adx_third_party_report {
//    class = "com.mobikok.ssp.data.streaming.module.MixModule"
//    business.date.extract.by = "createTime"
//    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
//
//    dm.handler.enable = true
//    dm.handler.setting = [{
//      class = "com.mobikok.ssp.data.streaming.handler.dm.AdxThirdPartyReportHandler"
//    }]
//
//    kafka.consumer {
//      partitoins = [
//        {
//          topic = "topic_empty"
//          partition = 0
//        }
//      ]
//    }
//  }

  mysql_mode_caps {
    class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
    business.date.extract.by = "createTime"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.IntegrationModeCapsHandler"
      rdb {
        //        url = "jdbc:mysql://node17:3306/kok_ssp?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
        url = "jdbc:mysql://192.168.111.19:3306/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
        user = "root"
        password = "@dfei$@DCcsYG"
      }
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }

  monitor_ecpec_cr {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.MonitorOfferEcpcAndCrHandler"
      table = "ssp_report_overall_dm_day"
//      table = "ssp_report_campaign_dm"
      rdb {
        //        url = "jdbc:mysql://node17:3306/kok_ssp?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
        url = "jdbc:mysql://192.168.111.19:3306/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
        user = "root"
        password = "@dfei$@DCcsYG"
      }
      message.topics = ["ssp_report_overall_dwr"]
//      message.topics = [
//        "report_campaign_fill","report_campaign_send","report_campaign_show"
//        ,"report_campaign_click","report_campaign_fee",
//        "ssp_report_campaign_dwr"
//      ]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }

  monitor_userinfo {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspUserDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.UserInfoHandler"
      table = "ssp_user_new_dwi"
      rdb {
        //      url = "jdbc:mysql://node17:3306/kok_ssp?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
        //PRO
        url = "jdbc:mysql://192.168.111.19:3306/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
        user = "root"
        password = "@dfei$@DCcsYG"
      }
      message.topics = [
        "ssp_user_new_dwi"
      ]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }

  mysql_publisher {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.PublisherHandler"
      //        dwr.daily.table = "ssp_publisher_daily_dwr"
      //        dwr.totalcost.table = "ssp_publisher_totalcost_dwr"
      //        TEST
      //        rdb.url = "jdbc:mysql://node17:3306/kok_ssp?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
      //        rdb.user = "root"
      //        rdb.password = "root_root"
      //        PRO
      rdb.url = "jdbc:mysql://192.168.111.19:3306/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
      rdb.user = "root"
      rdb.password = "@dfei$@DCcsYG"
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  mysql_campaign {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.CampaignHandler"
      //        dwr.daily.table = "ssp_campaign_daily_dwr"
      //        dwr.totalcost.table = "ssp_campaign_totalcost_dwr"
      //        TEST
      //        rdb.url = "jdbc:mysql://node17:3306/kok_ssp?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
      //        rdb.user = "root"
      //        rdb.password = "root_root"
      //        PRO
      rdb.url = "jdbc:mysql://192.168.111.19:3306/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
      rdb.user = "root"
      rdb.password = "@dfei$@DCcsYG"
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  mysql_adver {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.CampaignAdverHandler"
      //        dwr.daily.table = "ssp_campaign_daily_dwr"
      //        dwr.totalcost.table = "ssp_campaign_totalcost_dwr"
      //        //        TEST
      //        rdb.url = "jdbc:mysql://node17:3306/kok_ssp?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
      //        rdb.user = "root"
      //        rdb.password = "root_root"

      //          url = "jdbc:mysql://192.168.111.19:3306/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
      //          user = "root"
      //          password = "@dfei$@DCcsYG"

      //        PRO
      rdb.url = "jdbc:mysql://192.168.111.19:3306/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
      rdb.user = "root"
      rdb.password = "@dfei$@DCcsYG"
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  mysql_app {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.AppHandler"
      //        TEST
      //        rdb {
      ////          url = "jdbc:mysql://node17:3306/kok_ssp?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
      ////          user = "root"
      ////          password = "root_root"
      //
      //            url = "jdbc:mysql://192.168.111.19:3306/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
      //            user = "root"
      //            password = "@dfei$@DCcsYG"
      //        }
      //        PRO
      rdb.url = "jdbc:mysql://192.168.111.19:3306/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
      rdb.user = "root"
      rdb.password = "@dfei$@DCcsYG"
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }

  agg_traffic_month_dwr {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.AccelerateTableHandlerV2"
      items = [{
        view = "agg_traffic_month_dwr"
        sql="""
            select
                jarId,
                countryId,
                sum(showCount)                             as showCount,
                sum(cost)                                  as cost,
                date_format(b_date, 'yyyy-MM-01')          as b_date,
                date_format(l_time, 'yyyy-MM-01 00:00:00') as l_time
            from agg_traffic_dwr
            where ${l_time}
            group by
                date_format(b_date, 'yyyy-MM-01'),
                date_format(l_time, 'yyyy-MM-01 00:00:00'),
                jarId,
                countryId
        """
      }]
    }]
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }

//  ssp_report_overall_dm_month {
//    class = "com.mobikok.ssp.data.streaming.module.MixModule"
//    business.date.extract.by = "createTime"
//    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
//
//    dm.handler.enable = true
//    dm.handler.setting = [{
//      class = "com.mobikok.ssp.data.streaming.handler.dm.AccelerateTableHandlerV3"
//      items = [{
//        view = "ssp_report_overall_dm_month"
//        topic = "ssp_report_overall_dwr"
//        sql="""
//            select
//                publisherid,
//                publishername,
//                appid,
//                appname,
//                adverid,
//                advername,
//                carrierid,
//                carriername,
//                countryid,
//                countryname,
//                campaignid,
//                campaignname,
//                offerid,
//                offername,
//                sum(requestcount)   as requestcount,
//                sum(sendcount)      as sendcount,
//                sum(showcount)      as showcount,
//                sum(clickcount)     as clickcount,
//                sum(feereportcount) as feereportcount,
//                sum(feesendcount)   as feesendcount,
//                sum(feereportprice) as feereportprice,
//                sum(feesendprice)   as feesendprice,
//                sum(cpcbidprice)    as cpcbidprice,
//                sum(cpmbidprice)    as cpmbidprice,
//                sum(conversion)     as conversion,
//                sum(allconversion)  as allconversion,
//                sum(revenue)        as revenue,
//                sum(realrevenue)    as realrevenue,
//                sum(feecpctimes)    as feecpctimes,
//                sum(feecpcsendprice)    as feecpcsendprice,
//                sum(feecpcreportprice)  as feecpcreportprice,
//                sum(feecpmtimes)        as feecpmtimes,
//                sum(feecpmreportprice)  as feecpmreportprice,
//                sum(feecpmsendprice)    as feecpmsendprice,
//                sum(feecpatimes)        as feecpatimes,
//                sum(feecpareportprice)  as feecpareportprice,
//                sum(feecpasendtimes)    as feecpasendtimes,
//                sum(feecpasendprice)    as feecpasendprice,
//                date_format(b_time, 'yyyy-MM-01 00:00:00') as b_time,
//                date_format(l_time, 'yyyy-MM-01 00:00:00') as l_time,
//                date_format(b_date, 'yyyy-MM-01')          as b_date
//            from ssp_report_overall_dm_day
//            where (data_type = 'camapgin' or data_type is null) and ${l_time}
//            group by
//                publisherid,
//                publishername,
//                appid,
//                appname,
//                adverid,
//                advername,
//                carrierid,
//                carriername,
//                countryid,
//                countryname,
//                campaignid,
//                campaignname,
//                offerid,
//                offername,
//                date_format(b_time, 'yyyy-MM-01 00:00:00'),
//                date_format(l_time, 'yyyy-MM-01 00:00:00'),
//                date_format(b_date, 'yyyy-MM-01')
//        """
//      }]
//    }]
//    kafka.consumer {
//      partitoins = [
//        {
//          topic = "topic_empty"
//          partition = 0
//        }
//      ]
//    }
//
//    //          var dwiBTimeFormat = "yyyy-MM-dd 00:00:00"
//    //          var dwrBTimeFormat = "yyyy-MM-dd HH:00:00"
//    //          var dwiLoadTimeFormat = CSTTime.formatter("yyyy-MM-dd HH:00:00")
//    //          var dwrLoadTimeFormat = CSTTime.formatter("yyyy-MM-dd 00:00:00")
//  }

  // 待删
  ssp_report_campaign_month_dm {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.DmTableGeneratorHandler"
      items = [{
        view = "ssp_report_campaign_month_dm"
        union.group="""
            date_format(b_date, 'yyyy-MM-01')|
            publisherid|
            publishername|
            appid|
            appname|
            adverid|
            advername|
            carrierid|
            carriername|
            countryid|
            countryname|
            campaignid|
            campaignname|
            offerid|
            offername
        """
        union.sum="""
            sum(requestcount)   as requestcount|
            sum(sendcount)      as sendcount|
            sum(showcount)      as showcount|
            sum(clickcount)     as clickcount|
            sum(feereportcount) as feereportcount|
            sum(feesendcount)   as feesendcount|
            sum(feereportprice) as feereportprice|
            sum(feesendprice)   as feesendprice|
            sum(cpcbidprice)    as cpcbidprice|
            sum(cpmbidprice)    as cpmbidprice|
            sum(conversion)     as conversion|
            sum(allconversion)  as allconversion|
            sum(revenue)        as revenue|
            sum(realrevenue)    as realrevenue|
            sum(feecpctimes)    as feecpctimes|
            sum(feecpcsendprice)    as feecpcsendprice|
            sum(feecpcreportprice)  as feecpcreportprice|
            sum(feecpmtimes)        as feecpmtimes|
            sum(feecpmreportprice)  as feecpmreportprice|
            sum(feecpmsendprice)    as feecpmsendprice|
            sum(feecpatimes)        as feecpatimes|
            sum(feecpareportprice)  as feecpareportprice|
            sum(feecpasendtimes)    as feecpasendtimes|
            sum(feecpasendprice)    as feecpasendprice|
            date_format(b_date, 'yyyy-MM-01') as b_date
        """
        message.consumer = "ssp_report_campaign_month_dm_cer"
        message.topics = ["ssp_report_campaign_dwr", "ssp_report_campaign_month_dm_re_init"]
        createBaseTableSql= """
            create table if not exists ssp_report_campaign_month_dm_base(
                publisherid     INT,
                publishername   STRING,
                appid           INT,
                appname         STRING,
                adverid         INT,
                advername       STRING,
                carrierid       INT,
                carriername     STRING,
                countryid       INT,
                countryname     STRING,
                campaignid      INT,
                campaignname    STRING,
                offerId         INT,
                offername       STRING,
                requestcount    BIGINT,
                sendcount       BIGINT,
                showcount       BIGINT,
                clickcount      BIGINT,
                feereportcount  bigint,
                feesendcount    BIGINT,
                feereportprice  DOUBLE,
                feesendprice    DOUBLE,
                cpcbidprice     DOUBLE,
                cpmbidprice     DOUBLE,
                conversion      BIGINT,
                allconversion   BIGINT,
                revenue         DOUBLE,
                realrevenue     DOUBLE,
                feecpctimes     BIGINT,
                feecpcsendprice DOUBLE,
                feecpcreportprice   DOUBLE,
                feecpmtimes         BIGINT,
                feecpmreportprice   DOUBLE,
                feecpmsendprice     DOUBLE,
                feecpatimes         BIGINT,
                feecpareportprice   DOUBLE,
                feecpasendtimes     BIGINT,
                feecpasendprice     DOUBLE
            )
            PARTITIONED BY (b_date STRING)
            STORED AS ORC;
        """
        sql="""
            select
                publisherid,
                publishername,
                appid,
                appname,
                adverid,
                advername,
                carrierid,
                carriername,
                countryid,
                countryname,
                campaignid,
                campaignname,
                offerid,
                offername,
                sum(requestcount)   as requestcount,
                sum(sendcount)      as sendcount,
                sum(showcount)      as showcount,
                sum(clickcount)     as clickcount,
                sum(feereportcount) as feereportcount,
                sum(feesendcount)   as feesendcount,
                sum(feereportprice) as feereportprice,
                sum(feesendprice)   as feesendprice,
                sum(cpcbidprice)    as cpcbidprice,
                sum(cpmbidprice)    as cpmbidprice,
                sum(conversion)     as conversion,
                sum(allconversion)  as allconversion,
                sum(revenue)        as revenue,
                sum(realrevenue)    as realrevenue,
                sum(feecpctimes)    as feecpctimes,
                sum(feecpcsendprice)    as feecpcsendprice,
                sum(feecpcreportprice)  as feecpcreportprice,
                sum(feecpmtimes)        as feecpmtimes,
                sum(feecpmreportprice)  as feecpmreportprice,
                sum(feecpmsendprice)    as feecpmsendprice,
                sum(feecpatimes)        as feecpatimes,
                sum(feecpareportprice)  as feecpareportprice,
                sum(feecpasendtimes)    as feecpasendtimes,
                sum(feecpasendprice)    as feecpasendprice,
                date_format(b_date, 'yyyy-MM-01') as b_date
            from ssp_report_campaign_dm
            where (data_type = 'camapgin' or data_type is null) and ${l_time}
            group by
                date_format(b_date, 'yyyy-MM-01'),
                publisherid,
                publishername,
                appid,
                appname,
                adverid,
                advername,
                carrierid,
                carriername,
                countryid,
                countryname,
                campaignid,
                campaignname,
                offerid,
                offername;
        """
      }]
    }]
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }

  redis_day_month_limit {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.RedisDayMonthLimitHandlerV2"
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bq_topn {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryCustomViewOfflineHandler"
      items = [{
        view = "ssp_topn_dm"
        message.consumer = "ssp_topn_dm_cer"
//        message.consumer = "ssp_report_campaign_dwr_bqcer4"
        message.topics = ["ssp_report_overall_dwr_day"]
//        message.topics = [
//          "report_campaign_fill", "ssp_report_campaign_dwr"
//        ]
        // b_date 传入的已经是昨天的日期了，所以这里减0
        set.b_date = """cast( date_sub("${b_date}", 0) as string)"""
        sql="""
          -- set b_date = "2017-12-07";

          -- publisher
          create or replace temporary  view publisher_t AS
          select
              b_date,
              publisherAmId,
              publisherId          as id,
              max(publisherName)   as name,
              sum(requestCount)    as requestCount,
              sum(clickCount)      as clickCount,
              sum(feeReportCount)  as realConversion,
              sum(feeSendCount)    as conversion,
              sum(realRevenue)     as realRevenue,
              sum(revenue)         as revenue,
              CAST( CASE sum(clickCount) WHEN 0 THEN 0 ELSE 100000*1000*sum(realRevenue)/cast(sum(clickCount)  as DECIMAL(19,10) ) END AS BIGINT)/100000.0 as realEcpc,
              CAST( CASE sum(clickCount) WHEN 0 THEN 0 ELSE 100000*1000*sum(revenue)/cast(sum(clickCount)  as DECIMAL(19,10) ) END AS BIGINT)/100000.0     as ecpc,
              CAST( CASE sum(clickCount) WHEN 0 THEN 0 ELSE CAST(100000 AS BIGINT)*100*sum(feeReportCount) /cast(sum(clickCount)  as DECIMAL(19,10) ) END AS BIGINT)/100000.0 as realCr,
              CAST( CASE sum(clickCount) WHEN 0 THEN 0 ELSE CAST(100000 AS BIGINT)*100*sum(feeSendCount) /cast(sum(clickCount)  as DECIMAL(19,10) ) END AS BIGINT)/100000.0   as cr,
              companyId,
              max(companyName)   as companyName,
              publisherAmpaId
          -- from ssp_report_campaign_dm
          from ssp_report_overall_dm_day
          where b_date in ( date_sub(${b_date}, 1), ${b_date} ) and (data_type = 'camapgin' or data_type is null)
          group by b_date, publisherAmId, publisherId, companyId, publisherAmpaId;

          create or replace temporary view publisher_y AS
          select
              cast(date_add(b_date, 1) as string)as joinDate,
              b_date              as yesterdayDate,
              id                  as yesterdayId,
              name                as yesterdayName,
              requestCount        as yesterdayRequestCount,
              clickCount          as yesterdayClickCount,
              realConversion      as yesterdayRealConversion,
              conversion          as yesterdayConversion,
              realRevenue         as yesterdayRealRevenue,
              revenue             as yesterdayRevenue,
              realEcpc            as yesterdayRealEcpc,
              ecpc                as yesterdayEcpc,
              realCr              as yesterdayRealCr,
              cr                  as yesterdayCr,
              publisherAmId       as yesterdayPublisherAmId,
              companyId           as yesterdayCompanyId,
              publisherAmpaId     as yesterdayPublisherAmpaId
          from publisher_t;

          -- app
          create or replace temporary  view app_t AS
          select
              b_date,
              publisherAmId,
              appId                as id,
              max(appName)         as name,
              sum(requestCount)    as requestCount,
              sum(clickCount)      as clickCount,
              sum(feeReportCount)  as realConversion,
              sum(feeSendCount)    as conversion,
              sum(realRevenue)     as realRevenue,
              sum(revenue)         as revenue,
              CAST( CASE sum(clickCount) WHEN 0 THEN 0 ELSE 100000*1000*sum(realRevenue)/cast(sum(clickCount)  as DECIMAL(19,10) ) END AS BIGINT)/100000.0 as realEcpc,
              CAST( CASE sum(clickCount) WHEN 0 THEN 0 ELSE 100000*1000*sum(revenue)/cast(sum(clickCount)  as DECIMAL(19,10) ) END AS BIGINT)/100000.0     as ecpc,
              CAST( CASE sum(clickCount) WHEN 0 THEN 0 ELSE CAST(100000 AS BIGINT)*100*sum(feeReportCount) /cast(sum(clickCount)  as DECIMAL(19,10) ) END AS BIGINT)/100000.0 as realCr,
              CAST( CASE sum(clickCount) WHEN 0 THEN 0 ELSE CAST(100000 AS BIGINT)*100*sum(feeSendCount) /cast(sum(clickCount)  as DECIMAL(19,10) ) END AS BIGINT)/100000.0   as cr,
              companyId,
              max(companyName)   as companyName,
              publisherAmpaId
          -- from ssp_report_campaign_dm
          from ssp_report_overall_dm_day
          where b_date in ( date_sub(${b_date}, 1), ${b_date} ) and (data_type = 'camapgin' or data_type is null)
          group by b_date, publisherAmId, appId, companyId, publisherAmpaId;

          create or replace temporary view app_y AS
          select
              cast(date_add(b_date, 1) as string) as joinDate,
              b_date              as yesterdayDate,
              id                  as yesterdayId,
              name                as yesterdayName,
              requestCount        as yesterdayRequestCount,
              clickCount          as yesterdayClickCount,
              realConversion      as yesterdayRealConversion,
              conversion          as yesterdayConversion,
              realRevenue         as yesterdayRealRevenue,
              revenue             as yesterdayRevenue,
              realEcpc            as yesterdayRealEcpc,
              ecpc                as yesterdayEcpc,
              realCr              as yesterdayRealCr,
              cr                  as yesterdayCr,
              publisherAmId       as yesterdayPublisherAmId,
              companyId           as yesterdayCompanyId,
              publisherAmpaId     as yesterdayPublisherAmpaId
          from app_t;

          -- country
          create or replace temporary  view country_t AS
          select
              b_date,
              -1 as publisherAmId,
              countryId            as id,
              max(countryName)     as name,
              sum(requestCount)    as requestCount,
              sum(clickCount)      as clickCount,
              sum(feeReportCount)  as realConversion,
              sum(feeSendCount)    as conversion,
              sum(realRevenue)     as realRevenue,
              sum(revenue)         as revenue,
              CAST( CASE sum(clickCount) WHEN 0 THEN 0 ELSE 100000*1000*sum(realRevenue)/cast(sum(clickCount)  as DECIMAL(19,10) ) END AS BIGINT)/100000.0 as realEcpc,
              CAST( CASE sum(clickCount) WHEN 0 THEN 0 ELSE 100000*1000*sum(revenue)/cast(sum(clickCount)  as DECIMAL(19,10) ) END AS BIGINT)/100000.0     as ecpc,
              CAST( CASE sum(clickCount) WHEN 0 THEN 0 ELSE CAST(100000 AS BIGINT)*100*sum(feeReportCount) /cast(sum(clickCount)  as DECIMAL(19,10) ) END AS BIGINT)/100000.0 as realCr,
              CAST( CASE sum(clickCount) WHEN 0 THEN 0 ELSE CAST(100000 AS BIGINT)*100*sum(feeSendCount) /cast(sum(clickCount)  as DECIMAL(19,10) ) END AS BIGINT)/100000.0   as cr,
              companyId,
              max(companyName)   as companyName,
              -1                 as publisherAmpaId
          -- from ssp_report_campaign_dm
          from ssp_report_overall_dm_day
          where b_date in ( date_sub(${b_date}, 1), ${b_date} ) and (data_type = 'camapgin' or data_type is null)
          group by b_date, countryId, companyId;

          create or replace temporary view country_y AS
          select
              cast(date_add(b_date, 1) as string) as joinDate,
              b_date              as yesterdayDate,
              id                  as yesterdayId,
              name                as yesterdayName,
              requestCount        as yesterdayRequestCount,
              clickCount          as yesterdayClickCount,
              realConversion      as yesterdayRealConversion,
              conversion          as yesterdayConversion,
              realRevenue         as yesterdayRealRevenue,
              revenue             as yesterdayRevenue,
              realEcpc            as yesterdayRealEcpc,
              ecpc                as yesterdayEcpc,
              realCr              as yesterdayRealCr,
              cr                  as yesterdayCr,
              publisherAmId       as yesterdayPublisherAmId,
              companyId           as yesterdayCompanyId,
              publisherAmpaId     as yesterdayPublisherAmpaId
          from country_t;

          -- offer
          create or replace temporary  view offer_t AS
          select
              b_date,
              -1 as publisherAmId,
              offerId              as id,
              max(offerName)       as name,
              sum(requestCount)    as requestCount,
              sum(clickCount)      as clickCount,
              sum(feeReportCount)  as realConversion,
              sum(feeSendCount)    as conversion,
              sum(realRevenue)     as realRevenue,
              sum(revenue)         as revenue,
              CAST( CASE sum(clickCount) WHEN 0 THEN 0 ELSE 100000*1000*sum(realRevenue)/cast(sum(clickCount)  as DECIMAL(19,10) ) END AS BIGINT)/100000.0 as realEcpc,
              CAST( CASE sum(clickCount) WHEN 0 THEN 0 ELSE 100000*1000*sum(revenue)/cast(sum(clickCount)  as DECIMAL(19,10) ) END AS BIGINT)/100000.0     as ecpc,
              CAST( CASE sum(clickCount) WHEN 0 THEN 0 ELSE CAST(100000 AS BIGINT)*100*sum(feeReportCount) /cast(sum(clickCount)  as DECIMAL(19,10) ) END AS BIGINT)/100000.0 as realCr,
              CAST( CASE sum(clickCount) WHEN 0 THEN 0 ELSE CAST(100000 AS BIGINT)*100*sum(feeSendCount) /cast(sum(clickCount)    as DECIMAL(19,10) ) END AS BIGINT)/100000.0   as cr,
              companyId,
              max(companyName)   as companyName,
              -1                 as publisherAmpaId
          -- from ssp_report_campaign_dm
          from ssp_report_overall_dm_day
          where b_date in ( date_sub(${b_date}, 1), ${b_date} ) and (data_type = 'camapgin' or data_type is null)
          group by b_date, offerId, companyId;

          create or replace temporary view offer_y AS
          select
              cast(date_add(b_date, 1) as string) as joinDate,
              b_date              as yesterdayDate,
              id                  as yesterdayId,
              name                as yesterdayName,
              requestCount        as yesterdayRequestCount,
              clickCount          as yesterdayClickCount,
              realConversion      as yesterdayRealConversion,
              conversion          as yesterdayConversion,
              realRevenue         as yesterdayRealRevenue,
              revenue             as yesterdayRevenue,
              realEcpc            as yesterdayRealEcpc,
              ecpc                as yesterdayEcpc,
              realCr              as yesterdayRealCr,
              cr                  as yesterdayCr,
              publisherAmId       as yesterdayPublisherAmId,
              companyId           as yesterdayCompanyId,
              publisherAmpaId     as yesterdayPublisherAmpaId
          from offer_t;

          -- DM
          create or replace temporary view ssp_topn_dm AS
          select
              id,
              t.name as name,
              t.publisherAmId,
              t.requestCount,
              t.clickCount,
              t.realConversion,
              t.conversion,
              t.realRevenue,
              t.revenue,
              t.realEcpc,
              t.ecpc,
              t.realCr,
              t.cr,
              y.joinDate,
              y.yesterdayDate,
              y.yesterdayId,
              y.yesterdayName,
              y.yesterdayRequestCount,
              y.yesterdayClickCount,
              y.yesterdayRealConversion,
              y.yesterdayConversion,
              y.yesterdayRealRevenue,
              y.yesterdayRevenue,
              y.yesterdayRealEcpc,
              y.yesterdayEcpc,
              y.yesterdayRealCr,
              y.yesterdayCr,
              if(y.yesterdayRealRevenue = 0, 100, CAST(CAST(100 AS BIGINT)*(t.realRevenue     - y.yesterdayRealRevenue)*100/y.yesterdayRealRevenue AS BIGINT)/100.0 )  as realRevenueInc,
              if(y.yesterdayRevenue = 0, 100, CAST(CAST(100 AS BIGINT)*(t.revenue             - y.yesterdayRevenue)*100/y.yesterdayRevenue AS BIGINT)/100.0 )          as revenueInc,
              abs(if(y.yesterdayRealRevenue = 0, 100, CAST(CAST(100 AS BIGINT)*(t.realRevenue - y.yesterdayRealRevenue)*100/y.yesterdayRealRevenue AS BIGINT)/100.0 )) as realAbsRevenueInc,
              abs(if(y.yesterdayRevenue = 0, 100, CAST(CAST(100 AS BIGINT)*(t.revenue         - y.yesterdayRevenue)*100/y.yesterdayRevenue AS BIGINT)/100.0 ))         as absRevenueInc,
              if(y.yesterdayRealCr = 0, 100, CAST(CAST(100 AS BIGINT)*(t.realCr               - y.yesterdayRealCr)*100/y.yesterdayRealCr AS BIGINT)/100.0 )            as realCrInc,
              if(y.yesterdayCr = 0, 100, CAST(CAST(100 AS BIGINT)*(t.cr                       - y.yesterdayCr)*100/y.yesterdayCr AS BIGINT)/100.0 )                    as crInc,
              if(y.yesterdayRealEcpc = 0, 100, CAST(CAST(100 AS BIGINT)*(t.realEcpc           - y.yesterdayRealEcpc)*100/y.yesterdayRealEcpc AS BIGINT)/100.0 )        as realEcpcInc,
              if(y.yesterdayEcpc = 0, 100, CAST(CAST(100 AS BIGINT)*(t.ecpc                   - y.yesterdayEcpc)*100/y.yesterdayEcpc AS BIGINT)/100.0 )                as ecpcInc,
              1 as data_type,
              t.b_date,
              t.companyId,
              t.companyName,
              t.publisherAmpaId
          from publisher_t t
          left join  publisher_y y on t.b_date = y.joinDate and t.publisherAmId = y.yesterdayPublisherAmId and t.id  = y.yesterdayId and t.companyId  = y.yesterdaycompanyId and t.publisherAmpaId = y.yesterdayPublisherAmpaId
          union all
          select
              id,
              t.name as name,
              t.publisherAmId,
              t.requestCount,
              t.clickCount,
              t.realConversion,
              t.conversion,
              t.realRevenue,
              t.revenue,
              t.realEcpc,
              t.ecpc,
              t.realCr,
              t.cr,
              y.joinDate,
              y.yesterdayDate,
              y.yesterdayId,
              y.yesterdayName,
              y.yesterdayRequestCount,
              y.yesterdayClickCount,
              y.yesterdayRealConversion,
              y.yesterdayConversion,
              y.yesterdayRealRevenue,
              y.yesterdayRevenue,
              y.yesterdayRealEcpc,
              y.yesterdayEcpc,
              y.yesterdayRealCr,
              y.yesterdayCr,
              if(y.yesterdayRealRevenue = 0, 100, CAST(CAST(100 AS BIGINT)*(t.realRevenue     - y.yesterdayRealRevenue)*100/y.yesterdayRealRevenue AS BIGINT)/100.0 )  as realRevenueInc,
              if(y.yesterdayRevenue = 0, 100, CAST(CAST(100 AS BIGINT)*(t.revenue             - y.yesterdayRevenue)*100/y.yesterdayRevenue AS BIGINT)/100.0 )          as revenueInc,
              abs(if(y.yesterdayRealRevenue = 0, 100, CAST(CAST(100 AS BIGINT)*(t.realRevenue - y.yesterdayRealRevenue)*100/y.yesterdayRealRevenue AS BIGINT)/100.0 )) as realAbsRevenueInc,
              abs(if(y.yesterdayRevenue = 0, 100, CAST(CAST(100 AS BIGINT)*(t.revenue         - y.yesterdayRevenue)*100/y.yesterdayRevenue AS BIGINT)/100.0 ))         as absRevenueInc,
              if(y.yesterdayRealCr = 0, 100, CAST(CAST(100 AS BIGINT)*(t.realCr               - y.yesterdayRealCr)*100/y.yesterdayRealCr AS BIGINT)/100.0 )            as realCrInc,
              if(y.yesterdayCr = 0, 100, CAST(CAST(100 AS BIGINT)*(t.cr                       - y.yesterdayCr)*100/y.yesterdayCr AS BIGINT)/100.0 )                    as crInc,
              if(y.yesterdayRealEcpc = 0, 100, CAST(CAST(100 AS BIGINT)*(t.realEcpc           - y.yesterdayRealEcpc)*100/y.yesterdayRealEcpc AS BIGINT)/100.0 )        as realEcpcInc,
              if(y.yesterdayEcpc = 0, 100, CAST(CAST(100 AS BIGINT)*(t.ecpc                   - y.yesterdayEcpc)*100/y.yesterdayEcpc AS BIGINT)/100.0 )                as ecpcInc,
              2 as data_type,
              t.b_date,
              t.companyId,
              t.companyName,
              t.publisherAmpaId
          from app_t t
          left join  app_y y on t.b_date = y.joinDate and t.publisherAmId = y.yesterdayPublisherAmId and t.id  = y.yesterdayId and t.companyId  = y.yesterdaycompanyId and t.publisherAmpaId = y.yesterdayPublisherAmpaId
          union all
          select
              id,
              t.name as name,
              t.publisherAmId,
              t.requestCount,
              t.clickCount,
              t.realConversion,
              t.conversion,
              t.realRevenue,
              t.revenue,
              t.realEcpc,
              t.ecpc,
              t.realCr,
              t.cr,
              y.joinDate,
              y.yesterdayDate,
              y.yesterdayId,
              y.yesterdayName,
              y.yesterdayRequestCount,
              y.yesterdayClickCount,
              y.yesterdayRealConversion,
              y.yesterdayConversion,
              y.yesterdayRealRevenue,
              y.yesterdayRevenue,
              y.yesterdayRealEcpc,
              y.yesterdayEcpc,
              y.yesterdayRealCr,
              y.yesterdayCr,
              if(y.yesterdayRealRevenue = 0, 100, CAST(CAST(100 AS BIGINT)*(t.realRevenue     - y.yesterdayRealRevenue)*100/y.yesterdayRealRevenue AS BIGINT)/100.0 )  as realRevenueInc,
              if(y.yesterdayRevenue = 0, 100, CAST(CAST(100 AS BIGINT)*(t.revenue             - y.yesterdayRevenue)*100/y.yesterdayRevenue AS BIGINT)/100.0 )          as revenueInc,
              abs(if(y.yesterdayRealRevenue = 0, 100, CAST(CAST(100 AS BIGINT)*(t.realRevenue - y.yesterdayRealRevenue)*100/y.yesterdayRealRevenue AS BIGINT)/100.0 )) as realAbsRevenueInc,
              abs(if(y.yesterdayRevenue = 0, 100, CAST(CAST(100 AS BIGINT)*(t.revenue         - y.yesterdayRevenue)*100/y.yesterdayRevenue AS BIGINT)/100.0 ))         as absRevenueInc,
              if(y.yesterdayRealCr = 0, 100, CAST(CAST(100 AS BIGINT)*(t.realCr               - y.yesterdayRealCr)*100/y.yesterdayRealCr AS BIGINT)/100.0 )            as realCrInc,
              if(y.yesterdayCr = 0, 100, CAST(CAST(100 AS BIGINT)*(t.cr                       - y.yesterdayCr)*100/y.yesterdayCr AS BIGINT)/100.0 )                    as crInc,
              if(y.yesterdayRealEcpc = 0, 100, CAST(CAST(100 AS BIGINT)*(t.realEcpc           - y.yesterdayRealEcpc)*100/y.yesterdayRealEcpc AS BIGINT)/100.0 )        as realEcpcInc,
              if(y.yesterdayEcpc = 0, 100, CAST(CAST(100 AS BIGINT)*(t.ecpc                   - y.yesterdayEcpc)*100/y.yesterdayEcpc AS BIGINT)/100.0 )                as ecpcInc,
              3 as data_type,
              t.b_date,
              t.companyId,
              t.companyName,
              t.publisherAmpaId
          from country_t t
          left join  country_y y on t.b_date = y.joinDate and t.id  = y.yesterdayId and t.companyId  = y.yesterdaycompanyId
          union all
          select
              id,
              t.name as name,
              t.publisherAmId,
              t.requestCount,
              t.clickCount,
              t.realConversion,
              t.conversion,
              t.realRevenue,
              t.revenue,
              t.realEcpc,
              t.ecpc,
              t.realCr,
              t.cr,
              y.joinDate,
              y.yesterdayDate,
              y.yesterdayId,
              y.yesterdayName,
              y.yesterdayRequestCount,
              y.yesterdayClickCount,
              y.yesterdayRealConversion,
              y.yesterdayConversion,
              y.yesterdayRealRevenue,
              y.yesterdayRevenue,
              y.yesterdayRealEcpc,
              y.yesterdayEcpc,
              y.yesterdayRealCr,
              y.yesterdayCr,
              if(y.yesterdayRealRevenue = 0, 100, CAST(CAST(100 AS BIGINT)*(t.realRevenue     - y.yesterdayRealRevenue)*100/y.yesterdayRealRevenue AS BIGINT)/100.0 )  as realRevenueInc,
              if(y.yesterdayRevenue = 0, 100, CAST(CAST(100 AS BIGINT)*(t.revenue             - y.yesterdayRevenue)*100/y.yesterdayRevenue AS BIGINT)/100.0 )          as revenueInc,
              abs(if(y.yesterdayRealRevenue = 0, 100, CAST(CAST(100 AS BIGINT)*(t.realRevenue - y.yesterdayRealRevenue)*100/y.yesterdayRealRevenue AS BIGINT)/100.0 )) as realAbsRevenueInc,
              abs(if(y.yesterdayRevenue = 0, 100, CAST(CAST(100 AS BIGINT)*(t.revenue         - y.yesterdayRevenue)*100/y.yesterdayRevenue AS BIGINT)/100.0 ))         as absRevenueInc,
              if(y.yesterdayRealCr = 0, 100, CAST(CAST(100 AS BIGINT)*(t.realCr               - y.yesterdayRealCr)*100/y.yesterdayRealCr AS BIGINT)/100.0 )            as realCrInc,
              if(y.yesterdayCr = 0, 100, CAST(CAST(100 AS BIGINT)*(t.cr                       - y.yesterdayCr)*100/y.yesterdayCr AS BIGINT)/100.0 )                    as crInc,
              if(y.yesterdayRealEcpc = 0, 100, CAST(CAST(100 AS BIGINT)*(t.realEcpc           - y.yesterdayRealEcpc)*100/y.yesterdayRealEcpc AS BIGINT)/100.0 )        as realEcpcInc,
              if(y.yesterdayEcpc = 0, 100, CAST(CAST(100 AS BIGINT)*(t.ecpc                   - y.yesterdayEcpc)*100/y.yesterdayEcpc AS BIGINT)/100.0 )                as ecpcInc,
              4 as data_type,
              t.b_date,
              t.companyId,
              t.companyName,
              t.publisherAmpaId
          from offer_t t
          left join  offer_y y on t.b_date = y.joinDate and t.id  = y.yesterdayId and t.companyId  = y.yesterdaycompanyId;

        """
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bq_app {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryHandlerV2"
      items = [{
        view = "ssp_app_dm"
        message.consumer = "ssp_app_dm_bqcer"
        message.topics = [
          "app_totalcost_fee","app_totalcost_show","app_totalcost_click","app_fee"
          ,"app_click","app_show","app_send",
          "ssp_app_dwr"
        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bq_agg_traffic {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryHandlerV2"
      items = [{
        view = "agg_traffic_dm"
        message.consumer = "agg_traffic_dm_bqcer"
        message.topics = [
          "agg_traffic_user_new","agg_traffic_user_active","agg_traffic_fill","agg_traffic_send"
          ,"agg_traffic_show","agg_traffic_click","agg_traffic_fee",
          "agg_traffic_dwr"
        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bq_dsp {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryHandlerV2"
      items = [{
        view = "dsp_traffic_dm"
        message.consumer = "dsp_traffic_dm_bqcer"
        message.topics = [
          "dsp", "dsp_traffic_dwr"
        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bq_dupscribe {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryHandlerV2"
      items = [{
        view = "ssp_dupscribe_dm"
        message.consumer = "ssp_dupscribe_dm_bqcer"
        message.topics = [
          "ssp_dupscribe", "ssp_dupscribe_dwr"
        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bq_dupscribe_detail {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryHandlerV2"
      items = [{
        view = "ssp_dupscribe_detail_dm"
        message.consumer = "ssp_dupscribe_detail_dm_bqcer"
        message.topics = [
          "ssp_dupscribe", "ssp_dupscribe_dwi"
        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bq_log {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryHandlerV2"
      items = [{
        view = "ssp_log_dm"
        message.consumer = "ssp_log_dm_bqcer"
        message.topics = [
          "log", "ssp_log_dwr"
        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bq_offer {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryHandlerV2"
      items = [{
        view = "ssp_offer_dm"
        message.consumer = "ssp_offer_dm_bqcer"
        message.topics = [
          "offer_fee","offer_send","offer_show","offer_click",
          "ssp_offer_dwr"
        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }

  //待删
  bq_report_campaign {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryBTimeHandler"
      items = [{
        view = "ssp_report_campaign_dm"
        message.consumer = "ssp_report_campaign_dm_bqcer"
        message.topics = ["ssp_report_overall_dwr_day", "bq_report_campaign_update"]
//        message.topics = [
//          "report_campaign_fill","report_campaign_send","report_campaign_show"
//          ,"report_campaign_click","report_campaign_fee",
//          "ssp_report_campaign_dwr"
//        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bq_report_publisher {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size  = 50000
    commit.batch.size =   0
    commit.time.interval = 1800
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryBTimeHandler"
      items = [{
        view = "ssp_report_publisher_dm"
        message.consumer = "ssp_report_publisher_dm_bqcer"
        message.topics = ["ssp_report_overall_dwr_day","bq_report_publisher_update", "PublisherThirdIncomeForGreenplumReflush", "PublisherThirdIncomeDMReflush"]
//        message.topics = [
//          "report_publisher_fill","report_publisher_send","report_publisher_show"
//          ,"report_publisher_click","report_publisher_fee","report_publisher_user_new"
//          ,"report_publisher_user_active",
//          "ssp_report_publisher_dwr","PublisherThirdIncomeForGreenplumReflush", "PublisherThirdIncomeDMReflush"
//        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bq_top_offer {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryHandlerV2"
      items = [{
        view = "ssp_top_offer_dm"
        message.consumer = "ssp_top_offer_dm_bqcer"
        message.topics = [
          "offer_click"
        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bq_user_keep {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryHandlerV2"
      items = [{
        view = "ssp_user_keep_dm"
        message.consumer = "ssp_user_keep_dm_bqcer"
        message.topics = [
          "user_keep",
          "ssp_user_keep_dwr"
        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bq_user_na {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryHandlerV2"
      items = [{
        view = "ssp_user_na_dm"
        message.consumer = "ssp_user_na_dm_bqcer"
        message.topics = [
          "user_new","user_active",
          "ssp_user_new_dwr","ssp_user_active_dwr"
        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bq_adx {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryHandlerV2"
      items = [{
        view = "adx_traffic_dm"
        message.consumer = "adx_traffic_dm_bqcer"
        message.topics = [
          "adx_dsp", "adx_ssp"
          "adx_traffic_dwr"
        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bq_bd_offer {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryCustomViewHandler"
      items = [{
        view = "bd_offer_dm"
        message.consumer = "bd_offer_dm_bqcer"
        message.topics = ["ssp_report_overall_dwr"]
//        message.topics = [
//          "ssp_report_campaign_dwr"
//        ]
        set.b_date = """ "${b_date}" """
        sql="""
            create or replace temporary view bd_offer_dm_tmp as
            select
              dm.b_date,
              dm.countryid,
              dm.carrierid,
              dm.adcategory1Id,
              count(distinct(dm.offerid)) as offercount,
              sum(dm.realrevenue) as revenue,
              sum(dm.clickcount) as clickcount,
              CAST( CASE sum(dm.clickcount)  WHEN 0 THEN 0 ELSE 100000*1000*sum(dm.revenue)/cast(sum(dm.clickcount)  as DECIMAL(19,10) ) END AS BIGINT)/100000.0 as ecpc,
              max(dm.countryname) as countryname,
              max(dm.carriername) as carriername,
              max(dm.adcategory1name) as adcategory1name,
              dm.companyid,
              dm.companyname
            -- from ssp_report_campaign_dm dm
            from ssp_report_overall_dm_day dm
            where b_date = ${b_date} and (data_type = 'camapgin' or data_type is null)
            group by
              dm.b_date,dm.countryid,dm.carrierid,dm.adcategory1id,dm.companyid,dm.companyname
            ;

            create or replace temporary view bd_offer_dm as
            select
              dm.countryid,
              dm.carrierid,
              dm.adcategory1Id ,
              dm.countryname,
              dm.carriername,
              dm.adcategory1Name,
              dm.offercount,
              dm.revenue,
              dm.clickcount,
              dm.ecpc,
              if(dm.offercount < o.offercount, 1, 0)     as isoffercountfew,
              if( dm.ecpc > o.ecpchigh, 1, 0)            as isecpchigh,
              if(dm.ecpc < o.ecpclow, 1, 0)              as isecpclow,
              dm.b_date,
              dm.companyid,
              dm.companyname
            from bd_offer_dm_tmp dm
            left join offer_demand_config o
               on dm.countryid = o.countryid and dm.carrierid = o.carrierid and dm.adcategory1id = o.category
            where (dm.clickcount > o.clickcount) and (o.carrierid is not null and o.category is not null and o.countryid is not null )
            ;
        """
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bd_write_redis {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.WriteToRedisHandler"
      table = "ssp_report_overall_dm_day"
      // table = "ssp_report_campaign_dm"
      //從庫
      rdb {
//        url = "jdbc:mysql://104.250.132.218:8905/kok_ssp?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
        url = "jdbc:mysql://192.168.111.19:3306/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
        user = "root"
        password = "@dfei$@DCcsYG"
        table = "COUNTRY_SET"
      }
      //        rdb {
      //          url = "jdbc:mysql://node17:3306/kok_ssp?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
      //          user = "root"
      //          password = "root_root"
      //        }
//      message.consumer = "bd_write_redis_cer"
//      message.consumer = "bd_write_redis_cer"
      message.topics = ["ssp_report_overall_dwr"]
//      message.topics = [
//        "ssp_report_campaign_dwr"
//      ]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bd_update_mysql_offer {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.OfferHandlerV2"
//      dwr.table = "ssp_report_overall_dm_day"
//      dwr.table = "ssp_report_campaign_dm"
      //        TEST
//      rdb {
//        url = "jdbc:mysql://node17:3306/kok_ssp?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
//        user = "root"
//        password = "root_root"
//      }
      //        PRO 外网IP: 104.250.149.202
        rdb.url = "jdbc:mysql://192.168.111.19:3306/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
        rdb.user = "root"
        rdb.password = "@dfei$@DCcsYG"
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bq_report_overall {
    class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryBTimeHandler"
      items = [{
        view = "ssp_report_overall_dm"
        message.consumer = "ssp_report_overall_dm_bqcer"
        message.topics = [
          "ssp_report_overall_dwr","update_ssp_report_overall"
        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bq_report_overall2 {
    class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryBTimeHandler"
      items = [{
        view = "ssp_report_overall_dm"
        message.consumer = "ssp_report_overall_dm_bqcer"
        message.topics = [
          "update_ssp_report_overall2"
        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bq_report_overall_day_v2 {
    class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryBTimeHandler"
      items = [{
        view = "ssp_report_overall_dm_day_v2"
        message.consumer = "bq_report_overall_day_v2_bqcer"
        message.topics = [
          // 临时用这个
          "ssp_report_overall_dwr_day","ssp_report_overall_dm_day_v2_update"
        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bq_report_overall_day_v2_tmp {
    class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryBTimeHandler"
      items = [{
        view = "ssp_report_overall_dm_day_v2"
        message.consumer = "bq_report_overall_day_v2_bqcer_tmp"
        message.topics = [
          // 临时用这个
          "bq_report_overall_day_v2_tmp_update"
        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }

  redis_app_image_info {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.AppImageInfo2RedisHandler"
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  redis_offer_roi_ecpm {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.OffferRoiEcpm2RedisHandler"
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  offer_auto_soldout {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.OfferAutoSoldoutHandler"
//      dwr.table = "ssp_report_campaign_dm"
      rdb.url = "jdbc:mysql://192.168.111.19:3306/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
      rdb.user = "root"
      rdb.password = "@dfei$@DCcsYG"
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  bq_image {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryCustomViewHandler"
      items = [{
        view = "ssp_image_dm"
        message.consumer = "new_ssp_image_dm_bqcer"
        message.topics = ["ssp_report_overall_dwr"]
//        message.topics = [
//          "report_campaign_fill", "ssp_report_campaign_dwr","new_ssp_image_dm_update"
//        ]
        set.b_date = """ "${b_date}" """
        sql="""

          -- ssp_image_dm
          create or replace temporary  view ssp_image_dm AS
          select
              s.imageId   as imageid,
              s.countryId as countryid,
              ii.adCategory1,
              ii.adCategory2,
              ii.size,
              ii.status,
              ii.imageUrl,
              s.showcount,
              s.clickcount,
              l_time,
              b_date,
              co.name  as countryname,
              cp.id as companyid,
              cp.name as companyname
          -- from ssp_report_campaign_dwr s
          from ssp_report_overall_dwr_day s
          left join IMAGE_INFO ii on ii.ID = s.imageId
          left join country co    on co.id = s.countryId
          left join company cp    on cp.id = ii.companyId
          where b_date = ${b_date} and imageId > 0 and appId <> 814 and appId <> 42 and appId <> 72;

        """
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  mysql_update_image {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.ImageHandler"
      rdb.url = "jdbc:mysql://192.168.111.19:3306/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
      rdb.user = "root"
      rdb.password = "@dfei$@DCcsYG"
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }

  redis_programmed_bid {
    class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
    business.time.extract.by = "showTime"
    commit.batch.size =   1
    commit.time.interval = 1
    fast.polling.enable=true
    dwi.handler = [{
      handler = {
        class = "com.mobikok.ssp.data.streaming.handler.dwi.ProgrammedBidHandler",
        rdb {
          //PRO
          url = "jdbc:mysql://192.168.111.19:3306/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
          user = "root"
          password = "@dfei$@DCcsYG"
        }
      }
    }]
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_ad_show"
          partition = 0
        }
      ]
    }
  }

  bq_report_events {
    class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryBTimeHandler"
      items = [{
        view = "ssp_overall_events_dm"
        message.consumer = "ssp_overall_events_dm_bqcer"
        message.topics = [
          "ssp_overall_events_dwi","ssp_overall_events_dwi_update"
        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }

  bq_report_postback {
    class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.GoogleBigQueryBTimeHandler"
      items = [{
        view = "ssp_overall_postback_dm"
        message.consumer = "ssp_overall_postback_dm_bqcer"
        message.topics = [
          "ssp_overall_postback_dwi", "ssp_overall_postback_dwi_update"
        ]
      }]
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }

  clicks2Redis {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.Clicks2RedisHandler"
      rdb.url = "jdbc:mysql://192.168.111.19:3306/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
      rdb.user = "root"
      rdb.password = "@dfei$@DCcsYG"
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }

  smartLink_Offer_Soldout {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.SmartLinkOfferSoldoutHandler"
      rdb.url = "jdbc:mysql://192.168.111.19:3306/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
      rdb.user = "root"
      rdb.password = "@dfei$@DCcsYG"
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
}
//ref.modules = [
////   "bq_app.conf"
////  ,"bq_agg_traffic.conf"
////  ,"bq_dsp.conf"
////  ,"bq_dupscribe.conf"
////  ,"bq_dupscribe_detail.conf"
//
////  ,"bq_image.conf"
////  ,"bq_log.conf"
////  ,"bq_offer.conf"
////  ,"bq_report_campaign.conf"
////  ,"bq_report_publisher.conf"
//
////  ,"bq_top_offer.conf"
////  ,"bq_user_keep.conf"
////  ,"bq_user_na.conf"
////  ,"bq_adx.conf"
////  ,"bq_topn.conf"
////  ,"bq_bd_offer.conf"
//]





















//
//ref.modules = [
//  "bq_dupscribe.conf"
//  //,"dsp.conf"
//  "fee.conf"
//  ,"fill.conf"
//  ,"image.conf"
//
//  ,"log.conf"
//  ,"send2.conf"
//  //  ,"/root/kairenlo/data-streaming/dw_send_hbase/bq_dsp.conf"
//  ,"show_test.conf"
//  ,"user.conf"
//]
//
//
//
//
//
//
