rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "sight"
  password = "%oEL!L#Lkf&B!$F9JapY"
  kafka.offset.table = "offset"
}
hive {
  jdbc.url = "jdbc:hive2://node17:10000/default"
}
message.client.url="http://node14:5555/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="node30:6667,node104:6667,node32:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node30:6667,node104:6667,node32:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    //    auto.offset.reset = "earliest"
    auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "node14,node15,node16,node17,node30,node32,node124,node125,node126"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  streaming.batch.buration = 100
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
    //    spark.streaming.kafka.maxRatePerPartition = 2000
    spark.streaming.kafka.maxRatePerPartition = 1250
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 20
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 20
    spark.kryoserializer.buffer.max=256
    spark.scheduler.mode=FAIR
    //    spark.streaming.concurrentJobs = 6
  }
}
clickhouse {
  hosts = ["node111", "node110", "node16" , "node15"]
}
modules {

  dwr_log {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    b_time.by = "createTime"
    dwi.store = true
    dwi.table = "ssp_log_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspLogDWISchema"
    dwr.store = true
    dwr.groupby.fields = [{
      expr = "appId", as = "appId"
    },{
      expr = "event", as = "event"
    }]
    dwr.groupby.aggs = [{
      expr = "count(1)",                       as = "times",        union = "sum(times)"
    }, {
      expr = "count(if( type = 1,  1, null))", as = "successTimes", union = "sum(successTimes)"
    }]
    dwr.table = "ssp_log_dwr"
    kafka.consumer {
      partitions = [
        {topic = "topic_ad_log"}
      ]
    }
  }

  dwr_user_new {//原user_new
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    b_time.by = "createTime"
    dwi.store = true
    dwi.table = "ssp_user_new_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspUserDWISchema"
    dwr.store = true
    dwr.groupby.fields = [
      {
        expr = "appId",     as = "appId"
      }, {
        expr = "countryId", as = "countryId"
      }, {
        expr = "carrierId", as = "carrierId"
      }, {
        expr = "sv",        as = "sv"
      }, {
        expr = "affSub",    as = "affSub"
      }, {
        expr = "operatingSystem(userAgent)",      as = "operatingSystem"
      }, {
        expr = "'zh-cn'",                         as = "systemLanguage"
      }, {
        expr = "'ZTE'",                           as = "deviceBrand"
      }, {
        expr = "deviceType(userAgent)",           as = "deviceType"
      }, {
        expr = "browserKernel(userAgent)",        as = "browserKernel"
      }
    ]
    dwr.groupby.aggs = [{
      expr = "count(1)", as ="newCount", union = "sum(newCount)"
    }]
    dwr.table = "ssp_user_new_dwr"
//    dm.kafka.enable = true
//    dm.kafka.topic = "topic_ssp_user_new_dwr"
    kafka.consumer {
      partitions = [
        {
          topic = "topic_ad_user_new_v2"//"topic_ad_user"
        }
      ]
    }
  }

  dwr_user_active {//原user_active
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    b_time.by = "createTime"

    dwi.store = true
    dwi.table = "ssp_user_active_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspUserDWISchema"
    dwr.store = true
    dwr.groupby.fields = [
      {
      expr = "appId",     as = "appId"
      }, {
        expr = "countryId", as = "countryId"
      }, {
        expr = "carrierId", as = "carrierId"
      },{
        expr = "sv",        as = "sv"
      },{
        expr = "affSub",    as = "affSub"
      }, {
        expr = "operatingSystem(userAgent)",      as = "operatingSystem"
      }, {
        expr = "'zh-cn'",                         as = "systemLanguage"
      }, {
        expr = "'ZTE'",                           as = "deviceBrand"
      }, {
        expr = "deviceType(userAgent)",           as = "deviceType"
      }, {
        expr = "browserKernel(userAgent)",        as = "browserKernel"
      }
    ]
    dwr.groupby.aggs = [
      {
        expr = "count(1)", as ="activeCount", union = "sum(activeCount)"
      }
    ]
    dwr.include.repeated = true
    dwr.table = "ssp_user_active_dwr"
//    dm.kafka.enable = true
//    dm.kafka.topic = "topic_ssp_user_active_dwr"
    kafka.consumer {
      partitions = [
        {
          topic = "topic_ad_user_active_v2"//"topic_ad_user_active"
        }
      ]
    }
  }

  //留存用户数
  dwr_user_keep {//原user_keep
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    b_time.by = "createTime"
    dwi.store = true
    dwi.table = "ssp_user_keep_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspUserDWISchema"
    dwr.store = true
    dwr.groupby.fields = [
      {
      expr = "appId", as = "appId"
      }, {
      expr = "countryId" , as = "countryId"
      }, {
        expr = "carrierId", as = "carrierId"
      }, {
        expr = "sv", as = "sv"
      }, {
        expr = "affSub",    as = "affSub"
      }, {
        expr = "split(activeTime, ' ')[0]",  as = "activeDate"
      }, {
        expr = "operatingSystem(userAgent)",      as = "operatingSystem"
      }, {
        expr = "'zh-cn'",                         as = "systemLanguage"
      }, {
        expr = "'ZTE'",                           as = "deviceBrand"
      }, {
        expr = "deviceType(userAgent)",           as = "deviceType"
      }, {
        expr = "browserKernel(userAgent)",        as = "browserKernel"
      }
    ]
    dwr.groupby.aggs = [
      {
        expr = "count(1)"
        as ="userCount"
        union = "sum(userCount)"
      },{
        expr = "count( if(  (unix_timestamp(  concat(split(createTime, ' ')[0], ' 00:00:00')) - unix_timestamp(   concat(split(activeTime, ' ')[0], ' 00:00:00')) ) /(60*60*24)  = 1, 1, null) )"
        as ="firstCount"
        union = "sum(firstCount)"
      },{
        expr = "count( if(  (unix_timestamp(  concat(split(createTime, ' ')[0], ' 00:00:00')) - unix_timestamp(   concat(split(activeTime, ' ')[0], ' 00:00:00')) ) /(60*60*24)  = 2, 1, null) )"
        as ="secondCount"
        union = "sum(secondCount)"
      },{
        expr = "count( if( (unix_timestamp(  concat(split(createTime, ' ')[0], ' 00:00:00')) - unix_timestamp(   concat(split(activeTime, ' ')[0], ' 00:00:00')) ) /(60*60*24) = 3, 1, null) )"
        as ="thirdCount"
        union = "sum(thirdCount)"
      },{
        expr = "count( if( (unix_timestamp(  concat(split(createTime, ' ')[0], ' 00:00:00')) - unix_timestamp(   concat(split(activeTime, ' ')[0], ' 00:00:00')) ) /(60*60*24) = 4, 1, null) )"
        as ="fourthCount"
        union = "sum(fourthCount)"
      },{
        expr = "count( if( (unix_timestamp(  concat(split(createTime, ' ')[0], ' 00:00:00')) - unix_timestamp(   concat(split(activeTime, ' ')[0], ' 00:00:00')) ) /(60*60*24) = 5, 1, null) )"
        as ="fifthCount"
        union = "sum(fifthCount)"
      },{
        expr = "count( if( (unix_timestamp(  concat(split(createTime, ' ')[0], ' 00:00:00')) - unix_timestamp(   concat(split(activeTime, ' ')[0], ' 00:00:00')) ) /(60*60*24) = 6, 1, null) )"
        as ="sixthCount"
        union = "sum(sixthCount)"
      },{
        expr = "count( if( (unix_timestamp(  concat(split(createTime, ' ')[0], ' 00:00:00')) - unix_timestamp(   concat(split(activeTime, ' ')[0], ' 00:00:00')) ) /(60*60*24) = 7, 1, null) )"
        as ="seventhCount"
        union = "sum(seventhCount)"
      },{
        expr = "count( if( (unix_timestamp(  concat(split(createTime, ' ')[0], ' 00:00:00')) - unix_timestamp(   concat(split(activeTime, ' ')[0], ' 00:00:00')) ) /(60*60*24) = 15, 1, null) )"
        as ="fiftyCount"
        union = "sum(fiftyCount)"
      },{
        expr = "count( if( (unix_timestamp(  concat(split(createTime, ' ')[0], ' 00:00:00')) - unix_timestamp(   concat(split(activeTime, ' ')[0], ' 00:00:00')) ) /(60*60*24) = 30, 1, null) )"
        as ="thirtyCount"
        union = "sum(thirtyCount)"
      }
    ]
    dwr.table = "ssp_user_keep_dwr"
//    dm.kafka.enable = true
//    dm.kafka.topic = "topic_ssp_user_keep_dwr"
    kafka.consumer {
      partitions = [
        {
          topic = "topic_ad_user_active_v2"//"topic_ad_user_active"
        }
      ]
    }
  }

}