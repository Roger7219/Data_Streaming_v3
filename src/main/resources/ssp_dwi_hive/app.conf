rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "sight"
  password = "%oEL!L#Lkf&B!$F9JapY"
  kafka.offset.table = "offset"
}
hive {
  jdbc.url = "jdbc:hive2://node17:10000/default"
}
message.client.url="http://node14:5555/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="node30:6667,node104:6667,node32:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node30:6667,node104:6667,node32:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    //    auto.offset.reset = "earliest"
    auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "node14,node15,node16,node17,node30,node32,node124,node125,node126"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  streaming.batch.buration = 100
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
    //    spark.streaming.kafka.maxRatePerPartition = 2000
    spark.streaming.kafka.maxRatePerPartition = 1250
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 20
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 20
    spark.kryoserializer.buffer.max=256
    spark.scheduler.mode=FAIR
    //    spark.streaming.concurrentJobs = 6
  }
}
clickhouse {
  hosts = ["node111", "node110", "node16" , "node15"]
}
modules {

  dwi_fill {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    b_time.by = "createTime"
    master = true
    dwi.store = true
    dwi.ttl = 7
    dwi.table = "ssp_fill_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
    kafka.consumer {
      partitions = [
        { topic = "topic_ad_fill_new"},
      ]
    }
  }

  dwi_send {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    b_time.by = "createTime"
    dwi.stroe = true
    dwi.ttl = 7
    dwi.table = "ssp_send_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
    kafka.consumer {
      partitions = [
        { topic = "topic_ad_send_new"}
      ]
    }
  }

  dwi_click {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    b_time.by = "clickTime"
    dwi.store = true
    dwi.ttl = 7
    dwi.table = "ssp_click_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
    kafka.consumer {
      partitions = [
        { topic = "topic_ad_click"}
      ]
    }
  }

  dwi_fee {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    b_time.by = "reportTime"
    dwi.uuid.enable = true
    dwi.uuid.fields = ["clickId"]
    dwi.uuid.b_time.range =[-24, 24]
    dwi.store = true
    dwi.table = "ssp_fee_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
    kafka.consumer {
      partitions = [
        {topic = "topic_ad_fee"}
      ]
    }
  }

  dwi_postback {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    b_time.by = "reportTime"
    dwi.store = true
    dwi.table = "ssp_overall_postback_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
    kafka.consumer {
      partitions = [
        {topic = "topic_ad_postback"}
      ]
    }
  }


}