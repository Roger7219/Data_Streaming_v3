rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://node17:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="node30:6667,node31:6667,node32:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node30:6667,node31:6667,node32:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    auto.offset.reset = "earliest"
//    auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "node106,node107,node108"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
//  streaming.batch.buration = 1200
  streaming.batch.buration = 100
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
    spark.streaming.kafka.maxRatePerPartition =  5000
    #spark.streaming.kafka.maxRatePerPartition = 50000
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 3
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 3
    spark.kryoserializer.buffer.max=256
//    spark.streaming.concurrentJobs = 5
  }
}
modules {

//  overall_user_new2 {
//    class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
//    business.time.extract.by = "createTime"
//    commit.batch.size = 1
//    commit.time.interval = 1800
//    dwi.uuid.enable = false
//    dwi.uuid.fields = ["clickId"]
//    dwi.enable = false
//    dwi.table = "ssp_user_new_dwi2"
//    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspUserNewDWISchema"
//    dwr.enable = true
//    dwr.groupby.fields = [
//      {
//        expr = "null",        as = "publisherId"
//      },{
//        expr = "appId",       as = "appId"
//      },{
//        expr = "countryId",   as = "countryId"
//      },{
//        expr = "carrierId",   as = "carrierId"
//      },{
//        expr = "sv",          as = "versionName"
//      },{
//        expr = "null",        as = "adType"
//      },{
//        expr = "null",        as = "campaignId"
//      },{
//        expr = "null",        as = "offerId"
//      },{
//        expr = "null",        as = "imageId"
//      },{
//        expr = "affSub",      as = "affSub"
//      }, {
//        expr = "packageName", as = "packageName"
//      }, {
//        expr = "null",        as = "domain"
//      }, {
//        expr = "operatingSystem(userAgent)",        as = "operatingSystem"
//      }, {
//        expr = "language(userAgent)",               as = "systemLanguage"
//      }, {
//        expr = "machineModel(userAgent)",           as = "deviceBrand"
//      }, {
//        expr = "deviceType(userAgent)",             as = "deviceType"
//      }, {
//        expr = "browserKernel(userAgent)",          as = "browserKernel"
//      }, {
//        expr = "null",                              as = "respStatus"
//      }, {
//        expr = "null",                              as = "test"
//      }, {
//        expr = "null",                              as = "ruleId"
//      }, {
//        expr = "null",                              as = "smartId"
//      }
//    ]
//    dwr.groupby.aggs = [
//      {
//        expr = "0",                 as ="requestCount",   union = "sum(requestCount)"
//      },{
//        expr = "0",                 as ="sendCount",      union = "sum(sendCount)"
//      },{
//        expr = "0",                 as ="showCount",      union = "sum(showCount)"
//      },{
//        expr = "0",                 as ="clickCount",     union = "sum(clickCount)"
//      },{
//        expr = "0",                 as ="feeReportCount", union = "sum(feeReportCount)"  //计费条数
//      },{
//        expr = "0",                 as ="feeSendCount",   union = "sum(feeSendCount)"    //计费显示条数
//      },{
//        expr = "0",                 as ="feeReportPrice", union = "sum(feeReportPrice)"  //计费金额(真实收益)
//      },{
//        expr = "0",                 as ="feeSendPrice",   union = "sum(feeSendPrice)"    //计费显示金额(收益)
//      },{
//        expr = "0",                 as ="cpcBidPrice",    union = "sum(cpcBidPrice)"
//      },{
//        expr = "0",                 as ="cpmBidPrice",    union = "sum(cpmBidPrice)"
//      },{
//        expr = "0",                 as ="conversion",     union = "sum(conversion)"      //转化数，目前不要含展示和点击产生的
//      },{
//        expr = "0",                 as ="allConversion",  union = "sum(allConversion)"   //转化数，含展示和点击产生的
//      },{
//        expr = "0",                 as ="revenue",        union = "sum(revenue)"         //收益
//      },{
//        expr = "0",                 as ="realRevenue",    union = "sum(realRevenue)"     //真实收益
//      },{
//        expr = "0",                 as ="feeCpcTimes",    union = "sum(feeCpcTimes)"     // fee cpc转化条数
//      },{
//        expr = "0",                 as ="feeCpmTimes",    union = "sum(feeCpmTimes)"     // fee cpm转化条数
//      },{
//        expr = "0",                 as ="feeCpaTimes",    union = "sum(feeCpaTimes)"     // fee cpa转化条数
//      },{
//        expr = "0",                 as ="feeCpaSendTimes",    union = "sum(feeCpaSendTimes)"     // fee cpa send转化条数
//      },{
//        expr = "0",                 as ="feeCpcReportPrice",  union = "sum(feeCpcReportPrice)"     // fee cpc上游收益
//      },{
//        expr = "0",                 as ="feeCpmReportPrice",  union = "sum(feeCpmReportPrice)"     // fee cpm上游收益
//      },{
//        expr = "0",                 as ="feeCpaReportPrice",  union = "sum(feeCpaReportPrice)"     // fee cpa上游收益
//      },{
//        expr = "0",                 as ="feeCpcSendPrice",    union = "sum(feeCpcSendPrice)"     // fee cpc下游收益
//      },{
//        expr = "0",                 as ="feeCpmSendPrice",    union = "sum(feeCpmSendPrice)"     // fee cpm下游收益
//      },{
//        expr = "0",                 as ="feeCpaSendPrice",    union = "sum(feeCpaSendPrice)"     // fee cpa下游收益
//      },{
//        expr = "0",                 as ="winPrice",           union = "sum(winPrice)"     // 中签价格
//      },{
//        expr = "0",                 as ="winNotices",         union = "sum(winNotices)"     // 中签数
//      },{
//        expr = "count(1)",          as ="newCount",           union = "sum(newCount)"
//      },{
//        expr = "0",                 as ="activeCount",        union = "sum(activeCount)"
//      }
//    ]
//    dwr.include.repeated = true
//    dwr.table = "ssp_report_overall_dwr2"
//    kafka.consumer {
//      partitoins = [
//        {
//          topic = "topic_ad_user"
//          partition = 0
//        }
//      ]
//    }
//  }
//
//  overall_user_active2 {
//    master=true
//    class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
//    business.time.extract.by = "createTime"
//    commit.batch.size = 1
//    commit.time.interval = 1800
//    dwi.uuid.enable = false
//    dwi.uuid.fields = ["clickId"]
//    dwi.enable = false
//    dwi.table = "ssp_user_active_dwi2"
//    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspUserNewDWISchema"
//    dwr.enable = true
//    dwr.groupby.fields = [
//      {
//        expr = "null",          as = "publisherId"
//      },{
//        expr = "appId",       as = "appId"
//      },{
//        expr = "countryId",   as = "countryId"
//      },{
//        expr = "carrierId",   as = "carrierId"
//      },{
//        expr = "sv",          as = "versionName"
//      },{
//        expr = "null",          as = "adType"
//      },{
//        expr = "null",          as = "campaignId"
//      },{
//        expr = "null",          as = "offerId"
//      },{
//        expr = "null",          as = "imageId"
//      },{
//        expr = "affSub",      as = "affSub"
//      }, {
//        expr = "packageName", as = "packageName"
//      }, {
//        expr = "null",        as = "domain"
//      }, {
//        expr = "operatingSystem(userAgent)",        as = "operatingSystem"
//      }, {
//        expr = "language(userAgent)",               as = "systemLanguage"
//      }, {
//        expr = "machineModel(userAgent)",           as = "deviceBrand"
//      }, {
//        expr = "deviceType(userAgent)",             as = "deviceType"
//      }, {
//        expr = "browserKernel(userAgent)",          as = "browserKernel"
//      }, {
//        expr = "null",                              as = "respStatus"
//      }, {
//        expr = "null",                              as = "test"
//      }, {
//        expr = "null",                              as = "ruleId"
//      }, {
//        expr = "null",                              as = "smartId"
//      }
//    ]
//    dwr.groupby.aggs = [
//      {
//        expr = "0",                 as ="requestCount",   union = "sum(requestCount)"
//      },{
//        expr = "0",                 as ="sendCount",      union = "sum(sendCount)"
//      },{
//        expr = "0",                 as ="showCount",      union = "sum(showCount)"
//      },{
//        expr = "0",                 as ="clickCount",     union = "sum(clickCount)"
//      },{
//        expr = "0",                 as ="feeReportCount", union = "sum(feeReportCount)"  //计费条数
//      },{
//        expr = "0",                 as ="feeSendCount",   union = "sum(feeSendCount)"    //计费显示条数
//      },{
//        expr = "0",                 as ="feeReportPrice", union = "sum(feeReportPrice)"  //计费金额(真实收益)
//      },{
//        expr = "0",                 as ="feeSendPrice",   union = "sum(feeSendPrice)"    //计费显示金额(收益)
//      },{
//        expr = "0",                 as ="cpcBidPrice",    union = "sum(cpcBidPrice)"
//      },{
//        expr = "0",                 as ="cpmBidPrice",    union = "sum(cpmBidPrice)"
//      },{
//        expr = "0",                 as ="conversion",     union = "sum(conversion)"      //转化数，目前不要含展示和点击产生的
//      },{
//        expr = "0",                 as ="allConversion",  union = "sum(allConversion)"   //转化数，含展示和点击产生的
//      },{
//        expr = "0",                 as ="revenue",        union = "sum(revenue)"         //收益
//      },{
//        expr = "0",                 as ="realRevenue",    union = "sum(realRevenue)"     //真实收益
//      },{
//        expr = "0",                 as ="feeCpcTimes",    union = "sum(feeCpcTimes)"     // fee cpc转化条数
//      },{
//        expr = "0",                 as ="feeCpmTimes",    union = "sum(feeCpmTimes)"     // fee cpm转化条数
//      },{
//        expr = "0",                 as ="feeCpaTimes",    union = "sum(feeCpaTimes)"     // fee cpa转化条数
//      },{
//        expr = "0",                 as ="feeCpaSendTimes",    union = "sum(feeCpaSendTimes)"     // fee cpa send转化条数
//      },{
//        expr = "0",                 as ="feeCpcReportPrice",  union = "sum(feeCpcReportPrice)"     // fee cpc上游收益
//      },{
//        expr = "0",                 as ="feeCpmReportPrice",  union = "sum(feeCpmReportPrice)"     // fee cpm上游收益
//      },{
//        expr = "0",                 as ="feeCpaReportPrice",  union = "sum(feeCpaReportPrice)"     // fee cpa上游收益
//      },{
//        expr = "0",                 as ="feeCpcSendPrice",    union = "sum(feeCpcSendPrice)"     // fee cpc下游收益
//      },{
//        expr = "0",                 as ="feeCpmSendPrice",    union = "sum(feeCpmSendPrice)"     // fee cpm下游收益
//      },{
//        expr = "0",                 as ="feeCpaSendPrice",    union = "sum(feeCpaSendPrice)"     // fee cpa下游收益
//      },{
//        expr = "0",                 as ="winPrice",           union = "sum(winPrice)"     // 中签价格
//      },{
//        expr = "0",                 as ="winNotices",         union = "sum(winNotices)"     // 中签数
//      },{
//        expr = "0",                 as ="newCount",           union = "sum(newCount)"
//      },{
//        expr = "count(1)",          as ="activeCount",        union = "sum(activeCount)"
//      }
//    ]
//    dwr.include.repeated = true
//    dwr.table = "ssp_report_overall_dwr2"
//    kafka.consumer {
//      partitoins = [
//        {
//          topic = "topic_ad_user_active"
//          partition = 0
//        }
//      ]
//    }
//  }

//
//  integration_mode_caps {
//    class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
//    business.date.extract.by = "createTime"
//    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
//
//    dm.handler.enable = true
//    dm.handler.setting = [{
//      class = "com.mobikok.ssp.data.streaming.handler.dm.IntegrationModeCapsHandler"
//      rdb {
//        //        url = "jdbc:mysql://node17:3306/kok_ssp?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
//        url = "jdbc:mysql://192.168.111.22:4000/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
//        user = "root"
//        password = "@dfei$@DCcsYG"
//      }
//    }]
//
//    kafka.consumer {
//      partitoins = [
//        {
//          topic = "topic_empty"
//          partition = 0
//        }
//      ]
//    }
//  }
//

//  agg_traffic_month_dwr {
//    class = "com.mobikok.ssp.data.streaming.module.MixModule"
//    business.date.extract.by = "createTime"
//    commit.batch.size =   0
//    commit.time.interval = 0
//    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
//
//    dm.handler.enable = true
//    dm.handler.setting = [{
//      class = "com.mobikok.ssp.data.streaming.handler.dm.AccelerateTableHandler"
//      items = [{
//        view = "agg_traffic_month_dwr"
//        sql="""
//            select
//                jarId,
//                countryId,
//                sum(showCount) as showCount,
//                sum(cost)      as cost,
//                date_format(b_date, 'yyyy-MM-01') as b_date
//            from agg_traffic_dwr
//            where ${l_time}
//            group by
//                date_format(b_date, 'yyyy-MM-01'),
//                jarId,
//                countryId
//        """
//      }]
//    }]
//    kafka.consumer {
//      partitoins = [
//        {
//          topic = "topic_empty"
//          partition = 0
//        }
//      ]
//    }
//  }

//    backup__fill {
//      class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
//      business.time.extract.by = "createTime"
//      business.date.extract.by = "createTime"
//      commit.batch.size = 1
//      commit.time.interval = 1
//      dwi.enable = true
//      dwi.table = "backup__ssp_fill_dwi"
//      dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
//      dwi.uuid.enable = false
//      dwi.uuid.fields = ["clickId","clickId"]
//      dwr.enable = true
//      dwr.groupby.fields = [ {
//        expr = "publisherId", as = "publisherId"
//      }, {
//        expr = "subId", as = "subId"
//      }, {
//        expr = "countryId", as = "countryId"
//      }, {
//        expr = "carrierId", as = "carrierId"
//      },{
//        expr = "sv", as = "sv"
//      }, {
//        expr = "adType", as = "adType"
//      }, {
//        expr = "campaignId",  as = "campaignId"
//      }, {
//        expr = "offerId",     as = "offerId"
//      }, {
//        expr = "imageId",     as = "imageId"
//      }, {
//        expr = "affSub",      as = "affSub"
//      }, {
//        expr = "packageName",                as = "packageName"
//      }, {
//        expr = "domain",                     as = "domain"
//      }, {
//        expr = "operatingSystem(userAgent)", as = "operatingSystem"
//      }, {
//        expr = "'en-us'",                    as = "systemLanguage"
//      }, {
//        expr = "'Huawei'",                   as = "deviceBrand"
//      }, {
//        expr = "deviceType(userAgent)",      as = "deviceType"
//      }, {
//        expr = "browserKernel(userAgent)",   as = "browserKernel"
//      }
////        , {
////        expr = "from_unixtime(unix_timestamp(createTime), 'yyyy-MM-dd HH:00:00')", as = "b_time"
////      }
//      ]
//      dwr.groupby.aggs = [{
//        expr = "count(1)"
//        as ="times"
//        union = "sum(times)"
//      }]
//      dwr.table = "backup__ssp_fill_dwr"
//      kafka.consumer {
//        partitoins = [
//          { topic = "topic_ad_fill", partition = 0 },
//          { topic = "topic_ad_fill", partition = 1 },
//          { topic = "topic_ad_fill", partition = 2 },
//          { topic = "topic_ad_fill", partition = 3 },
//          { topic = "topic_ad_fill", partition = 4 }
//        ]
//      }
//    }
//
//    backup__send {
//      class = "com.mobikok.ssp.data.streaming.module.MixModule"
//      business.date.extract.by = "createTime"
//      commit.batch.size =   1
//      commit.time.interval = 1
//      dwi.enable = true
//      dwi.table = "backup__ssp_send_dwi"
//      dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
//      dwr.enable = true
//      dwr.groupby.fields = [{
//        expr = "publisherId", as = "publisherId"
//      }, {
//        expr = "subId",       as = "subId"
//      }, {
//        expr = "countryId",   as = "countryId"
//      }, {
//        expr ="carrierId",    as = "carrierId"
//      }, {
//        expr = "sv",          as = "sv"
//      }, {
//        expr = "adType",      as = "adType"
//      }, {
//        expr = "campaignId",  as ="campaignId"
//      }, {
//        expr = "offerId",     as = "offerId"
//      }, {
//        expr = "imageId",     as = "imageId"
//      }, {
//        expr = "affSub",      as = "affSub"
//      }]
//      dwr.groupby.aggs = [{
//        expr = "count(1)"
//        as ="times"
//        union = "sum(times)"
//      }]
//      dwr.include.repeated = true
//      dwr.table = "backup__ssp_send_dwr"
//      kafka.consumer {
//        partitoins = [
//          { topic = "topic_ad_send", partition = 0 },
//          { topic = "topic_ad_send", partition = 1 },
//          { topic = "topic_ad_send", partition = 2 },
//          { topic = "topic_ad_send", partition = 3 },
//          { topic = "topic_ad_send", partition = 4 }
//        ]
//      }
//    }
//
    backup__show {
      class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
      business.date.extract.by = "showTime"
      commit.time.interval = 1800
      commit.batch.size = 1
      dwi.uuid.enable = true
      dwi.uuid.fields = ["clickId"]
      dwi.enable = true
      dwi.table = "backup__ssp_show_dwi"
      dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
      kafka.consumer {
        partitoins = [
          { topic = "topic_ad_show", partition = 0 }
        ]
      }
    }
//
//    backup__click {
//      class = "com.mobikok.ssp.data.streaming.module.MixModule"
//      business.date.extract.by = "clickTime"
//      commit.time.interval = 1800
//      commit.batch.size = 1
//      dwi.enable = true
//      dwi.table = "backup__ssp_click_dwi"
//      dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
//      kafka.consumer {
//        partitoins = [
//          { topic = "topic_ad_click", partition = 0 },
//          { topic = "topic_ad_click", partition = 1 },
//          { topic = "topic_ad_click", partition = 2 },
//          { topic = "topic_ad_click", partition = 3 },
//          { topic = "topic_ad_click", partition = 4 }
//        ]
//      }
//    }
//
  backup__fee {
    class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
    business.date.extract.by = "reportTime"
    commit.batch.size = 1
    commit.time.interval = 1800
    dwi.uuid.enable = true
    dwi.uuid.fields = ["clickId", "isSend"]
    dwi.enable = true
    dwi.table = "backup__ssp_fee_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
    dwr.enable = true
    dwr.groupby.fields = [{
      expr = "publisherId", as = "publisherId"
    }]
    dwr.groupby.aggs = [{
      expr = "count(1)"
      as ="times"
      union = "sum(times)"
    }, {
      expr = "0"
      as ="times2"
      union = "sum(times2)"
    }]
    dwr.table = "backup__ssp_fee_dwr"
    kafka.consumer {
      partitoins = [
        { topic = "topic_ad_fee", partition = 0 }
      ]
    }
  }

  backup__fee2 {
    class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
    business.date.extract.by = "reportTime"
    commit.batch.size = 1
    commit.time.interval = 1800
    master=true
    dwi.uuid.enable = true
    dwi.uuid.fields = ["clickId", "isSend"]
    dwi.enable = true
    dwi.table = "backup__ssp_fee_dwi2"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
    dwr.enable = true
    dwr.groupby.fields = [{
      expr = "publisherId", as = "publisherId"
    }]
    dwr.groupby.aggs = [{
      expr = "0"
      as ="times"
      union = "sum(times)"
    }, {
      expr = "count(1)"
      as ="times2"
      union = "sum(times2)"
    }]
    dwr.table = "backup__ssp_fee_dwr"
    kafka.consumer {
      partitoins = [
        { topic = "topic_ad_fee", partition = 0 }
      ]
    }
  }


//  create table backup__ssp_fee_dwr(
//    publisherId int,
//    times       int,
//    times2      int
//  )PARTITIONED BY (l_time STRING, b_date STRING, b_time STRING)
//  STORED AS ORC;

//
//  backup__user_new {
//    class = "com.mobikok.ssp.data.streaming.module.MixModule"
//    business.date.extract.by = "createTime"
//    commit.time.interval = 1800
//    commit.batch.size = 1
//    dwi.enable = true
//    dwi.table = "backup__ssp_user_new_dwi"
//    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspUserDWISchema"
//    kafka.consumer {
//      partitoins = [
//        { topic = "topic_ad_user", partition = 0 }
//      ]
//    }
//  }
//
//  backup__user_active {
//    class = "com.mobikok.ssp.data.streaming.module.MixModule"
//    business.date.extract.by = "createTime"
//    commit.time.interval = 1800
//    commit.batch.size = 1
//    dwi.fields.extended = []
//    dwi.enable = true
//    dwi.table = "backup__ssp_user_active_dwi"
//    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspUserDWISchema"
//    kafka.consumer {
//      partitoins = [
//        { topic = "topic_ad_user_active", partition = 0 }
//      ]
//    }
//  }
//
//
//  backup__adx_ssp {
//    class = "com.mobikok.ssp.data.streaming.module.MixModule"
//    business.date.extract.by = "from_unixtime(timestamp/1000, 'yyyy-MM-dd HH:mm:ss')"
//    business.time.format.by = "yyyy-MM-dd"
//    commit.time.interval = 0
//    commit.batch.size = 0
//    dwi.enable=true
//    dwi.table= "backup__adx_ssp_dwi"
//    dwi.kafka.proto.enable = true
//    dwi.kafka.proto.class = "proto.BidInfo$Event"
//    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.AdxTrafficDWISchema"
//    dwi.uuid.enable = false
//    dwi.uuid.fields = ["event_key"]
//    kafka.consumer {
//      partitoins = [
//        {
//          topic = "adx-info-3"
//          partition = 0
//        }
//      ]
//      set {
//        key.deserializer = "org.apache.kafka.common.serialization.ByteArrayDeserializer"
//        value.deserializer = "org.apache.kafka.common.serialization.ByteArrayDeserializer"
//      }
//    }
//  }

}