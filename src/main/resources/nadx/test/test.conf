rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://master:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="node187:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node187:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
//    auto.offset.reset = "earliest"
        auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "master,node187"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  streaming.batch.buration = 100
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.default.fileformat=Orc
    hive.exec.dynamic.partition.mode = nonstrict
    //    spark.streaming.kafka.maxRatePerPartition = 2000
    spark.streaming.kafka.maxRatePerPartition = 10
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 8
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 8
    spark.kryoserializer.buffer.max=256
    spark.scheduler.mode=FAIR
    spark.history.fs.cleaner.enabled = true
    spark.history.fs.cleaner.interval = 1d
    spark.history.fs.cleaner.maxAge = 3d
    //    spark.streaming.concurrentJobs = 6
  }
}
modules {
  test_a {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    // timestamp 精确到了秒,非毫秒，所以不用除于1000
    b_time.input = "from_unixtime(timestamp, 'yyyy-MM-dd HH:mm:ss')"
    master = true
    dwi.enable = true
    dwi.table = "test_a_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.TestDWISchema"
    dwr.enable = true
    dwr.groupby.fields = [
//      { expr = "id",       as = "id", others = true, max = 100, countField = "a", def = "0"}
//      { expr = "name",     as = "name", others = true, max = 100, countField = "a", def="'O'" }
        { expr = "id",       as = "id",   map = "if({name,id}.a >= 5, dwr.id, null)"}
        { expr = "name",     as = "name", map = "if({name,id}.a >= 5, dwr.name, null)"}
    ]
    dwr.groupby.aggs = [
      { expr = "sum(a)",  as ="a",  union = "sum(a)"},
      { expr = "sum(b)",  as ="b",  union = "sum(b)" }
    ]
    dwr.include.repeated = true 
    dwr.table = "test_dwr"
    kafka.consumer {
      partitoins = [
        {topic = "test0"}
      ]
    }
  }

  test_b {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    // timestamp 精确到了秒,非毫秒，所以不用除于1000
    b_time.input = "from_unixtime(timestamp, 'yyyy-MM-dd HH:mm:ss')"
    dwi.enable = true
    dwi.table = "test_b_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.TestDWISchema"
    dwr.enable = true
    dwr.groupby.fields = [
      //      { expr = "name",     as = "name"  }
      { expr = "id",       as = "id"}
      { expr = "name",     as = "name"}
    ]
    dwr.groupby.aggs = [
      { expr = "0",       as ="a",  union = "sum(a)"}
      { expr = "0",       as ="b",  union = "sum(b)"}
    ]
    dwr.include.repeated = true
    dwr.table = "test_dwr"
    kafka.consumer {
      partitoins = [
        { topic = "test0" }
      ]
    }
  }

}
