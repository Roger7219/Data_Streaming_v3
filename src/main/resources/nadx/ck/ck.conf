rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "sight"
  password = "%oEL!L#Lkf&B!$F9JapY"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://master:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="node187:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node187:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    auto.offset.reset = "earliest"
    //    auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "master,node187"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  app.name = "nadx_ck"
  streaming.batch.buration = 100
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
    //    spark.streaming.kafka.maxRatePerPartition = 2000
    spark.streaming.kafka.maxRatePerPartition = 1250
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 5
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 5
    spark.kryoserializer.buffer.max=256
    spark.scheduler.mode=FAIR
    spark.history.fs.cleaner.enabled = true
    spark.history.fs.cleaner.interval = 1d
    spark.history.fs.cleaner.maxAge = 3d
    //    spark.streaming.concurrentJobs = 6
  }
}
clickhouse.hosts= ["ck006","ck004","ck005"]
modules {
//  ck_nadx_overall_dm {
//    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
//    business.date.extract.by = "createTime"
//    //      commit.batch.size = 50000
//    commit.batch.size =   0
//    commit.time.interval = 0
//    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
//
//    fast.polling.enable=true
//    dm.offline.handler.enable = true
//    dm.offline.handlers = [{
//      class = "com.mobikok.ssp.data.streaming.handler.dm.offline.ClickHouseQueryByBTimeHandler"
//      items = [{
//        view = "nadx_overall_dm"
//        message.consumer = "nadx_overall_dm_cer"
//        message.topics = [
//          "nadx_overall_dwr"
//        ]
//      }]
//    }]
//
//    kafka.consumer {
//      partitions = [
//        {
//          topic = "topic_empty"
//          partition = 0
//        }
//      ]
//    }
//  }

  ck_nadx_overall_dm_v6 {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.offline.handler.enable = true
    dm.offline.handlers = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.offline.ClickHouseQueryByBTimeHandler"
      items = [{
        view = "nadx_overall_dm_v6"
        ck="nadx_overall_dm"
        message.consumer = "nadx_overall_dm_v6_cer"
        message.topics = ["nadx_overall_dwr_v6"]
      }]
    }]

    kafka.consumer {
      partitions = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }

  ck_nadx_overall_dm_v6_1 {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    business.date.extract.by = "createTime"
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.offline.handler.enable = true
    dm.offline.handlers = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.offline.ClickHouseQueryByBTimeHandler"
      items = [{
        view = "nadx_overall_dm_v6_1"
        ck="nadx_overall_dm_v6_1"
        message.consumer = "nadx_overall_dm_v6_1_cer"
        message.topics = ["nadx_overall_dwr_v6_1"]
      }]
    }]

    kafka.consumer {
      partitions = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }

  ck_nadx_overall_dm_v6_2 {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    business.date.extract.by = "createTime"
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.offline.handler.enable = true
    dm.offline.handlers = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.offline.ClickHouseQueryByBTimeHandler"
      items = [{
        view = "nadx_overall_dm_v6_2"
        ck="nadx_overall_dm_v6_2"
        message.consumer = "nadx_overall_dm_v6_2_cer"
        message.topics = ["nadx_overall_dwr_v6_2"]
      }]
    }]

    kafka.consumer {
      partitions = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }

  ck_nadx_overall_dm_v6_3 {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    business.date.extract.by = "createTime"
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.offline.handler.enable = true
    dm.offline.handlers = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.offline.ClickHouseQueryByBTimeHandler"
      items = [{
        view = "nadx_overall_dm_v6_3"
        ck="nadx_overall_dm_v6_3"
        message.consumer = "nadx_overall_dm_v6_3_cer"
        message.topics = ["nadx_overall_dwr_v6_3"]
      }]
    }]

    kafka.consumer {
      partitions = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }

//  ck_nadx_overall_dm_v9 {
//    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
//    business.date.extract.by = "createTime"
//    //      commit.batch.size = 50000
//    commit.batch.size =   0
//    commit.time.interval = 0
//    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
//
//    fast.polling.enable=true
//    dm.offline.handler.enable = true
//    dm.offline.handlers = [{
//      class = "com.mobikok.ssp.data.streaming.handler.dm.offline.ClickHouseQueryByBTimeHandler"
//      items = [{
//        view = "nadx_overall_dm_v9"
//        ck="nadx_overall_dm_v9"
//        b_time.min="date_format(current_timestamp() + INTERVAL -36 HOUR, 'yyyy-MM-dd HH:00:00')"
//        message.consumer = "nadx_overall_dm_v9_cer"
//        message.topics = [
//          "nadx_overall_dwr_v18_1"
//        ]
//      }]
//    }]
//    kafka.consumer {
//      partitions = [
//        {
//          topic = "topic_empty"
//          partition = 0
//        }
//      ]
//    }
//  }
  ck_nadx_overall_audit_dm {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    business.date.extract.by = "createTime"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.offline.handler.enable = true
    dm.offline.handlers = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.offline.ClickHouseQueryByBTimeHandler"
      items = [{
        view = "nadx_overall_audit_dm"
        message.consumer = "nadx_overall_traffic_audit_cer"
        message.topics = [
          "nadx_overall_audit_dwr"
        ]
      }]
    }]

    kafka.consumer {
      partitions = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
  ck_ndsp_overall_dm {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    business.date.extract.by = "createTime"
    //      commit.batch.size = 50000
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.offline.handler.enable = true
    dm.offline.handlers = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.offline.ClickHouseQueryByBTimeHandler"
      items = [{
        view = "ndsp_overall_dm"
        message.consumer = "ndsp_overall_dm_cer"
        message.topics = [
          "ndsp_overall_dwr"
        ]
      }]
    }]

    kafka.consumer {
      partitions = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }
}