rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://master:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="node187:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node187:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    auto.offset.reset = "earliest"
    //    auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "master,node187"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  app.name = "overall"
  streaming.batch.buration = 100
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
    //    spark.streaming.kafka.maxRatePerPartition = 2000
    spark.streaming.kafka.maxRatePerPartition = 1250
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 5
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 5
    spark.kryoserializer.buffer.max=256
    spark.scheduler.mode=FAIR
    //    spark.streaming.concurrentJobs = 6
  }
}
modules {
  overall_traffic {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    // timestamp 精确到了秒,非毫秒，所以不用除于1000
    business.time.extract.by = "from_unixtime(timestamp, 'yyyy-MM-dd HH:mm:ss')"
    master = true
    dwi.enable = true
    dwi.table = "nadx_overall_traffic_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.NadxTrafficDWISchema"
    dwr.enable = true
    dwr.groupby.fields = [
      {
        expr = "supply_bd_id",       as = "supply_bd_id"
      },{
        expr = "supply_am_id",       as = "supply_am_id"
      },{
        expr = "supply_id",          as = "supply_id"
      },{
        expr = "supply_protocol",    as = "supply_protocol"
      },{
        expr = "request_flag",       as = "request_flag"
      },

      {
        expr = "ad_format",          as = "ad_format"
      },{
        expr = "site_app_id",        as = "site_app_id"
      },{
        expr = "placement_id",       as = "placement_id"
      },{
        expr = "position",           as = "position"
      },{
        expr = "country",            as = "country"
      },

      {
        expr = "state",              as = "state"
      },{
        expr = "city",               as = "city"
      }, {
        expr = "carrier",            as = "carrier"
      }, {
        expr = "os",                 as = "os"
      }, {
        expr = "os_version",         as = "os_version"
      },

      {
        expr = "device_type",        as = "device_type"
      }, {
        expr = "device_brand",       as = "device_brand"
      }, {
        expr = "device_model",       as = "device_model"
      }, {
        expr = "age",                as = "age"
      }, {
        expr = "gender",             as = "gender"
      },

      {
        expr = "cost_currency",      as = "cost_currency"
      }, {
        expr = "demand_bd_id",       as = "demand_bd_id"
      }, {
        expr = "demand_am_id",       as = "demand_am_id"
      }, {
        expr = "demand_id",          as = "demand_id"
      }, {
        expr = "demand_protocol",    as = "demand_protocol"
      },

      {
        expr = "revenue_currency",   as = "revenue_currency"
      }, {
        expr = "demand_seat_id",     as = "demand_seat_id"
      }, {
        expr = "demand_campaign_id", as = "demand_campaign_id"
      }, {
        expr = "target_site_app_id", as = "target_site_app_id"
      }, {
        expr = "bid_price_model",    as = "bid_price_model"
      },

      {
        expr = "traffic_type",       as = "traffic_type"
      }, {
        expr = "currency",           as = "currency"
      }, {
        expr = "bundle",             as = "bundle"
      }, {
        expr = "size",               as = "size"
      }
    ]
    dwr.groupby.aggs = [
      {
        expr = "sum(supply_request_count)",               as ="supply_request_count",              union = "sum(supply_request_count)"
      },{
        expr = "sum(supply_invalid_request_count)",       as ="supply_invalid_request_count",      union = "sum(supply_invalid_request_count)"
      },{
        expr = "sum(supply_bid_count)",                   as ="supply_bid_count",                  union = "sum(supply_bid_count)"
      },{
        expr = "sum(supply_bid_price_cost_currency)",     as ="supply_bid_price_cost_currency",    union = "sum(supply_bid_price_cost_currency)"
      },{
        expr = "sum(supply_bid_price)",                   as ="supply_bid_price",                  union = "sum(supply_bid_price)"
      },

      {
        expr = "0",                                       as ="supply_win_count",                  union = "sum(supply_win_count)"
      },{
        expr = "0",                                       as ="supply_win_price_cost_currency",    union = "sum(supply_win_price_cost_currency)"
      },{
        expr = "0",                                       as ="supply_win_price",                  union = "sum(supply_win_price)"
      },{
        expr = "sum(demand_request_count)",               as ="demand_request_count",              union = "sum(demand_request_count)"
      },{
        expr = "sum(demand_bid_count)",                   as ="demand_bid_count",                  union = "sum(demand_bid_count)"
      },

      {
        expr = "sum(demand_bid_price_revenue_currency)",   as ="demand_bid_price_revenue_currency", union = "sum(demand_bid_price_revenue_currency)"
      },{
        expr = "sum(demand_bid_price)",                    as ="demand_bid_price",                  union = "sum(demand_bid_price)"
      },{
        expr = "sum(demand_win_count)",                    as ="demand_win_count",                  union = "sum(demand_win_count)"
      },{
        expr = "sum(demand_win_price_revenue_currency)",   as ="demand_win_price_revenue_currency", union = "sum(demand_win_price_revenue_currency)"
      },{
        expr = "sum(demand_win_price)",                    as ="demand_win_price",                  union = "sum(demand_win_price)"
      },

      {
        expr = "sum(demand_timeout_count)",               as ="demand_timeout_count",              union = "sum(demand_timeout_count)"
      },{
        expr = "0",                                       as ="impression_count",                  union = "sum(impression_count)"
      },{
        expr = "0",                                       as ="impression_cost_currency",          union = "sum(impression_cost_currency)"
      },{
        expr = "0",                                       as ="impression_cost",                   union = "sum(impression_cost)"
      },{
        expr = "0",                                       as ="impression_revenue_currency",       union = "sum(impression_revenue_currency)"
      },

      {
        expr = "0",                                       as ="impression_revenue",                union = "sum(impression_revenue)"
      },{
        expr = "0",                                       as ="click_count",                       union = "sum(click_count)"
      },{
        expr = "0",                                       as ="click_cost_currency",               union = "sum(click_cost_currency)"
      },{
        expr = "0",                                       as ="click_cost",                        union = "sum(click_cost)"
      },{
        expr = "0",                                       as ="click_revenue_currency",            union = "sum(click_revenue_currency)"
      },

      {
        expr = "0",                                       as ="click_revenue",                     union = "sum(click_revenue)"
      },{
        expr = "0",                                       as ="conversion_count",                  union = "sum(conversion_count)"
      },{
        expr = "0",                                       as ="conversion_price",                  union = "sum(conversion_price)"
      }
    ]
    dwr.include.repeated = true
    dwr.table = "nadx_overall_dwr"
    kafka.consumer {
      partitoins = [
        {topic = "traffic_topic_v2", partition = 0}
        //        ,{topic = "traffic_topic_v2", partition = 1},
        //        {topic = "traffic_topic_v2", partition = 2},
        //        {topic = "traffic_topic_v2", partition = 3},
        //        {topic = "traffic_topic_v2", partition = 4}
      ]
    }
  }

  overall_performance {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    // timestamp 精确到了秒,非毫秒，所以不用除于1000
    business.time.extract.by = "from_unixtime(bidTime, 'yyyy-MM-dd HH:mm:ss')"
    dwi.enable = true
    dwi.table = "nadx_overall_performance_matched_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.NadxPerformanceDWISchema"
    dwi.handler = [{
      class = "com.mobikok.ssp.data.streaming.handler.dwi.NadxPerformanceHandler"
    }]
    dwr.enable = true
    dwr.groupby.fields = [
      {
        expr = "supply_bd_id",       as = "supply_bd_id"
      },{
        expr = "supply_am_id",       as = "supply_am_id"
      },{
        expr = "supply_id",          as = "supply_id"
      },{
        expr = "supply_protocol",    as = "supply_protocol"
      },{
        expr = "request_flag",       as = "request_flag"
      },

      {
        expr = "ad_format",          as = "ad_format"
      },{
        expr = "site_app_id",        as = "site_app_id"
      },{
        expr = "placement_id",       as = "placement_id"
      },{
        expr = "position",           as = "position"
      },{
        expr = "country",            as = "country"
      },

      {
        expr = "state",              as = "state"
      },{
        expr = "city",               as = "city"
      }, {
        expr = "carrier",            as = "carrier"
      }, {
        expr = "os",                 as = "os"
      }, {
        expr = "os_version",         as = "os_version"
      },

      {
        expr = "device_type",        as = "device_type"
      }, {
        expr = "device_brand",       as = "device_brand"
      }, {
        expr = "device_model",       as = "device_model"
      }, {
        expr = "age",                as = "age"
      }, {
        expr = "gender",             as = "gender"
      },

      {
        expr = "cost_currency",      as = "cost_currency"
      }, {
        expr = "demand_bd_id",       as = "demand_bd_id"
      }, {
        expr = "demand_am_id",       as = "demand_am_id"
      }, {
        expr = "demand_id",          as = "demand_id"
      }, {
        expr = "demand_protocol",    as = "demand_protocol"
      },

      {
        expr = "revenue_currency",   as = "revenue_currency"
      }, {
        expr = "demand_seat_id",     as = "demand_seat_id"
      }, {
        expr = "demand_campaign_id", as = "demand_campaign_id"
      }, {
        expr = "target_site_app_id", as = "target_site_app_id"
      }, {
        expr = "bid_price_model",    as = "bid_price_model"
      },

      {
        expr = "traffic_type",       as = "traffic_type"
      }, {
        expr = "currency",           as = "currency"
      }, {
        expr = "bundle",             as = "bundle"
      }, {
        expr = "size",               as = "size"
      }
    ]
    dwr.groupby.aggs = [
      {
        expr = "0",                                       as ="supply_request_count",              union = "sum(supply_request_count)"
      },{
        expr = "0",                                       as ="supply_invalid_request_count",      union = "sum(supply_invalid_request_count)"
      },{
        expr = "0",                                       as ="supply_bid_count",                  union = "sum(supply_bid_count)"
      },{
        expr = "0",                                       as ="supply_bid_price_cost_currency",    union = "sum(supply_bid_price_cost_currency)"
      },{
        expr = "0",                                       as ="supply_bid_price",                  union = "sum(supply_bid_price)"
      },

      {
        expr = "sum(supply_win_count)",                   as ="supply_win_count",                  union = "sum(supply_win_count)"
      },{
        expr = "sum(supply_win_price_cost_currency)",     as ="supply_win_price_cost_currency",    union = "sum(supply_win_price_cost_currency)"
      },{
        expr = "sum(supply_win_price)",                   as ="supply_win_price",                  union = "sum(supply_win_price)"
      },{
        expr = "0",                                       as ="demand_request_count",              union = "sum(demand_request_count)"
      },{
        expr = "0",                                       as ="demand_bid_count",                  union = "sum(demand_bid_count)"
      },

      {
        expr = "0",                                       as ="demand_bid_price_revenue_currency", union = "sum(demand_bid_price_revenue_currency)"
      },{
        expr = "0",                                       as ="demand_bid_price",                  union = "sum(demand_bid_price)"
      },{
        expr = "0",                                       as ="demand_win_count",                  union = "sum(demand_win_count)"
      },{
        expr = "0",                                       as ="demand_win_price_revenue_currency", union = "sum(demand_win_price_revenue_currency)"
      },{
        expr = "0",                                       as ="demand_win_price",                  union = "sum(demand_win_price)"
      },

      {
        expr = "0",                                       as ="demand_timeout_count",              union = "sum(demand_timeout_count)"
      },{
        expr = "sum(impression_count)",                   as ="impression_count",                  union = "sum(impression_count)"
      },{
        expr = "sum(impression_cost_currency)",           as ="impression_cost_currency",          union = "sum(impression_cost_currency)"
      },{
        expr = "sum(impression_cost)",                    as ="impression_cost",                   union = "sum(impression_cost)"
      },{
        expr = "sum(impression_revenue_currency)",        as ="impression_revenue_currency",       union = "sum(impression_revenue_currency)"
      },

      {
        expr = "sum(impression_revenue)",                 as ="impression_revenue",                union = "sum(impression_revenue)"
      },{
        expr = "sum(click_count)",                        as ="click_count",                       union = "sum(click_count)"
      },{
        expr = "sum(click_cost_currency)",                as ="click_cost_currency",               union = "sum(click_cost_currency)"
      },{
        expr = "sum(click_cost)",                         as ="click_cost",                        union = "sum(click_cost)"
      },{
        expr = "sum(click_revenue_currency)",             as ="click_revenue_currency",            union = "sum(click_revenue_currency)"
      },

      {
        expr = "sum(click_revenue)",                      as ="click_revenue",                     union = "sum(click_revenue)"
      },{
        expr = "sum(conversion_count)",                   as ="conversion_count",                  union = "sum(conversion_count)"
      },{
        expr = "sum(conversion_price)",                   as ="conversion_price",                  union = "sum(conversion_price)"
      }
    ]
    dwr.include.repeated = true
    dwr.table = "nadx_overall_dwr"
    kafka.consumer {
      partitoins = [
        {topic = "performance_topic", partition = 0}
        //        ,{topic = "traffic_topic_v2", partition = 1},
        //        {topic = "traffic_topic_v2", partition = 2},
        //        {topic = "traffic_topic_v2", partition = 3},
        //        {topic = "traffic_topic_v2", partition = 4}
      ]
    }
  }

}