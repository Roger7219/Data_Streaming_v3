rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://master:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="node187:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node187:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
//    auto.offset.reset = "earliest"
        auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "master,node187"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  app.name = "nadx_overall_audit"
  streaming.batch.buration = 100
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
    //    spark.streaming.kafka.maxRatePerPartition = 2000
    spark.streaming.kafka.maxRatePerPartition = 3000
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 8
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 8
    spark.kryoserializer.buffer.max=256
    spark.scheduler.mode=FAIR
    //    spark.streaming.concurrentJobs = 6
  }
}
modules {
//  site_app_id,
//  placement_id,
//  city,
//  carrier,
//  os_version,
//  device_brand,
//  device_model,
//  bundle
  nadx_audit {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    // timestamp 精确到了秒,非毫秒，所以不用除于1000
    business.time.extract.by = "from_unixtime(timestamp, 'yyyy-MM-dd HH:mm:ss')"
//    master = true
//    dwi.enable = true
//    dwi.table = "nadx_overall_traffic_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.NadxTrafficDWISchema"
    dwr.enable = true
    dwr.groupby.fields = [
      {
        expr = "demand_id",          as = "demand_id"
      }, {
        expr = "crid",               as = "crid"
      }, {
        expr = "os",                 as = "os"
      }, {
        expr = "country",            as = "country"
      }, {
        expr = "adm",                as = "adm"
      }
    ]
    dwr.groupby.aggs = [
      {
        expr = "count(if(dataType == 3, 1, 0))",           as ="demand_crid_count",                  union = "sum(demand_crid_count)"
      }
    ]
    dwr.include.repeated = true
    dwr.table = "nadx_overall_audit_dwr"
    kafka.consumer {
      partitoins = [
        {topic = "traffic_30000_topic", partition = 0}
      ]
    }
  }
}