rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://node17:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=true
  set {
    bootstrap.servers="node30:6667,node31:6667,node32:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node30:6667,node31:6667,node32:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    auto.offset.reset = "earliest"
    #auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "node14,node17,node15"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  app.name = "adx"
//  streaming.batch.buration = 300
  streaming.batch.buration = 200
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
//    spark.streaming.kafka.maxRatePerPartition = 400
    spark.streaming.kafka.maxRatePerPartition = 400
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 3
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize = 1024000000
    spark.sql.shuffle.partitions = 3
    spark.kryoserializer.buffer.max = 512m
    spark.streaming.concurrentJobs = 2
    spark.scheduler.mode=FAIR
    spark.driver.maxResultSize=4g
  }
}
modules {

  adx_dsp {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "from_unixtime(timestamp/1000, 'yyyy-MM-dd HH:mm:ss')"
    business.time.format.by = "yyyy-MM-dd HH:00:00"
    commit.time.interval = 0
    commit.batch.size = 0
    master = true
    dwi.enable=true
    dwi.table= "adx_dsp_dwi"
    dwi.kafka.proto.enable = true
    dwi.kafka.proto.class = "proto.BidInfo$Event"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.AdxTrafficDWISchema"
    dwi.uuid.enable = true
    dwi.uuid.fields = ["""
                    CASE event_type
                    WHEN 'REQUEST'    THEN request.trade.dsp_id
                    WHEN 'SEND'       THEN send.trade.dsp_id
                    WHEN 'WINNOTICE'  THEN win_notice.trade.dsp_id
                    WHEN 'IMPRESSION' THEN impression.trade.dsp_id
                    WHEN 'CLICK'      THEN click.trade.dsp_id
                    END""",
                    """CASE event_type WHEN 'REQUEST'    THEN if(request.trade.status = 1, 1, 0) ELSE 0 END """,
                    "event_key"]
    dwr.enable = true
    dwr.groupby.fields = [{
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.publisher_id
                    WHEN 'SEND'       THEN send.request.publisher_id
                    WHEN 'WINNOTICE'  THEN win_notice.request.publisher_id
                    WHEN 'IMPRESSION' THEN impression.request.publisher_id
                    WHEN 'CLICK'      THEN click.request.publisher_id
                    END""",
      as = "publisherId"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.app_id
                    WHEN 'SEND'       THEN send.request.app_id
                    WHEN 'WINNOTICE'  THEN win_notice.request.app_id
                    WHEN 'IMPRESSION' THEN impression.request.app_id
                    WHEN 'CLICK'      THEN click.request.app_id
                    END""",
      as = "appId"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.trade.dsp_id
                    WHEN 'SEND'       THEN send.trade.dsp_id
                    WHEN 'WINNOTICE'  THEN win_notice.trade.dsp_id
                    WHEN 'IMPRESSION' THEN impression.trade.dsp_id
                    WHEN 'CLICK'      THEN click.trade.dsp_id
                    END""",
      as = "dspId"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.country_id
                    WHEN 'SEND'       THEN send.request.country_id
                    WHEN 'WINNOTICE'  THEN win_notice.request.country_id
                    WHEN 'IMPRESSION' THEN impression.request.country_id
                    WHEN 'CLICK'      THEN click.request.country_id
                    END""",
      as = "countryId"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.carrier_id
                    WHEN 'SEND'       THEN send.request.carrier_id
                    WHEN 'WINNOTICE'  THEN win_notice.request.carrier_id
                    WHEN 'IMPRESSION' THEN impression.request.carrier_id
                    WHEN 'CLICK'      THEN click.request.publisher_id
                    END""",
      as = "carrierId"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.ad_id
                    WHEN 'SEND'       THEN send.request.ad_id
                    WHEN 'WINNOTICE'  THEN win_notice.request.ad_id
                    WHEN 'IMPRESSION' THEN impression.request.ad_id
                    WHEN 'CLICK'      THEN click.request.ad_id
                    END""",
      as = "adId"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.ad_type
                    WHEN 'SEND'       THEN send.request.ad_type
                    WHEN 'WINNOTICE'  THEN win_notice.request.ad_type
                    WHEN 'IMPRESSION' THEN impression.request.ad_type
                    WHEN 'CLICK'      THEN click.request.ad_type
                    END""",
      as = "adType"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.iab1
                    WHEN 'SEND'       THEN send.request.iab1
                    WHEN 'WINNOTICE'  THEN win_notice.request.iab1
                    WHEN 'IMPRESSION' THEN impression.request.iab1
                    WHEN 'CLICK'      THEN click.request.iab1
                    END""",
      as = "iab1"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.iab2
                    WHEN 'SEND'       THEN send.request.iab2
                    WHEN 'WINNOTICE'  THEN win_notice.request.iab2
                    WHEN 'IMPRESSION' THEN impression.request.iab2
                    WHEN 'CLICK'      THEN click.request.iab2
                    END""",
      as = "iab2"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.width
                    WHEN 'SEND'       THEN send.request.width
                    WHEN 'WINNOTICE'  THEN win_notice.request.width
                    WHEN 'IMPRESSION' THEN impression.request.width
                    WHEN 'CLICK'      THEN click.request.width
                    END""",
      as = "width"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.height
                    WHEN 'SEND'       THEN send.request.height
                    WHEN 'WINNOTICE'  THEN win_notice.request.height
                    WHEN 'IMPRESSION' THEN impression.request.height
                    WHEN 'CLICK'      THEN click.request.height
                    END""",
      as = "height"
    }, {
      expr = """from_unixtime(floor(`timestamp`/1000), 'yyyy-MM-dd')""",
      as = "utcDay"
    }, {
      expr = """from_unixtime(floor(`timestamp`/1000), 'HH')""",
      as = "utcHour"
    }
    ]
    dwr.groupby.aggs = [{
      expr = """0"""
      as = "sspRequests"
      union = "sum(sspRequests)"
    }, {
      expr = """0"""
      as = "sspSends"
      union = "sum(sspSends)"
    },
    {
      expr = """sum(CASE event_type WHEN 'REQUEST'    THEN 1 ELSE 0 END )"""
      as = "dspRequests"
      union = "sum(dspRequests)"
    }, {
      expr = """sum(CASE event_type WHEN 'REQUEST'    THEN if(request.trade.status = 1, 1, 0) ELSE 0 END )"""
      as = "dspSends"
      union = "sum(dspSends)"
    },{
      expr = """0"""
      as = "winNotices"
      union = "sum(winNotices)"
    }, {
      expr = """0"""
      as = "impressions"
      union = "sum(impressions)"
    }, {
      expr = """0"""
      as = "clicks"
      union = "sum(clicks)"
    }, {
      expr = """0"""
      as = "realImpressions"
      union = "sum(realImpressions)"
    }
    , {
      expr = """0"""
      as = "realClicks"
      union = "sum(realClicks)"
    },
      //mediaPrice
      {
        expr = """0"""
        as = "mediaPrice"
        union = "sum(mediaPrice)"
      },
      // realMediaPrice
      {
        expr = """0"""
        as = "realMediaPrice"
        union = "sum(realMediaPrice)"
      }, {
        expr = """0"""
        as = "realCpmMediaPrice"
        union = "sum(realCpmMediaPrice)"
      }, {
        expr = """0"""
        as = "realCpcMediaPrice"
        union = "sum(realCpcMediaPrice)"
      },
      // clearPrice
      {
        expr = """0"""
        as = "clearPrice"
        union = "sum(clearPrice)"
      }
      // realClearPrice
      {
        expr = """0"""
        as = "realClearPrice"
        union = "sum(realClearPrice)"
      }, {
        expr = """0"""
        as = "realCpmClearPrice"
        union = "sum(realCpmClearPrice)"
      }, {
        expr = """0"""
        as = "realCpcClearPrice"
        union = "sum(realCpcClearPrice)"
      },
      // 差价
      {
        expr = """0"""
        as = "profit"
        union  = "sum(profit)"
      }

    ]
    dwr.include.repeated = false
    dwr.table = "adx_traffic_dwr"
    kafka.consumer {
      partitoins = [
        {topic = "adx-dsp-info-3", partition = 0}
        {topic = "adx-dsp-info-3", partition = 1}
        {topic = "adx-dsp-info-3", partition = 2}
        {topic = "adx-dsp-info-3", partition = 3}
        {topic = "adx-dsp-info-3", partition = 4}

        {topic = "adx-dsp-info-3", partition = 5}
        {topic = "adx-dsp-info-3", partition = 6}
        {topic = "adx-dsp-info-3", partition = 7}
        {topic = "adx-dsp-info-3", partition = 8}
        {topic = "adx-dsp-info-3", partition = 9}

      ]
      set {
        key.deserializer = "org.apache.kafka.common.serialization.ByteArrayDeserializer"
        value.deserializer = "org.apache.kafka.common.serialization.ByteArrayDeserializer"
      }
    }
  }

  adx_ssp {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "from_unixtime(timestamp/1000, 'yyyy-MM-dd HH:mm:ss')"
    business.time.format.by = "yyyy-MM-dd HH:00:00"
    commit.time.interval = 0
    commit.batch.size = 0
    dwi.enable=true
    dwi.table= "adx_ssp_dwi"
    dwi.kafka.proto.enable = true
    dwi.kafka.proto.class = "proto.BidInfo$Event"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.AdxTrafficDWISchema"
    dwi.uuid.enable = true
    dwi.uuid.fields = ["event_key"]
    dwr.enable = true
    dwr.groupby.fields = [{
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.publisher_id
                    WHEN 'SEND'       THEN send.request.publisher_id
                    WHEN 'WINNOTICE'  THEN win_notice.request.publisher_id
                    WHEN 'IMPRESSION' THEN impression.request.publisher_id
                    WHEN 'CLICK'      THEN click.request.publisher_id
                    END""",
      as = "publisherId"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.app_id
                    WHEN 'SEND'       THEN send.request.app_id
                    WHEN 'WINNOTICE'  THEN win_notice.request.app_id
                    WHEN 'IMPRESSION' THEN impression.request.app_id
                    WHEN 'CLICK'      THEN click.request.app_id
                    END""",
      as = "appId"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.trade.dsp_id
                    WHEN 'SEND'       THEN send.trade.dsp_id
                    WHEN 'WINNOTICE'  THEN win_notice.trade.dsp_id
                    WHEN 'IMPRESSION' THEN impression.trade.dsp_id
                    WHEN 'CLICK'      THEN click.trade.dsp_id
                    END""",
      as = "dspId"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.country_id
                    WHEN 'SEND'       THEN send.request.country_id
                    WHEN 'WINNOTICE'  THEN win_notice.request.country_id
                    WHEN 'IMPRESSION' THEN impression.request.country_id
                    WHEN 'CLICK'      THEN click.request.country_id
                    END""",
      as = "countryId"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.carrier_id
                    WHEN 'SEND'       THEN send.request.carrier_id
                    WHEN 'WINNOTICE'  THEN win_notice.request.carrier_id
                    WHEN 'IMPRESSION' THEN impression.request.carrier_id
                    WHEN 'CLICK'      THEN click.request.publisher_id
                    END""",
      as = "carrierId"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.ad_id
                    WHEN 'SEND'       THEN send.request.ad_id
                    WHEN 'WINNOTICE'  THEN win_notice.request.ad_id
                    WHEN 'IMPRESSION' THEN impression.request.ad_id
                    WHEN 'CLICK'      THEN click.request.ad_id
                    END""",
      as = "adId"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.ad_type
                    WHEN 'SEND'       THEN send.request.ad_type
                    WHEN 'WINNOTICE'  THEN win_notice.request.ad_type
                    WHEN 'IMPRESSION' THEN impression.request.ad_type
                    WHEN 'CLICK'      THEN click.request.ad_type
                    END""",
      as = "adType"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.iab1
                    WHEN 'SEND'       THEN send.request.iab1
                    WHEN 'WINNOTICE'  THEN win_notice.request.iab1
                    WHEN 'IMPRESSION' THEN impression.request.iab1
                    WHEN 'CLICK'      THEN click.request.iab1
                    END""",
      as = "iab1"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.iab2
                    WHEN 'SEND'       THEN send.request.iab2
                    WHEN 'WINNOTICE'  THEN win_notice.request.iab2
                    WHEN 'IMPRESSION' THEN impression.request.iab2
                    WHEN 'CLICK'      THEN click.request.iab2
                    END""",
      as = "iab2"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.width
                    WHEN 'SEND'       THEN send.request.width
                    WHEN 'WINNOTICE'  THEN win_notice.request.width
                    WHEN 'IMPRESSION' THEN impression.request.width
                    WHEN 'CLICK'      THEN click.request.width
                    END""",
      as = "width"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.height
                    WHEN 'SEND'       THEN send.request.height
                    WHEN 'WINNOTICE'  THEN win_notice.request.height
                    WHEN 'IMPRESSION' THEN impression.request.height
                    WHEN 'CLICK'      THEN click.request.height
                    END""",
      as = "height"
    }, {
      expr = """from_unixtime(floor(`timestamp`/1000), 'yyyy-MM-dd')""",
      as = "utcDay"
    }, {
      expr = """from_unixtime(floor(`timestamp`/1000), 'HH')""",
      as = "utcHour"
    }
    ]
    dwr.groupby.aggs = [{
      expr = """sum(CASE event_type WHEN 'REQUEST'    THEN 1 ELSE 0 END )"""
      as = "sspRequests"
      union = "sum(sspRequests)"
    }, {
      expr = """sum(CASE event_type WHEN 'SEND'       THEN 1 ELSE 0 END )"""
      as = "sspSends"
      union = "sum(sspSends)"
    },
    {
      expr = """0"""
      as = "dspRequests"
      union = "sum(dspRequests)"
    }, {
      expr = """0"""
      as = "dspSends"
      union = "sum(dspSends)"
    },{
      expr = """sum(CASE event_type WHEN 'WINNOTICE'   THEN 1 ELSE 0 END)"""
      as = "winNotices"
      union = "sum(winNotices)"
    }, {
      expr = """sum(CASE event_type  WHEN 'IMPRESSION'
                THEN if(impression.trade.is_show = 1, 0, 1)
                ELSE 0 END)"""
      as = "impressions"
      union = "sum(impressions)"
    }, {
      expr = """sum(CASE event_type WHEN 'CLICK'
                THEN if(click.trade.is_show = 1, 0, 1)
                ELSE 0 END)"""
      as = "clicks"
      union = "sum(clicks)"
    }, {
      expr = """sum(CASE event_type WHEN 'IMPRESSION'  THEN 1 ELSE 0 END)"""
      as = "realImpressions"
      union = "sum(realImpressions)"
    }
    , {
      expr = """sum(CASE event_type WHEN 'CLICK'  THEN 1 ELSE 0 END)"""
      as = "realClicks"
      union = "sum(realClicks)"
    },
      //mediaPrice
      {
        expr = """sum(CASE event_type
                WHEN 'IMPRESSION' THEN
                    if(impression.trade.is_show = 1, 0, CASE impression.trade.deal_type
                        WHEN 'CPM' THEN CAST(impression.trade.media_price AS DECIMAL(19,10))/1000
                        ELSE 0
                        END)
                WHEN 'CLICK' THEN
                    if(click.trade.is_show = 1, 0, CASE click.trade.deal_type
                        WHEN 'CPC' THEN click.trade.media_price
                        ELSE 0
                        END)
                END)"""
        as = "mediaPrice"
        union = "sum(mediaPrice)"
      },
      // realMediaPrice
      {
        expr = """sum(CASE event_type
                  WHEN 'IMPRESSION' THEN CASE impression.trade.deal_type
                      WHEN 'CPM' THEN CAST(impression.trade.media_price AS DECIMAL(19,10))/1000
                      ELSE 0
                      END
                  WHEN 'CLICK' THEN CASE click.trade.deal_type
                      WHEN 'CPC' THEN click.trade.media_price
                      ELSE 0
                      END
                  END)"""
        as = "realMediaPrice"
        union = "sum(realMediaPrice)"
      }, {
        expr = """sum(CASE event_type
                  WHEN 'IMPRESSION' THEN CASE impression.trade.deal_type
                      WHEN 'CPM' THEN CAST(impression.trade.media_price AS DECIMAL(19,10))/1000
                      END
                  END)"""
        as = "realCpmMediaPrice"
        union = "sum(realCpmMediaPrice)"
      }, {
        expr = """sum(CASE event_type
                  WHEN 'CLICK' THEN CASE click.trade.deal_type
                      WHEN 'CPC' THEN click.trade.media_price
                      END
                  END)"""
        as = "realCpcMediaPrice"
        union = "sum(realCpcMediaPrice)"
      },
      // clearPrice
      {
        expr = """sum( CASE event_type
                WHEN 'IMPRESSION' THEN
                    if(impression.trade.is_show = 1, 0 , CASE impression.trade.deal_type
                        WHEN 'CPM' THEN CAST(impression.trade.clear_price AS DECIMAL(19,10))/1000
                        ELSE 0 END)
                WHEN 'CLICK' THEN
                    if(click.trade.is_show = 1, 0, CASE click.trade.deal_type
                        WHEN 'CPC' THEN click.trade.clear_price
                        ELSE 0
                        END)
                END)"""
        as = "clearPrice"
        union = "sum(clearPrice)"
      }
      // realClearPrice
      {
        expr = """sum(CASE event_type
                  WHEN 'IMPRESSION' THEN CASE impression.trade.deal_type
                      WHEN 'CPM' THEN CAST(impression.trade.clear_price AS DECIMAL(19,10))/1000
                      ELSE 0 END
                  WHEN 'CLICK' THEN CASE click.trade.deal_type
                      WHEN 'CPC' THEN click.trade.clear_price
                      ELSE 0
                      END
                  END)"""
        as = "realClearPrice"
        union = "sum(realClearPrice)"
      }, {
        expr = """sum(CASE event_type
                  WHEN 'IMPRESSION' THEN CASE impression.trade.deal_type
                      WHEN 'CPM' THEN CAST(impression.trade.clear_price AS DECIMAL(19,10))/1000
                      END
                  END)"""
        as = "realCpmClearPrice"
        union = "sum(realCpmClearPrice)"
      }, {
        expr = """sum(CASE event_type
                  WHEN 'CLICK' THEN CASE click.trade.deal_type
                      WHEN 'CPC' THEN click.trade.clear_price
                      END
                  END)"""
        as = "realCpcClearPrice"
        union = "sum(realCpcClearPrice)"
      },
      // 差价
      {
        expr = """sum(
                  CASE event_type
                  WHEN 'IMPRESSION' THEN CASE impression.trade.deal_type
                      WHEN 'CPM' THEN CAST(impression.trade.clear_price AS DECIMAL(19,10))/1000
                      ELSE 0
                      END
                  WHEN 'CLICK' THEN CASE click.trade.deal_type
                      WHEN 'CPC' THEN click.trade.clear_price
                      ELSE 0
                      END
                  END
                  -
                  CASE event_type
                  WHEN 'IMPRESSION' THEN CASE impression.trade.deal_type
                      WHEN 'CPM' THEN CAST(impression.trade.media_price AS DECIMAL(19,10))/1000
                      ELSE 0
                      END
                  WHEN 'CLICK' THEN CASE click.trade.deal_type
                      WHEN 'CPC' THEN click.trade.media_price
                      ELSE 0
                      END
                  END)"""
        as = "profit"
        union  = "sum(profit)"
      }
    ]
    dwr.include.repeated = false
    dwr.table = "adx_traffic_dwr"
    kafka.consumer {
      partitoins = [
        { topic = "adx-info-3", partition = 0 }
        { topic = "adx-info-3", partition = 1 }
        { topic = "adx-info-3", partition = 2 }
        { topic = "adx-info-3", partition = 3 }
        { topic = "adx-info-3", partition = 4 }

        { topic = "adx-info-3", partition = 5 }
        { topic = "adx-info-3", partition = 6 }
        { topic = "adx-info-3", partition = 7 }
        { topic = "adx-info-3", partition = 8 }
        { topic = "adx-info-3", partition = 9 }
      ]
      set {
        key.deserializer = "org.apache.kafka.common.serialization.ByteArrayDeserializer"
        value.deserializer = "org.apache.kafka.common.serialization.ByteArrayDeserializer"
      }
    }
  }

}