rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://node17:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=true
  set {
    bootstrap.servers="node30:6667,node31:6667,node32:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node30:6667,node31:6667,node32:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    auto.offset.reset = "earliest"
    #auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "node14,node17,node15"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  app.name = "ssp_dupscribe"
  streaming.batch.buration = 300
//  streaming.batch.buration = 10
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
    spark.streaming.kafka.maxRatePerPartition = 2000
    #spark.streaming.kafka.maxRatePerPartition = 50000
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 3
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 3
    spark.kryoserializer.buffer.max=256
//    spark.streaming.concurrentJobs = 14
  }
}
modules {

  ssp_dupscribe {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "reportTime"
    commit.batch.size = 1
    commit.time.interval = 1800
    dwi.uuid.enable = true
    dwi.uuid.fields = ["offerId", "ipAddr", "userAgent"]
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficOldDWISchema"
    dwi.enable = true
    dwi.table = "ssp_dupscribe_dwi"
    dwr.enable = true
    dwr.groupby.fields = [{
      expr = "offerId",       as = "offerId"
    }]
    dwr.groupby.aggs = [{
      expr = "count(if(repeated == 'N', 1, null))", as = "userCount",   union = "sum(userCount)"
    },{
      expr = "count(1)",                            as = "scribeCount", union = "sum(scribeCount)"
    }]
    dwr.table = "ssp_dupscribe_dwr"
    dm.greenplum.enable = false
    dm.greenplum.hive.views = ["ssp_dupscribe_detail_dm", "ssp_dupscribe_dm"]
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_ad_fee"
          partition = 0
        }
      ]
    }
  }

}