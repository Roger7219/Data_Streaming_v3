rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://node17:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="node30:6667,node31:6667,node32:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node30:6667,node31:6667,node32:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
//    auto.offset.reset = "earliest"
    auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "node106,node107,node108"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  app.name = "ssp_userV2"
  streaming.batch.buration = 300
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
    spark.streaming.kafka.maxRatePerPartition = 2000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 10
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 10
    spark.kryoserializer.buffer.max=512
    spark.streaming.concurrentJobs = 3
  }
}
modules {

  ssp_userv2{
    class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
    business.date.extract.by = "createTime"
    commit.time.interval = 1800
    commit.batch.size = 1
    commit.time.interval = 1
    fast.polling.enable=true
    dwi.enable = true
    dwi.table = "ssp_user_v2_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspUserDWISchema"
//    dwi.phoenix.enable = true
//    dwi.phoenix.table = "SSP_USERID_HISTORY"
//    dwi.phoenix.hbase.storable.class = "com.mobikok.ssp.data.streaming.entity.SspUserIdHistory"
    dwi.handler = [{
      expr = "", as = [
        "repeats",
        "rowkey",
        "imei",
        "imsi",
        "createtime",
        "activetime",
        "appid",
        "model",
        "version",
        "sdkversion",
        "installtype",
        "leftsize",
        "androidid",
        "useragent",
        "ipaddr",
        "screen",
        "countryid",
        "carrierid",
        "sv",
        "affsub",
        "lat",
        "lon",
        "mac1",
        "mac2",
        "ssid",
        "lac",
        "cellid",
        "ctype"
      ]
      handler = {
        class = "com.mobikok.ssp.data.streaming.handler.dwi.SspUserCountHandler",
        uid.history.table = "SSP_USERID_HISTORY"
      }
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_ad_user_active"//"topic_ad_user_new"
          partition = 0
        }
      ]
    }
  }

  ssp_info_count{
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    commit.time.interval = 1800
    commit.batch.size = 1
    commit.time.interval = 1
    fast.polling.enable=true

    dwi.enable = true
    dwi.table = "ssp_info_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspLogDWISchema"
    dwi.handler = [{

      handler = {
        class = "com.mobikok.ssp.data.streaming.handler.dwi.SspInfoCountHandler",
      }
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_ad_log"
          partition = 0
        }
      ]
    }
  }
}