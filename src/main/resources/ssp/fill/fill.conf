rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://node17:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="node30:6667,node31:6667,node32:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node30:6667,node31:6667,node32:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    auto.offset.reset = "earliest"
    #auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "node106,node107,node108"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  app.name = "ssp_fill"
//  streaming.batch.buration = 1200
  streaming.batch.buration = 300
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
    spark.streaming.kafka.maxRatePerPartition = 1250
    #spark.streaming.kafka.maxRatePerPartition = 50000
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 3
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 3
    spark.kryoserializer.buffer.max=256
//    spark.streaming.concurrentJobs = 5
  }
}
modules {

    #请求数，clickid有空值情况
//  ${module.name}
    #请求数
    fill {
      class = "com.mobikok.ssp.data.streaming.module.MixModule"
      business.date.extract.by = "createTime"
      commit.batch.size = 1
      commit.time.interval = 1800
      dwi.enable = true
      dwi.table = "ssp_fill_dwi"
      dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficOldDWISchema"
      dwr.enable = true
      dwr.groupby.fields = [ {
        expr = "publisherId", as = "publisherId"
      }, {
        expr = "subId", as = "subId"
      }, {
        expr = "countryId", as = "countryId"
      }, {
        expr = "carrierId", as = "carrierId"
      },{
        expr = "sv", as = "sv"
      }, {
        expr = "adType", as = "adType"
      }, {
        expr = "campaignId",  as = "campaignId"
      }, {
        expr = "offerId",     as = "offerId"
      }, {
        expr = "imageId",     as = "imageId"  // 也称素材
      }, {
        expr = "affSub",      as = "affSub"
      }, {
        expr = "null",        as = "packageName"
      }, {
        expr = "null",        as = "domain"
      }, {
        expr = "null",        as = "operatingSystem"
      }, {
        expr = "null",        as = "systemLanguage"
      }, {
        expr = "null",        as = "deviceBrand"
      }, {
        expr = "null",        as = "deviceType"
      }, {
        expr = "null",        as = "browserKernel"
      }, {
        expr = "null",        as = "b_time"
      }]
      dwr.groupby.aggs = [{
        expr = "count(1)"
        as ="times"
        union = "sum(times)"
      }]
      dwr.include.repeated = true
      dwr.roll.batch.size = 50000
      dwr.table = "ssp_fill_dwr"
      dm.kafka.enable = true
      dm.kafka.topic = "topic_ssp_fill_dwr"
      dm.handler.enable = false
      dm.handler.setting = [{
        class = "com.mobikok.ssp.data.streaming.handler.dm.offline.KylinHandler"
        groups = [{
          message.topics = ["agg_fill"]
          kylin.cubes = ["cube_agg_traffic_dm"]
        },{
          message.topics = ["log"]
          kylin.cubes = ["cube_ssp_log_dm"]
        },{
          message.topics = ["ssp_dupscribe"]
          kylin.cubes = ["cube_ssp_dupscribe_dm", "cube_ssp_dupscribe_detail_dm"]
        },{
          message.topics = ["dsp"]
          kylin.cubes = ["cube_dsp_traffic_dm"]
        },{
          message.topics = ["fill", "send", "show", "click", "fee"]
          kylin.cubes = ["cube_ssp_app_dm", "cube_ssp_offer_dm", "cube_ssp_report_campaign_dm", "cube_ssp_report_app_dm"]
        },{
          message.topics = ["image_show", "image_click"]
          kylin.cubes = ["cube_ssp_image_dm"]
          kylin.ltime = "full"
        },{
          message.topics = ["user_new", "user_active", "user_keep"]
          kylin.cubes = ["cube_ssp_user_keep_dm", "cube_ssp_user_na_dm"]
        },{
          message.topics = ["PublisherThirdIncomeForKylinReflush"]
          kylin.cubes = ["model_ssp_report_app_dm"]
        }]
      }]
      kafka.consumer {
        partitoins = [

          {
            topic = "topic_ad_fill_new"
            partition = 0
          },
          {
            topic = "topic_ad_fill_new"
            partition = 1
          },
          {
            topic = "topic_ad_fill_new"
            partition = 2
          },
          {
            topic = "topic_ad_fill_new"
            partition = 3
          },
          {
            topic = "topic_ad_fill_new"
            partition = 4
          },
          {
            topic = "topic_ad_fill_new"
            partition = 5
          },
          {
            topic = "topic_ad_fill_new"
            partition = 6
          },
          {
            topic = "topic_ad_fill_new"
            partition = 7
          }

        ]
      }
    }
//  ,
//  fill_1 {
//    class = "com.mobikok.ssp.data.streaming.module.GenericModule"
//    business.date.extract.by = "createTime"
//    commit.batch.size = 50000
//    commit.time.interval = 1800
//    dwi.enable = true
//    dwi.table = "ssp_fill_dwi"
//    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
//    dwr.enable = true
//    dwr.groupby.fields = [ {
//      expr = "publisherId", as = "publisherId"
//    }, {
//      expr = "subId", as = "subId"
//    }, {
//      expr = "countryId", as = "countryId"
//    }, {
//      expr = "carrierId", as = "carrierId"
//    },{
//      expr = "sv", as = "sv"
//    }, {
//      expr = "adType", as = "adType"
//    }, {
//      expr = "campaignId",  as = "campaignId"
//    }, {
//      expr = "offerId",     as = "offerId"
//    }, {
//      expr = "imageId",     as = "imageId"
//    }, {
//      expr = "affSub",      as = "affSub"
//    }]
//    dwr.groupby.aggs = [{
//      expr = "count(1)"
//      as ="times"
//      union = "sum(times)"
//    }]
//    dwr.include.repeated = true
//    dwr.roll.batch.size = 50000
//    dwr.table = "ssp_fill_dwr"
//    dm.kafka.enable = true
//    dm.kafka.topic = "topic_ssp_fill_dwr"
//
//    kafka.consumer {
//      partitoins = [
//        {
//          topic = "topic_ad_fill"
//          partition = 1
//        }
//      ]
//    }
//  }
//  fill_2 {
//    class = "com.mobikok.ssp.data.streaming.module.GenericModule"
//    business.date.extract.by = "createTime"
//    commit.batch.size = 50000
//    commit.time.interval = 1800
//    dwi.enable = true
//    dwi.table = "ssp_fill_dwi"
//    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
//    dwr.enable = true
//    dwr.groupby.fields = [ {
//      expr = "publisherId", as = "publisherId"
//    }, {
//      expr = "subId", as = "subId"
//    }, {
//      expr = "countryId", as = "countryId"
//    }, {
//      expr = "carrierId", as = "carrierId"
//    },{
//      expr = "sv", as = "sv"
//    }, {
//      expr = "adType", as = "adType"
//    }, {
//      expr = "campaignId",  as = "campaignId"
//    }, {
//      expr = "offerId",     as = "offerId"
//    }, {
//      expr = "imageId",     as = "imageId"
//    }, {
//      expr = "affSub",      as = "affSub"
//    }]
//    dwr.groupby.aggs = [{
//      expr = "count(1)"
//      as ="times"
//      union = "sum(times)"
//    }]
//    dwr.include.repeated = true
//    dwr.roll.batch.size = 50000
//    dwr.table = "ssp_fill_dwr"
//    dm.kafka.enable = true
//    dm.kafka.topic = "topic_ssp_fill_dwr"
//    kafka.consumer {
//      partitoins = [
//        {
//          topic = "topic_ad_fill"
//          partition = 2
//        }
//      ]
//    }
//  }
//  fill_3 {
//    class = "com.mobikok.ssp.data.streaming.module.GenericModule"
//    business.date.extract.by = "createTime"
//    commit.batch.size = 50000
//    commit.time.interval = 1800
//    dwi.enable = true
//    dwi.table = "ssp_fill_dwi"
//    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
//    dwr.enable = true
//    dwr.groupby.fields = [ {
//      expr = "publisherId", as = "publisherId"
//    }, {
//      expr = "subId", as = "subId"
//    }, {
//      expr = "countryId", as = "countryId"
//    }, {
//      expr = "carrierId", as = "carrierId"
//    },{
//      expr = "sv", as = "sv"
//    }, {
//      expr = "adType", as = "adType"
//    }, {
//      expr = "campaignId",  as = "campaignId"
//    }, {
//      expr = "offerId",     as = "offerId"
//    }, {
//      expr = "imageId",     as = "imageId"
//    }, {
//      expr = "affSub",      as = "affSub"
//    }]
//    dwr.groupby.aggs = [{
//      expr = "count(1)"
//      as ="times"
//      union = "sum(times)"
//    }]
//    dwr.include.repeated = true
//    dwr.roll.batch.size = 50000
//    dwr.table = "ssp_fill_dwr"
//    dm.kafka.enable = true
//    dm.kafka.topic = "topic_ssp_fill_dwr"
//    kafka.consumer {
//      partitoins = [
//        {
//          topic = "topic_ad_fill"
//          partition = 3
//        }
//      ]
//    }
//  }
//  fill_4 {
//    class = "com.mobikok.ssp.data.streaming.module.GenericModule"
//    business.date.extract.by = "createTime"
//    commit.batch.size = 50000
//    commit.time.interval = 1800
//    dwi.enable = true
//    dwi.table = "ssp_fill_dwi"
//    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
//    dwr.enable = true
//    dwr.groupby.fields = [ {
//      expr = "publisherId", as = "publisherId"
//    }, {
//      expr = "subId", as = "subId"
//    }, {
//      expr = "countryId", as = "countryId"
//    }, {
//      expr = "carrierId", as = "carrierId"
//    },{
//      expr = "sv", as = "sv"
//    }, {
//      expr = "adType", as = "adType"
//    }, {
//      expr = "campaignId",  as = "campaignId"
//    }, {
//      expr = "offerId",     as = "offerId"
//    }, {
//      expr = "imageId",     as = "imageId"
//    }, {
//      expr = "affSub",      as = "affSub"
//    }]
//    dwr.groupby.aggs = [{
//      expr = "count(1)"
//      as ="times"
//      union = "sum(times)"
//    }]
//    dwr.include.repeated = true
//    dwr.roll.batch.size = 50000
//    dwr.table = "ssp_fill_dwr"
//    dm.kafka.enable = true
//    dm.kafka.topic = "topic_ssp_fill_dwr"
//    dm.handler.enable = true
//    dm.handler.setting = [{
//      class = "com.mobikok.ssp.data.streaming.handler.dm.offline.KylinHandler"
//      groups = [{
//        message.topics = ["agg_fill"]
//        kylin.cubes = ["cube_agg_traffic_dm"]
//      },{
//        message.topics = ["log"]
//        kylin.cubes = ["cube_ssp_log_dm"]
//      },{
//        message.topics = ["ssp_dupscribe"]
//        kylin.cubes = ["cube_ssp_dupscribe_dm", "cube_ssp_dupscribe_detail_dm"]
//      },{
//        message.topics = ["dsp"]
//        kylin.cubes = ["cube_dsp_traffic_dm"]
//      },{
//        message.topics = ["fill", "send", "show", "click", "fee"]
//        kylin.cubes = ["cube_ssp_app_dm", "cube_ssp_offer_dm", "cube_ssp_report_campaign_dm", "cube_ssp_report_app_dm"]
//      },{
//        message.topics = ["image_show", "image_click"]
//        kylin.cubes = ["cube_ssp_image_dm"]
//        kylin.ltime = "full"
//      },{
//        message.topics = ["user_new", "user_active", "user_keep"]
//        kylin.cubes = ["cube_ssp_user_keep_dm", "cube_ssp_user_na_dm"]
//      },{
//        message.topics = ["PublisherThirdIncomeForKylinReflush"]
//        kylin.cubes = ["model_ssp_report_app_dm"]
//      }]
//    }]
//    kafka.consumer {
//      partitoins = [
//        {
//          topic = "topic_ad_fill"
//          partition = 4
//        }
//      ]
//    }
//  }

}