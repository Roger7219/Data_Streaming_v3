rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://node17:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="node30:6667,node31:6667,node32:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node30:6667,node31:6667,node32:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    auto.offset.reset = "earliest"
//    auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "node106,node107,node108"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  app.name = "s__overall_fee_backup"
  streaming.batch.buration = 300
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
//    spark.streaming.kafka.maxRatePerPartition = 500
    spark.streaming.kafka.maxRatePerPartition = 1250
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 20
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 20
    spark.kryoserializer.buffer.max=256
    spark.scheduler.mode=FAIR
//    spark.streaming.concurrentJobs = 6
  }
}
modules {

  s__overall_fee_backup {
      class = "com.mobikok.ssp.data.streaming.module.FasterModule"
//      class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
      business.time.extract.by = "reportTime"
      commit.batch.size = 1
      commit.time.interval = 1800
      dwi.uuid.enable = false
      dwi.uuid.fields = ["clickId"]
      dwi.enable = true
      dwi.table = "s__ssp_overall_fee_dwi_backup"
      dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
      dwr.enable = true
      dwr.groupby.fields = [
        {
          expr = "publisherId", as = "publisherId"
        },{
          expr = "subId",       as = "appId"
        },{
          expr = "countryId",   as = "countryId"
        },{
          expr = "carrierId",   as = "carrierId"
        },{
          expr = "sv",          as = "versionName"
        },{
          expr = "adType",      as = "adType"
        },{
          expr = "campaignId",  as = "campaignId"
        },{
          expr = "offerId",     as = "offerId"
        },{
          expr = "imageId",     as = "imageId"
        },{
          expr = "affSub",      as = "affSub"
        }, {
          expr = "packageName", as = "packageName"
        }, {
          expr = "domain",      as = "domain"
        }, {
          expr = "operatingSystem(userAgent)",        as = "operatingSystem"
        }, {
          expr = "language(userAgent)",               as = "systemLanguage"
        }, {
          expr = "machineModel(userAgent)",           as = "deviceBrand"
        }, {
          expr = "deviceType(userAgent)",             as = "deviceType"
        }, {
          expr = "browserKernel(userAgent)",          as = "browserKernel"
        }, {
          expr = "respStatus",                        as = "respStatus"
        }, {
          expr = "test",                              as = "test"
        }, {
          expr = "ruleId",                            as = "ruleId"
        }, {
          expr = "smartId",                           as = "smartId"
        }, {
          expr = "eventName",                         as = "eventName"
        }
      ]
      dwr.groupby.aggs = [
        {
          expr = "0",                as ="requestCount",   union = "sum(requestCount)"
        },{
          expr = "0",                as ="sendCount",      union = "sum(sendCount)"
        },{
          expr = "0",                as ="showCount",      union = "sum(showCount)"
        },{
          expr = "0",                as ="clickCount",     union = "sum(clickCount)"
        },{
          expr = "count(1)",         as ="feeReportCount", union = "sum(feeReportCount)"  //计费条数
        },{
          expr = "count(if(isSend = 1, 1, null))",             as ="feeSendCount",   union = "sum(feeSendCount)"    //计费显示条数
        },{
          expr = "sum( cast(reportPrice as decimal(19,10)) )", as ="feeReportPrice", union = "sum(feeReportPrice)"  //计费金额(真实收益)
        },{
          expr = "sum( cast(sendPrice as decimal(19,10)) )",   as ="feeSendPrice",   union = "sum(feeSendPrice)"    //计费显示金额(收益)
        },{
          expr = "0",                as ="cpcBidPrice",    union = "sum(cpcBidPrice)"
        },{
          expr = "0",                as ="cpmBidPrice",    union = "sum(cpmBidPrice)"
        },{
          expr = "count(1)",         as ="conversion",     union = "sum(conversion)"      //转化数，目前不要含展示和点击产生的
        },{
          expr = "count(1)",         as ="allConversion",  union = "sum(allConversion)"   //转化数，含展示和点击产生的
        },{
          expr = "sum( cast(sendPrice as decimal(19,10)) )",    as ="revenue",        union = "sum(revenue)"         //收益
        },{
          expr = "sum( cast(reportPrice as decimal(19,10)) )",  as ="realRevenue",    union = "sum(realRevenue)"     //真实收益
        },{
          expr = "count(if( priceMethod = 1,  1, null))",       as ="feeCpcTimes",    union = "sum(feeCpcTimes)"     // fee cpc转化条数
        },{
          expr = "count(if( priceMethod = 2,  1, null))",       as ="feeCpmTimes",    union = "sum(feeCpmTimes)"     // fee cpm转化条数
        },{
          expr = "count(if( priceMethod = 3,  1, null))",       as ="feeCpaTimes",    union = "sum(feeCpaTimes)"     // fee cpa转化条数
        },{
          expr = "count(if( priceMethod = 3 and isSend = 1,  1, null))",   as ="feeCpaSendTimes",    union = "sum(feeCpaSendTimes)"     // fee cpa send转化条数
        },{
          expr = "sum( cast( if( priceMethod = 1,  reportPrice, 0) as decimal(19,10) ) )", as ="feeCpcReportPrice",  union = "sum(feeCpcReportPrice)"     // fee cpc上游收益
        },{
          expr = "sum( cast( if( priceMethod = 2,  reportPrice, 0) as decimal(19,10) ) )", as ="feeCpmReportPrice",  union = "sum(feeCpmReportPrice)"     // fee cpm上游收益
        },{
          expr = "sum( cast( if( priceMethod = 3,  reportPrice, 0) as decimal(19,10) ) )", as ="feeCpaReportPrice",  union = "sum(feeCpaReportPrice)"     // fee cpa上游收益
        },{
          expr = "sum( cast( if( priceMethod = 1,  sendPrice, 0) as decimal(19,10) ) )",   as ="feeCpcSendPrice",    union = "sum(feeCpcSendPrice)"     // fee cpc下游收益
        },{
          expr = "sum( cast( if( priceMethod = 2,  sendPrice, 0) as decimal(19,10) ) )",   as ="feeCpmSendPrice",    union = "sum(feeCpmSendPrice)"     // fee cpm下游收益
        },{
          expr = "sum( cast( if( priceMethod = 3 and isSend = 1,  sendPrice, 0) as decimal(19,10) ) )",   as ="feeCpaSendPrice",    union = "sum(feeCpaSendPrice)"     // fee cpa下游收益
        },{
          expr = "0",           as ="winPrice",           union = "sum(winPrice)"     // 中签价格
        },{
          expr = "0",           as ="winNotices",         union = "sum(winNotices)"     // 中签数
        },{
          expr = "0",           as ="newCount",           union = "sum(newCount)"
        },{
          expr = "0",           as ="activeCount",        union = "sum(activeCount)"
        }
      ]
      dwr.include.repeated = false
      dwr.table = "s__ssp_report_overall_dwr_backup"
      kafka.consumer {
        partitoins = [
          {
            topic = "topic_ad_fee"
            partition = 0
          }
        ]
      }
    }

}
