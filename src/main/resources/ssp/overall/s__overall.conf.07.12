rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://node17:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="node30:6667,node31:6667,node32:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node30:6667,node31:6667,node32:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    auto.offset.reset = "earliest"
//    auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "node106,node107,node108"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  app.name = "s__overall"
  streaming.batch.buration = 300
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
//    spark.streaming.kafka.maxRatePerPartition = 2000
    spark.streaming.kafka.maxRatePerPartition = 625
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 16
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 16
    spark.kryoserializer.buffer.max=256
    spark.scheduler.mode=FAIR
//    spark.streaming.concurrentJobs = 6
  }
}
modules {

  s__overall_fill {
    class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
    business.time.extract.by = "createTime"
    commit.batch.size = 1
    commit.time.interval = 1800
    master = true
    dwi.enable = false
    dwi.table = "s__ssp_overall_fill_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
    dwr.enable = true
    dwr.groupby.fields = [
      {
        expr = "publisherId", as = "publisherId"
      },{
        expr = "subId",       as = "appId"
      },{
        expr = "countryId",   as = "countryId"
      },{
        expr = "carrierId",   as = "carrierId"
      },{
        expr = "sv",          as = "versionName"
      },{
        expr = "adType",      as = "adType"
      },{
        expr = "campaignId",  as = "campaignId"
      },{
        expr = "offerId",     as = "offerId"
      },{
        expr = "imageId",     as = "imageId"
      },{
        expr = "affSub",      as = "affSub"
      }, {
        expr = "packageName", as = "packageName"
      }, {
        expr = "domain",      as = "domain"
      }, {
        expr = "operatingSystem(userAgent)",        as = "operatingSystem"
      }, {
        expr = "language(userAgent)",               as = "systemLanguage"
      }, {
        expr = "machineModel(userAgent)",           as = "deviceBrand"
      }, {
        expr = "deviceType(userAgent)",             as = "deviceType"
      }, {
        expr = "browserKernel(userAgent)",          as = "browserKernel"
      }, {
        expr = "respStatus",                        as = "respStatus"
      }, {
        expr = "test",                              as = "test"
      }, {
        expr = "ruleId",                            as = "ruleId"
      }, {
        expr = "smartId",                           as = "smartId"
      }, {
        expr = "eventName",                         as = "eventName"
      }
    ]
    dwr.groupby.aggs = [
      {
        expr = "count(1)",          as ="requestCount",   union = "sum(requestCount)"
      },{
        expr = "0",                 as ="sendCount",      union = "sum(sendCount)"
      },{
        expr = "0",                 as ="showCount",      union = "sum(showCount)"
      },{
        expr = "0",                 as ="clickCount",     union = "sum(clickCount)"
      },{
        expr = "0",                 as ="feeReportCount", union = "sum(feeReportCount)"  //计费条数
      },{
        expr = "0",                 as ="feeSendCount",   union = "sum(feeSendCount)"    //计费显示条数
      },{
        expr = "0",                 as ="feeReportPrice", union = "sum(feeReportPrice)"  //计费金额(真实收益)
      },{
        expr = "0",                 as ="feeSendPrice",   union = "sum(feeSendPrice)"    //计费显示金额(收益)
      },{
        expr = "0",                 as ="cpcBidPrice",    union = "sum(cpcBidPrice)"
      },{
        expr = "0",                 as ="cpmBidPrice",    union = "sum(cpmBidPrice)"
      },{
        expr = "0",                 as ="conversion",     union = "sum(conversion)"      //转化数，目前不要含展示和点击产生的
      },{
        expr = "0",                 as ="allConversion",  union = "sum(allConversion)"   //转化数，含展示和点击产生的
      },{
        expr = "0",                 as ="revenue",        union = "sum(revenue)"         //收益
      },{
        expr = "0",                 as ="realRevenue",    union = "sum(realRevenue)"     //真实收益
      },{
        expr = "0",                 as ="feeCpcTimes",    union = "sum(feeCpcTimes)"     // fee cpc转化条数
      },{
        expr = "0",                 as ="feeCpmTimes",    union = "sum(feeCpmTimes)"     // fee cpm转化条数
      },{
        expr = "0",                 as ="feeCpaTimes",    union = "sum(feeCpaTimes)"     // fee cpa转化条数
      },{
        expr = "0",                 as ="feeCpaSendTimes",    union = "sum(feeCpaSendTimes)"     // fee cpa send转化条数
      },{
        expr = "0",                 as ="feeCpcReportPrice",  union = "sum(feeCpcReportPrice)"     // fee cpc上游收益
      },{
        expr = "0",                 as ="feeCpmReportPrice",  union = "sum(feeCpmReportPrice)"     // fee cpm上游收益
      },{
        expr = "0",                 as ="feeCpaReportPrice",  union = "sum(feeCpaReportPrice)"     // fee cpa上游收益
      },{
        expr = "0",                 as ="feeCpcSendPrice",    union = "sum(feeCpcSendPrice)"     // fee cpc下游收益
      },{
        expr = "0",                 as ="feeCpmSendPrice",    union = "sum(feeCpmSendPrice)"     // fee cpm下游收益
      },{
        expr = "0",                 as ="feeCpaSendPrice",    union = "sum(feeCpaSendPrice)"     // fee cpa下游收益
      },{
        expr = "0",                 as ="winPrice",           union = "sum(winPrice)"     // 中签价格
      },{
        expr = "0",                 as ="winNotices",         union = "sum(winNotices)"     // 中签数
      },{
        expr = "0",                 as ="newCount",           union = "sum(newCount)"
      },{
        expr = "0",                 as ="activeCount",        union = "sum(activeCount)"
      }
    ]
    dwr.include.repeated = true
    dwr.table = "s__ssp_report_overall_dwr"
    kafka.consumer {
      partitoins = [
        { topic = "fill_test", partition = 0},
        { topic = "fill_test", partition = 1},
        { topic = "fill_test", partition = 2},
        { topic = "fill_test", partition = 3},
        { topic = "fill_test", partition = 4},
        { topic = "fill_test", partition = 5},
        { topic = "fill_test", partition = 6},
        { topic = "fill_test", partition = 7},
        { topic = "fill_test", partition = 8},
        { topic = "fill_test", partition = 9},
        { topic = "fill_test", partition = 10},
        { topic = "fill_test", partition = 11},
        { topic = "fill_test", partition = 12},
        { topic = "fill_test", partition = 13},
        { topic = "fill_test", partition = 14},
        { topic = "fill_test", partition = 15},
        { topic = "fill_test", partition = 16},
        { topic = "fill_test", partition = 17},
        { topic = "fill_test", partition = 18},
        { topic = "fill_test", partition = 19},
        { topic = "fill_test", partition = 20},
        { topic = "fill_test", partition = 21},
        { topic = "fill_test", partition = 22},
        { topic = "fill_test", partition = 23},
        { topic = "fill_test", partition = 24},
        { topic = "fill_test", partition = 25},
        { topic = "fill_test", partition = 26},
        { topic = "fill_test", partition = 27},
        { topic = "fill_test", partition = 28},
        { topic = "fill_test", partition = 29},
        { topic = "fill_test", partition = 30},
        { topic = "fill_test", partition = 31}
      ]
    }
  }

  s__overall_fill2 {
    class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
    business.time.extract.by = "createTime"
    commit.batch.size = 1
    commit.time.interval = 1800
    dwi.enable = false
    dwi.table = "s__ssp_overall_fill_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
    dwr.enable = true
    dwr.groupby.fields = [
      {
        expr = "publisherId", as = "publisherId"
      },{
        expr = "subId",       as = "appId"
      },{
        expr = "countryId",   as = "countryId"
      },{
        expr = "carrierId",   as = "carrierId"
      },{
        expr = "sv",          as = "versionName"
      },{
        expr = "adType",      as = "adType"
      },{
        expr = "campaignId",  as = "campaignId"
      },{
        expr = "offerId",     as = "offerId"
      },{
        expr = "imageId",     as = "imageId"
      },{
        expr = "affSub",      as = "affSub"
      }, {
        expr = "packageName", as = "packageName"
      }, {
        expr = "domain",      as = "domain"
      }, {
        expr = "operatingSystem(userAgent)",        as = "operatingSystem"
      }, {
        expr = "language(userAgent)",               as = "systemLanguage"
      }, {
        expr = "machineModel(userAgent)",           as = "deviceBrand"
      }, {
        expr = "deviceType(userAgent)",             as = "deviceType"
      }, {
        expr = "browserKernel(userAgent)",          as = "browserKernel"
      }, {
        expr = "respStatus",                        as = "respStatus"
      }, {
        expr = "test",                              as = "test"
      }, {
        expr = "ruleId",                            as = "ruleId"
      }, {
        expr = "smartId",                           as = "smartId"
      }, {
        expr = "eventName",                         as = "eventName"
      }
    ]
    dwr.groupby.aggs = [
      {
        expr = "0",          as ="requestCount",   union = "sum(requestCount)"
      },{
        expr = "count(1)",                 as ="sendCount",      union = "sum(sendCount)"
      },{
        expr = "0",                 as ="showCount",      union = "sum(showCount)"
      },{
        expr = "0",                 as ="clickCount",     union = "sum(clickCount)"
      },{
        expr = "0",                 as ="feeReportCount", union = "sum(feeReportCount)"  //计费条数
      },{
        expr = "0",                 as ="feeSendCount",   union = "sum(feeSendCount)"    //计费显示条数
      },{
        expr = "0",                 as ="feeReportPrice", union = "sum(feeReportPrice)"  //计费金额(真实收益)
      },{
        expr = "0",                 as ="feeSendPrice",   union = "sum(feeSendPrice)"    //计费显示金额(收益)
      },{
        expr = "0",                 as ="cpcBidPrice",    union = "sum(cpcBidPrice)"
      },{
        expr = "0",                 as ="cpmBidPrice",    union = "sum(cpmBidPrice)"
      },{
        expr = "0",                 as ="conversion",     union = "sum(conversion)"      //转化数，目前不要含展示和点击产生的
      },{
        expr = "0",                 as ="allConversion",  union = "sum(allConversion)"   //转化数，含展示和点击产生的
      },{
        expr = "0",                 as ="revenue",        union = "sum(revenue)"         //收益
      },{
        expr = "0",                 as ="realRevenue",    union = "sum(realRevenue)"     //真实收益
      },{
        expr = "0",                 as ="feeCpcTimes",    union = "sum(feeCpcTimes)"     // fee cpc转化条数
      },{
        expr = "0",                 as ="feeCpmTimes",    union = "sum(feeCpmTimes)"     // fee cpm转化条数
      },{
        expr = "0",                 as ="feeCpaTimes",    union = "sum(feeCpaTimes)"     // fee cpa转化条数
      },{
        expr = "0",                 as ="feeCpaSendTimes",    union = "sum(feeCpaSendTimes)"     // fee cpa send转化条数
      },{
        expr = "0",                 as ="feeCpcReportPrice",  union = "sum(feeCpcReportPrice)"     // fee cpc上游收益
      },{
        expr = "0",                 as ="feeCpmReportPrice",  union = "sum(feeCpmReportPrice)"     // fee cpm上游收益
      },{
        expr = "0",                 as ="feeCpaReportPrice",  union = "sum(feeCpaReportPrice)"     // fee cpa上游收益
      },{
        expr = "0",                 as ="feeCpcSendPrice",    union = "sum(feeCpcSendPrice)"     // fee cpc下游收益
      },{
        expr = "0",                 as ="feeCpmSendPrice",    union = "sum(feeCpmSendPrice)"     // fee cpm下游收益
      },{
        expr = "0",                 as ="feeCpaSendPrice",    union = "sum(feeCpaSendPrice)"     // fee cpa下游收益
      },{
        expr = "0",                 as ="winPrice",           union = "sum(winPrice)"     // 中签价格
      },{
        expr = "0",                 as ="winNotices",         union = "sum(winNotices)"     // 中签数
      },{
        expr = "0",                 as ="newCount",           union = "sum(newCount)"
      },{
        expr = "0",                 as ="activeCount",        union = "sum(activeCount)"
      }
    ]
    dwr.include.repeated = true
    dwr.table = "s__ssp_report_overall_dwr"
    kafka.consumer {
      partitoins = [
        { topic = "fill_test", partition = 0},
        { topic = "fill_test", partition = 1},
        { topic = "fill_test", partition = 2},
        { topic = "fill_test", partition = 3},
        { topic = "fill_test", partition = 4},
        { topic = "fill_test", partition = 5},
        { topic = "fill_test", partition = 6},
        { topic = "fill_test", partition = 7},
        { topic = "fill_test", partition = 8},
        { topic = "fill_test", partition = 9},
        { topic = "fill_test", partition = 10},
        { topic = "fill_test", partition = 11},
        { topic = "fill_test", partition = 12},
        { topic = "fill_test", partition = 13},
        { topic = "fill_test", partition = 14},
        { topic = "fill_test", partition = 15},
        { topic = "fill_test", partition = 16},
        { topic = "fill_test", partition = 17},
        { topic = "fill_test", partition = 18},
        { topic = "fill_test", partition = 19},
        { topic = "fill_test", partition = 20},
        { topic = "fill_test", partition = 21},
        { topic = "fill_test", partition = 22},
        { topic = "fill_test", partition = 23},
        { topic = "fill_test", partition = 24},
        { topic = "fill_test", partition = 25},
        { topic = "fill_test", partition = 26},
        { topic = "fill_test", partition = 27},
        { topic = "fill_test", partition = 28},
        { topic = "fill_test", partition = 29},
        { topic = "fill_test", partition = 30},
        { topic = "fill_test", partition = 31}
      ]
    }
  }


  s__overall_fill3 {
    class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
    business.time.extract.by = "createTime"
    commit.batch.size = 1
    commit.time.interval = 1800
    dwi.enable = false
    dwi.table = "s__ssp_overall_fill_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
    dwr.enable = true
    dwr.groupby.fields = [
      {
        expr = "publisherId", as = "publisherId"
      },{
        expr = "subId",       as = "appId"
      },{
        expr = "countryId",   as = "countryId"
      },{
        expr = "carrierId",   as = "carrierId"
      },{
        expr = "sv",          as = "versionName"
      },{
        expr = "adType",      as = "adType"
      },{
        expr = "campaignId",  as = "campaignId"
      },{
        expr = "offerId",     as = "offerId"
      },{
        expr = "imageId",     as = "imageId"
      },{
        expr = "affSub",      as = "affSub"
      }, {
        expr = "packageName", as = "packageName"
      }, {
        expr = "domain",      as = "domain"
      }, {
        expr = "operatingSystem(userAgent)",        as = "operatingSystem"
      }, {
        expr = "language(userAgent)",               as = "systemLanguage"
      }, {
        expr = "machineModel(userAgent)",           as = "deviceBrand"
      }, {
        expr = "deviceType(userAgent)",             as = "deviceType"
      }, {
        expr = "browserKernel(userAgent)",          as = "browserKernel"
      }, {
        expr = "respStatus",                        as = "respStatus"
      }, {
        expr = "test",                              as = "test"
      }, {
        expr = "ruleId",                            as = "ruleId"
      }, {
        expr = "smartId",                           as = "smartId"
      }, {
        expr = "eventName",                         as = "eventName"
      }
    ]
    dwr.groupby.aggs = [
      {
        expr = "0",          as ="requestCount",   union = "sum(requestCount)"
      },{
        expr = "0",          as ="sendCount",      union = "sum(sendCount)"
      },{
        expr = "count(1)",   as ="showCount",      union = "sum(showCount)"
      },{
        expr = "0",                 as ="clickCount",     union = "sum(clickCount)"
      },{
        expr = "0",                 as ="feeReportCount", union = "sum(feeReportCount)"  //计费条数
      },{
        expr = "0",                 as ="feeSendCount",   union = "sum(feeSendCount)"    //计费显示条数
      },{
        expr = "0",                 as ="feeReportPrice", union = "sum(feeReportPrice)"  //计费金额(真实收益)
      },{
        expr = "0",                 as ="feeSendPrice",   union = "sum(feeSendPrice)"    //计费显示金额(收益)
      },{
        expr = "0",                 as ="cpcBidPrice",    union = "sum(cpcBidPrice)"
      },{
        expr = "0",                 as ="cpmBidPrice",    union = "sum(cpmBidPrice)"
      },{
        expr = "0",                 as ="conversion",     union = "sum(conversion)"      //转化数，目前不要含展示和点击产生的
      },{
        expr = "0",                 as ="allConversion",  union = "sum(allConversion)"   //转化数，含展示和点击产生的
      },{
        expr = "0",                 as ="revenue",        union = "sum(revenue)"         //收益
      },{
        expr = "0",                 as ="realRevenue",    union = "sum(realRevenue)"     //真实收益
      },{
        expr = "0",                 as ="feeCpcTimes",    union = "sum(feeCpcTimes)"     // fee cpc转化条数
      },{
        expr = "0",                 as ="feeCpmTimes",    union = "sum(feeCpmTimes)"     // fee cpm转化条数
      },{
        expr = "0",                 as ="feeCpaTimes",    union = "sum(feeCpaTimes)"     // fee cpa转化条数
      },{
        expr = "0",                 as ="feeCpaSendTimes",    union = "sum(feeCpaSendTimes)"     // fee cpa send转化条数
      },{
        expr = "0",                 as ="feeCpcReportPrice",  union = "sum(feeCpcReportPrice)"     // fee cpc上游收益
      },{
        expr = "0",                 as ="feeCpmReportPrice",  union = "sum(feeCpmReportPrice)"     // fee cpm上游收益
      },{
        expr = "0",                 as ="feeCpaReportPrice",  union = "sum(feeCpaReportPrice)"     // fee cpa上游收益
      },{
        expr = "0",                 as ="feeCpcSendPrice",    union = "sum(feeCpcSendPrice)"     // fee cpc下游收益
      },{
        expr = "0",                 as ="feeCpmSendPrice",    union = "sum(feeCpmSendPrice)"     // fee cpm下游收益
      },{
        expr = "0",                 as ="feeCpaSendPrice",    union = "sum(feeCpaSendPrice)"     // fee cpa下游收益
      },{
        expr = "0",                 as ="winPrice",           union = "sum(winPrice)"     // 中签价格
      },{
        expr = "0",                 as ="winNotices",         union = "sum(winNotices)"     // 中签数
      },{
        expr = "0",                 as ="newCount",           union = "sum(newCount)"
      },{
        expr = "0",                 as ="activeCount",        union = "sum(activeCount)"
      }
    ]
    dwr.include.repeated = true
    dwr.table = "s__ssp_report_overall_dwr"
    kafka.consumer {
      partitoins = [
        { topic = "fill_test", partition = 0},
        { topic = "fill_test", partition = 1},
        { topic = "fill_test", partition = 2},
        { topic = "fill_test", partition = 3},
        { topic = "fill_test", partition = 4},
        { topic = "fill_test", partition = 5},
        { topic = "fill_test", partition = 6},
        { topic = "fill_test", partition = 7},
        { topic = "fill_test", partition = 8},
        { topic = "fill_test", partition = 9},
        { topic = "fill_test", partition = 10},
        { topic = "fill_test", partition = 11},
        { topic = "fill_test", partition = 12},
        { topic = "fill_test", partition = 13},
        { topic = "fill_test", partition = 14},
        { topic = "fill_test", partition = 15},
        { topic = "fill_test", partition = 16},
        { topic = "fill_test", partition = 17},
        { topic = "fill_test", partition = 18},
        { topic = "fill_test", partition = 19},
        { topic = "fill_test", partition = 20},
        { topic = "fill_test", partition = 21},
        { topic = "fill_test", partition = 22},
        { topic = "fill_test", partition = 23},
        { topic = "fill_test", partition = 24},
        { topic = "fill_test", partition = 25},
        { topic = "fill_test", partition = 26},
        { topic = "fill_test", partition = 27},
        { topic = "fill_test", partition = 28},
        { topic = "fill_test", partition = 29},
        { topic = "fill_test", partition = 30},
        { topic = "fill_test", partition = 31}
      ]
    }
  }


}
