rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://node17:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="node30:6667,node31:6667,node32:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node30:6667,node31:6667,node32:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    auto.offset.reset = "earliest"
//    auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "node106,node107,node108"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  app.name = "cpi_click"
  streaming.batch.buration = 100
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
    spark.streaming.kafka.maxRatePerPartition = 1500
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 3
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 3
    spark.kryoserializer.buffer.max=256
    spark.scheduler.mode=FAIR
    //    spark.streaming.concurrentJobs = 6
  }
}
modules {

  cpi_click {
    class = "com.mobikok.ssp.data.streaming.module.MixModuleForBTime"
    business.time.extract.by = "createTime"
    commit.batch.size = 1
    commit.time.interval = 1800
    master = true
    dwi.enable = true
    dwi.table = "ssp_cpi_click_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
    dwr.enable = true
    dwr.groupby.fields = [
      {
        expr = "offerId",     as = "offerId"
      },{
        expr = "subId",       as = "appId"
      },{
        expr = "countryId",   as = "countryId"
      },{
        expr = "isNew",       as = "isNew"
      }
    ]
    dwr.groupby.aggs = [
      {
        expr = "count(1)",   as ="times",      union = "sum(times)"
      }
    ]
    dwr.include.repeated = true
    dwr.table = "ssp_cpi_click_dwr"
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_ad_cpi_click"
          partition = 0
        }
      ]
    }
  }

  ad_event_log {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.time.extract.by = "createTime"
    commit.batch.size = 1
    commit.time.interval = 1800
    dwi.enable = true
    dwi.table = "ad_event_log_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
    dwr.enable = false
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_ad_event_log"
          partition = 0
        }
      ]
    }
  }

  smartLink_Offer_Soldout {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "createTime"
    commit.batch.size =   0
    commit.time.interval = 0
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"

    fast.polling.enable=true
    dm.handler.enable = true
    dm.handler.setting = [{
      class = "com.mobikok.ssp.data.streaming.handler.dm.offline.SmartLinkOfferSoldoutHandler"
      rdb.url = "jdbc:mysql://192.168.111.19:3306/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
      rdb.user = "root"
      rdb.password = "@dfei$@DCcsYG"
    }]

    kafka.consumer {
      partitoins = [
        {
          topic = "topic_empty"
          partition = 0
        }
      ]
    }
  }

}
