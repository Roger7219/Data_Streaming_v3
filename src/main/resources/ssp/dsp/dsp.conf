rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://node17:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=true
  set {
    bootstrap.servers="104.250.136.138:6667,104.250.133.18:6667,104.250.130.82:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node30:6667,node31:6667,node32:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    auto.offset.reset = "earliest"
    #auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "node14,node17,node15"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  app.name = "dsp"
//  streaming.batch.buration = 1200
  streaming.batch.buration = 10
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
//    spark.streaming.kafka.maxRatePerPartition = 500
    spark.streaming.kafka.maxRatePerPartition = 50000
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 10
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize = 1024000000
    spark.sql.shuffle.partitions = 3
    spark.kryoserializer.buffer.max = 256
    //    spark.streaming.concurrentJobs = 3
  }
}
modules {

  dsp {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "from_unixtime(timestamp/1000, 'yyyy-MM-dd HH:mm:ss')"
    commit.time.interval = 1800
    commit.batch.size = 1
    dwi.enable = true
    dwi.table = "dsp_traffic_dwi"
    dwi.kafka.proto.enable = true
    dwi.kafka.proto.class = "com.mobikok.idl.model.SspEvent$Event"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.DspTrafficDWISchema"
    dwr.enable = true
    dwr.groupby.fields = [{
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.publisher_id
                    WHEN 'SEND'       THEN send.request.publisher_id
                    WHEN 'WINNOTICE'  THEN win_notice.request.publisher_id
                    WHEN 'IMPRESSION' THEN impression.request.publisher_id
                    END""", as = "publisherId"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.app_id
                    WHEN 'SEND'       THEN send.request.app_id
                    WHEN 'WINNOTICE'  THEN win_notice.request.app_id
                    WHEN 'IMPRESSION' THEN impression.request.app_id
                    END""", as = "appId"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.trade.dsp_id
                    WHEN 'SEND'       THEN send.trade.dsp_id
                    WHEN 'WINNOTICE'  THEN win_notice.trade.dsp_id
                    WHEN 'IMPRESSION' THEN impression.trade.dsp_id
                    END""", as = "dspId"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.country_id
                    WHEN 'SEND'       THEN send.request.country_id
                    WHEN 'WINNOTICE'  THEN win_notice.request.country_id
                    WHEN 'IMPRESSION' THEN impression.request.country_id
                    END""", as = "countryId"
    }, {
      expr = """CASE event_type
                    WHEN 'REQUEST'    THEN request.request.carrier_id
                    WHEN 'SEND'       THEN send.request.carrier_id
                    WHEN 'WINNOTICE'  THEN win_notice.request.carrier_id
                    WHEN 'IMPRESSION' THEN impression.request.carrier_id
                    END""", as = "carrierId"
    },{
      expr = """from_unixtime(floor(`timestamp`/1000), 'yyyy-MM-dd')""", as = "cstDay"
    }, {
      expr = """from_unixtime(floor(`timestamp`/1000) - 8*60*60, 'yyyy-MM-dd')""", as = "utcDay"
    }]
    dwr.groupby.aggs = [{
      expr = """sum(CASE event_type
                    WHEN 'REQUEST'    THEN 1
                    WHEN 'SEND'       THEN 0
                    WHEN 'WINNOTICE'  THEN 0
                    WHEN 'IMPRESSION' THEN 0
                    END )"""
      as = "requests"
      union = "sum(requests)"
    }, {
      expr = """sum(CASE event_type
                    WHEN 'REQUEST'    THEN 0
                    WHEN 'SEND'       THEN 1
                    WHEN 'WINNOTICE'  THEN 0
                    WHEN 'IMPRESSION' THEN 0
                    END)"""
      as = "sends"
      union = "sum(sends)"
    }, {
      expr = """sum(CASE event_type
                    WHEN 'REQUEST'    THEN 0
                    WHEN 'SEND'       THEN 0
                    WHEN 'WINNOTICE'  THEN 1
                    WHEN 'IMPRESSION' THEN 0
                    END)"""
      as = "winNotices"
      union = "sum(winNotices)"
    }, {
      expr = """sum(CASE event_type
                    WHEN 'REQUEST'    THEN 0
                    WHEN 'SEND'       THEN 0
                    WHEN 'WINNOTICE'  THEN 0
                    WHEN 'IMPRESSION' THEN 1
                    END)"""
      as = "impressions"
      union = "sum(impressions)"
    }, {
      expr = "0"
      as = "clicks"
      union = "sum(clicks)"
    }, {
      expr = """sum(CASE event_type
                    WHEN 'IMPRESSION'
                    THEN CASE impression.trade.deal_type
                        WHEN 'CPM'
                        THEN CAST(impression.trade.media_price AS DECIMAL(19,10))/1000
                        ELSE impression.trade.media_price
                        END
                    END)"""
      as = "mediaCost"
      union = "sum(mediaCost)"
    }, {
      expr = """sum(CAST(CASE event_type
        WHEN 'IMPRESSION'
        THEN CASE impression.trade.deal_type
            WHEN 'CPM'
            THEN CAST(impression.trade.clear_price AS DECIMAL(19,10))/1000
            ELSE impression.trade.clear_price
            END
        END AS DECIMAL(19,10))
        -
        CAST(CASE event_type
            WHEN 'IMPRESSION'
            THEN CASE impression.trade.deal_type
                WHEN 'CPM'
                THEN CAST(impression.trade.media_price AS DECIMAL(19,10))/1000
                ELSE impression.trade.media_price
                END
            END AS DECIMAL(19,10)
        ))"""
      as = "sspRevenue"
      union  = "sum(sspRevenue)"
    }, {
      expr = """sum(CASE event_type
            WHEN 'IMPRESSION'
            THEN CASE impression.trade.deal_type
                WHEN 'CPM'
                THEN CAST(impression.trade.clear_price AS DECIMAL(19,10))/1000
                ELSE impression.trade.clear_price
                END
            END)"""
      as = "clearPrice"
      union = "sum(clearPrice)"
    }]
    dwr.include.repeated = true
    dwr.table = "dsp_traffic_dwr"
    dm.greenplum.enable = false
    dm.greenplum.hive.view="dsp_traffic_dm"
    kafka.consumer {
      partitoins = [
        {
          topic = "ssp-info-7"
          partition = 0
        }
      ]
      set {
        key.deserializer = "org.apache.kafka.common.serialization.ByteArrayDeserializer"
        value.deserializer = "org.apache.kafka.common.serialization.ByteArrayDeserializer"
      }
    }
  }
}