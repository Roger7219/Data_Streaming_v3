rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://node17:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="node30:6667,node31:6667,node32:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node30:6667,node31:6667,node32:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    //    auto.offset.reset = "earliest"
    auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}

hbase {
  transactional {
    tables = ["uuid.stat"]
  }
  set {
    hbase.zookeeper.quorum = "node14,node17,node15"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  app.name = "ssp_publisher"
  streaming.batch.buration = 600
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
//    spark.streaming.kafka.maxRatePerPartition = 1000
    spark.streaming.kafka.maxRatePerPartition = 1000
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 10
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 3
    spark.kryoserializer.buffer.max=256
        spark.streaming.concurrentJobs = 8
  }
}
modules {

  // ===================================== total cost ============================================
    pub_totalcost_fee {
      class = "com.mobikok.ssp.data.streaming.module.MixModule"
      //统计总量,精确到月
      business.date.extract.by = "date_format(dwrBusinessDate, 'yyyy-MM-01')"
      commit.batch.size = 1
      commit.time.interval = 1800
      master = true
      dwi.fields.extended=[]
      dwi.uuid.enable = false
      dwi.uuid.stat.hbase.table = ""
      dwi.uuid.fields = [""]
      dwi.uuid.alias = "rowkey"
      dwi.enable = false
      dwi.table = ""
      dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.SspFeeDWRSchema"
      dwr.enable = true
      dwr.load.time.format.by = "yyyy-MM-01 00:00:00"
      dwr.groupby.fields = [{
        expr = "publisherId", as = "publisherId"
      }]
//      f.sendPrice as revenue,       --收益
//      f.reportPrice as realRevenue, --真实收益
      dwr.groupby.aggs = [{
        expr = "sum(sendPrice)"
        as ="monthSendRevenue"
        union = "sum(monthSendRevenue)"
      }, {
        expr = "sum(reportPrice)"
        as ="monthRevenue"
        union = "sum(monthRevenue)"
      }]
      dwr.groupby.extended.fields=[]
      dwr.groupby.extended.aggs = []
      dwr.include.repeated = true
      dwr.table = "ssp_publisher_totalcost_dwr"
      dm.kafka.enable = false
      dm.kafka.topic = ""
      dm.phoenix.enable = false
      dm.phoenix.table  = ""
      dm.phoenix.hbase.storable.class = ""
      kafka.consumer {
        partitoins = [
          {
            topic = "topic_ssp_fee_dwr"
            partition = 0
          }
          //          ,
          //          {
          //            topic = "topic_ssp_click_dwr"
          //            partition = 0
          //          }
        ]
        set {
          bootstrap.servers = "node30:6667,node31:6667,node32:6667"
          key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          #?
          group.id = "pub_totalcost_fee_topic_ssp_fee_dwr_group1"
          auto.offset.reset = "earliest"
          #auto.offset.reset = "latest"
          enable.auto.commit = "false"
          request.timeout.ms = 2000
          session.timeout.ms = 1500
          heartbeat.interval.ms = 1000
        }
      }
    }
    pub_totalcost_cpc {
      class = "com.mobikok.ssp.data.streaming.module.MixModule"
      //统计总量,精确到月
      business.date.extract.by = "date_format(dwrBusinessDate, 'yyyy-MM-01')"
      commit.batch.size = 1
      commit.time.interval = 1800
      dwi.fields.extended=[]
      dwi.uuid.enable = false
      dwi.uuid.stat.hbase.table = ""
      dwi.uuid.fields = [""]
      dwi.uuid.alias = "rowkey"
      dwi.enable = false
      dwi.table = ""
      dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.SspClickDWRSchema"
      dwr.enable = true
      dwr.load.time.format.by = "yyyy-MM-01 00:00:00"
      dwr.groupby.fields = [{
        expr = "publisherId", as = "publisherId"
      }]
//      c.cpcSendPrice as revenue,     --收益
//      c.cpcBidPrice as realRevenue, --真实收益
      dwr.groupby.aggs = [{
        expr = "sum(cpcSendPrice)"
        as ="monthSendRevenue"
        union = "sum(monthSendRevenue)"
      }, {
        expr = "sum(cpcBidPrice)"
        as ="monthRevenue"
        union = "sum(monthRevenue)"
      }]
      dwr.groupby.extended.fields=[]
      dwr.groupby.extended.aggs = []
      dwr.include.repeated = true
      dwr.table = "ssp_publisher_totalcost_dwr"
      dm.kafka.enable = false
      dm.kafka.topic = ""
      dm.phoenix.enable = false
      dm.phoenix.table  = ""
      dm.phoenix.hbase.storable.class = ""
      kafka.consumer {
        partitoins = [
          {
            topic = "topic_ssp_click_dwr"
            partition = 0
          }
          //          ,
          //          {
          //            topic = "topic_ssp_click_dwr"
          //            partition = 0
          //          }
        ]
        set {
          bootstrap.servers = "node30:6667,node31:6667,node32:6667"
          key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          #?
          group.id = "pub_totalcost_cpc_topic_ssp_click_dwr_group1"
          auto.offset.reset = "earliest"
          #auto.offset.reset = "latest"
          enable.auto.commit = "false"
          request.timeout.ms = 2000
          session.timeout.ms = 1500
          heartbeat.interval.ms = 1000
        }
      }
    }
    pub_totalcost_cpm {
      class = "com.mobikok.ssp.data.streaming.module.MixModule"
      //统计总量,精确到月
      business.date.extract.by = "date_format(dwrBusinessDate, 'yyyy-MM-01')"
      commit.batch.size = 1
      commit.time.interval = 1800
      dwi.fields.extended=[]
      dwi.uuid.enable = false
      dwi.uuid.stat.hbase.table = ""
      dwi.uuid.fields = [""]
      dwi.uuid.alias = "rowkey"
      dwi.enable = false
      dwi.table = ""
      dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.SspShowDWRSchema"
      dwr.enable = true
      dwr.load.time.format.by = "yyyy-MM-01 00:00:00"
      dwr.groupby.fields = [{
        expr = "publisherId", as = "publisherId"
      }]
      dwr.groupby.aggs = [{
        expr = "sum(cpmSendPrice)"
        as ="monthSendRevenue"
        union = "sum(monthSendRevenue)"
      }, {
        expr = "sum(cpmBidPrice)"
        as ="monthRevenue"
        union = "sum(monthRevenue)"
      }]
      dwr.groupby.extended.fields=[]
      dwr.groupby.extended.aggs = []
      dwr.include.repeated = true
      dwr.table = "ssp_publisher_totalcost_dwr"
      dm.kafka.enable = false
      dm.kafka.topic = ""
      dm.phoenix.enable = false
      dm.phoenix.table  = ""
      dm.phoenix.hbase.storable.class = ""
      kafka.consumer {
        partitoins = [
          {
            topic = "topic_ssp_show_dwr"
            partition = 0
          }
          //          ,
          //          {
          //            topic = "topic_ssp_click_dwr"
          //            partition = 0
          //          }
        ]
        set {
          bootstrap.servers = "node30:6667,node31:6667,node32:6667"
          key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          #?
          group.id = "pub_totalcost_cpm_topic_ssp_show_dwr_group1"
          auto.offset.reset = "earliest"
          #auto.offset.reset = "latest"
          enable.auto.commit = "false"
          request.timeout.ms = 2000
          session.timeout.ms = 1500
          heartbeat.interval.ms = 1000
        }
      }
    }
  // ===================================== day cost/showCount/clickCount ============================================
    pub_day_fee {
      class = "com.mobikok.ssp.data.streaming.module.MixModule"
      //取日期部分
      business.date.extract.by = "dwrBusinessDate"
      commit.batch.size = 1
      commit.time.interval = 1800
      dwi.fields.extended=[]
      dwi.uuid.enable = false
      dwi.uuid.stat.hbase.table = ""
      dwi.uuid.fields = [""]
      dwi.uuid.alias = "rowkey"
      dwi.enable = false
      dwi.table = ""
      dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.SspFeeDWRSchema"
      dwr.enable = true
      dwr.groupby.fields = [{
        expr = "publisherId", as = "publisherId"
      }]
      dwr.groupby.aggs = [{
        expr = "sum(sendPrice)"
        as ="todaySendRevenue"
        union = "sum(todaySendRevenue)"
      }, {
        expr = "sum(reportPrice)"
        as ="todayRevenue"
        union = "sum(todayRevenue)"
      }]
      dwr.groupby.extended.fields=[]
      dwr.groupby.extended.aggs = []
      dwr.include.repeated = true
      dwr.table = "ssp_publisher_daily_dwr"
      dm.kafka.enable = false
      dm.kafka.topic = ""
      dm.phoenix.enable = false
      dm.phoenix.table  = ""
      dm.phoenix.hbase.storable.class = ""
      kafka.consumer {
        partitoins = [
          {
            topic = "topic_ssp_fee_dwr"
            partition = 0
          }
        ]
        set {
          bootstrap.servers = "node30:6667,node31:6667,node32:6667"
          key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          #?
          group.id = "pub_day_fee_topic_ssp_fee_dwr_group1"
          auto.offset.reset = "earliest"
          #auto.offset.reset = "latest"
          enable.auto.commit = "false"
          request.timeout.ms = 2000
          session.timeout.ms = 1500
          heartbeat.interval.ms = 1000
        }
      }
    }
    pub_day_clickcount_cpccost {
      class = "com.mobikok.ssp.data.streaming.module.MixModule"
      //取日期部分
      business.date.extract.by = "dwrBusinessDate"
      commit.batch.size = 1
      commit.time.interval = 1800
      dwi.fields.extended=[]
      dwi.uuid.enable = false
      dwi.uuid.stat.hbase.table = ""
      dwi.uuid.fields = [""]
      dwi.uuid.alias = "rowkey"
      dwi.enable = false
      dwi.table = ""
      dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.SspClickDWRSchema"
      dwr.enable = true
      dwr.groupby.fields = [{
        expr = "publisherId", as = "publisherId"
      }]
      dwr.groupby.aggs = [{
        expr = "sum(cpcSendPrice)"
        as ="todaySendRevenue"
        union = "sum(todaySendRevenue)"
      }, {
        expr = "sum(cpcBidPrice)"
        as ="todayRevenue"
        union = "sum(todayRevenue)"
      }]
      dwr.groupby.extended.fields=[]
      dwr.groupby.extended.aggs = []
      dwr.include.repeated = true
      dwr.table = "ssp_publisher_daily_dwr"
      dm.kafka.enable = false
      dm.kafka.topic = ""
      dm.phoenix.enable = false
      dm.phoenix.table  = ""
      dm.phoenix.hbase.storable.class = ""
      kafka.consumer {
        partitoins = [
          {
            topic = "topic_ssp_click_dwr"
            partition = 0
          }
        ]
        set {
          bootstrap.servers = "node30:6667,node31:6667,node32:6667"
          key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          #?
          group.id = "pub_day_clickcount_cpccost_topic_ssp_click_dwr_group1"
          auto.offset.reset = "earliest"
          #auto.offset.reset = "latest"
          enable.auto.commit = "false"
          request.timeout.ms = 2000
          session.timeout.ms = 1500
          heartbeat.interval.ms = 1000
        }
      }
    }
    pub_day_showcount_cpmcost {
      class = "com.mobikok.ssp.data.streaming.module.MixModule"
      //取日期部分
      business.date.extract.by = "dwrBusinessDate"
      master = true
      commit.batch.size = 1
      commit.time.interval = 1800
      dwi.fields.extended=[]
      dwi.uuid.enable = false
      dwi.uuid.stat.hbase.table = ""
      dwi.uuid.fields = [""]
      dwi.uuid.alias = "rowkey"
      dwi.enable = false
      dwi.table = ""
      dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.SspShowDWRSchema"
      dwr.enable = true
      dwr.groupby.fields = [{
        expr = "publisherId", as = "publisherId"
      }]
      dwr.groupby.aggs = [{
        expr = "sum(cpmSendPrice)"
        as ="todaySendRevenue"
        union = "sum(todaySendRevenue)"
      }, {
        expr = "sum(cpmBidPrice)"
        as ="todayRevenue"
        union = "sum(todayRevenue)"
      }]
      dwr.groupby.extended.fields=[]
      dwr.groupby.extended.aggs = []
      dwr.include.repeated = true
      dwr.table = "ssp_publisher_daily_dwr"
      dm.kafka.enable = false
      dm.kafka.topic = ""
      dm.phoenix.enable = false
      dm.phoenix.table  = ""
      dm.phoenix.hbase.storable.class = ""
      dm.handler.enable = true
      dm.handler.setting = [{
        class = "com.mobikok.ssp.data.streaming.handler.dm.PublisherHandler"
//        dwr.daily.table = "ssp_publisher_daily_dwr"
//        dwr.totalcost.table = "ssp_publisher_totalcost_dwr"
        //        TEST
//        rdb.url = "jdbc:mysql://node17:3306/kok_ssp?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
//        rdb.user = "root"
//        rdb.password = "root_root"
//        PRO
        rdb.url = "jdbc:mysql://192.168.111.22:4000/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
        rdb.user = "root"
        rdb.password = "@dfei$@DCcsYG"
      }
//      ,
//      {
//        class = "com.mobikok.ssp.data.streaming.handler.dm.SyncMysql2HiveHandler"
//        tables = [{
//            mysql="ADVERTISER",hive="ADVERTISER",isIncr = true
//          },
//          {
//            mysql="EMPLOYEE",hive="EMPLOYEE",isIncr = true
//          },
//          {
//            mysql="EMPLOYEE",hive="ADVERTISER_AM",isIncr = true
//          },
//          {
//            mysql="CAMPAIGN",hive="CAMPAIGN",isIncr = true
//          },
//          {
//            mysql="OFFER",hive="OFFER", isIncr = false
//          },
//          {
//            mysql="PUBLISHER",hive="PUBLISHER",isIncr = true
//          },
//          {
//            mysql="APP",hive="APP",isIncr = true
//          },
//          {
//            mysql="COUNTRY",hive="COUNTRY",isIncr = true
//          },
//          {
//            mysql="CARRIER",hive="CARRIER",isIncr = true
//          },
//          {
//            mysql="IMAGE_INFO",hive="IMAGE_INFO",isIncr = true
//          },
//          {
//            mysql="VERSION_CONTROL",hive="VERSION_CONTROL",isIncr = true
//          },
//          {
//            mysql="JAR_CONFIG",hive="JAR_CONFIG",isIncr = true
//          },
//          {
//            mysql="JAR_CUSTOMER",hive="JAR_CUSTOMER",isIncr = true
//          }
//        ]
//        //        PRO
//        rdb.url = "jdbc:mysql://104.250.131.130:8904/kok_ssp?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
//        rdb.user = "root"
//        rdb.password = "@dfei$@DCcsYG"
//
//      }
      ]
      kafka.consumer {
        partitoins = [
          {
            topic = "topic_ssp_show_dwr"
            partition = 0
          }
        ]
        set {
          bootstrap.servers = "node30:6667,node31:6667,node32:6667"
          key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          #?
          group.id = "pub_day_showcount_cpmcost_topic_topic_ssp_show_dwr_group1"
          auto.offset.reset = "earliest"
          #auto.offset.reset = "latest"
          enable.auto.commit = "false"
          request.timeout.ms = 2000
          session.timeout.ms = 1500
          heartbeat.interval.ms = 1000
        }
      }
    }
}