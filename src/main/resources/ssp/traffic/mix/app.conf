rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://node17:10000/default"
}
message.client.url="http://node14:5555/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="node30:6667,node31:6667,node32:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "node14,node17,node15"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  app.name = "ssp_traffic_app"
  streaming.batch.buration = 100
//  streaming.batch.buration = 50
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
//    spark.streaming.kafka.maxRatePerPartition = 2000
    spark.streaming.kafka.maxRatePerPartition = 5000
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 10
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 3
    spark.kryoserializer.buffer.max=256
    //    spark.streaming.concurrentJobs = 3
  }
}
modules {

  // ------------------------- APP month-------------------------
    app_totalcost_fee {
      class = "com.mobikok.ssp.data.streaming.module.MixModule"
      //统计总量,精确到月
      business.date.extract.by = "date_format(dwrBusinessDate, 'yyyy-MM-01')"
      commit.batch.size = 1
      commit.time.interval = 1800
      dwi.fields.extended=[]
      dwi.uuid.enable = false
      dwi.uuid.stat.hbase.table = ""
      dwi.uuid.fields = []
      dwi.uuid.alias = "rowkey"
      dwi.enable = false
      dwi.table = ""
      dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.SspFeeDWRSchema"
      dwr.enable = true
      dwr.l_time.format = "yyyy-MM-01 00:00:00"
      dwr.groupby.fields = [{
        expr = "subId", as = "appId"
      }]
      dwr.groupby.aggs = [{
        expr = "sum(reportPrice)"
        as ="cost"
        union = "sum(cost)"
      }]
      dwr.groupby.extended.fields=[]
      dwr.groupby.extended.aggs = []
      dwr.include.repeated = true
      dwr.table = "ssp_app_totalcost_dwr"
      dm.kafka.enable = false
      dm.kafka.topic = ""
      dm.phoenix.enable = false
      dm.phoenix.table  = ""
      dm.phoenix.hbase.storable.class = ""
      kafka.consumer {
        partitoins = [
          {
            topic = "topic_ssp_fee_dwr"
            partition = 0
          }
        ]
        set {
          bootstrap.servers = "node30:6667,node31:6667,node32:6667"
          key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          #?
          group.id = "app_totalcost_fee_topic_ssp_fee_dwr_group1"
          auto.offset.reset = "earliest"
          #auto.offset.reset = "latest"
          enable.auto.commit = "false"
          request.timeout.ms = 2000
          session.timeout.ms = 1500
          heartbeat.interval.ms = 1000
        }
      }
    }
    app_totalcost_show {
      class = "com.mobikok.ssp.data.streaming.module.MixModule"
      //统计总量,精确到月
      business.date.extract.by = "date_format(dwrBusinessDate, 'yyyy-MM-01')"
      commit.batch.size = 1
      commit.time.interval = 1800
      dwi.fields.extended=[]
      dwi.uuid.enable = false
      dwi.uuid.stat.hbase.table = ""
      dwi.uuid.fields = [""]
      dwi.uuid.alias = "rowkey"
      dwi.enable = false
      dwi.table = ""
      dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.SspShowDWRSchema"
      dwr.enable = true
      dwr.l_time.format = "yyyy-MM-01 00:00:00"
      dwr.groupby.fields = [{
        expr = "subId", as = "appId"
      }]
      dwr.groupby.aggs = [{
        expr = "sum(cpmBidPrice)"
        as ="cost"
        union = "sum(cost)"
      }]
      dwr.groupby.extended.fields=[]
      dwr.groupby.extended.aggs = []
      dwr.include.repeated = true
      dwr.table = "ssp_app_totalcost_dwr"
      dm.kafka.enable = false
      dm.kafka.topic = ""
      dm.phoenix.enable = false
      dm.phoenix.table  = ""
      dm.phoenix.hbase.storable.class = ""
      kafka.consumer {
        partitoins = [
          {
            topic = "topic_ssp_show_dwr"
            partition = 0
          }
        ]
        set {
          bootstrap.servers = "node30:6667,node31:6667,node32:6667"
          key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          #?
          group.id = "app_show_topic_ssp_show_dwr_group1"
          auto.offset.reset = "earliest"
          #auto.offset.reset = "latest"
          enable.auto.commit = "false"
          request.timeout.ms = 2000
          session.timeout.ms = 1500
          heartbeat.interval.ms = 1000
        }
      }
    }
    app_totalcost_click {
      class = "com.mobikok.ssp.data.streaming.module.MixModule"
      //统计总量,精确到月
      business.date.extract.by = "date_format(dwrBusinessDate, 'yyyy-MM-01')"
      commit.batch.size = 1
      commit.time.interval = 1800
      master = true
      dwi.fields.extended=[]
      dwi.uuid.enable = false
      dwi.uuid.stat.hbase.table = ""
      dwi.uuid.fields = [""]
      dwi.uuid.alias = "rowkey"
      dwi.enable = false
      dwi.table = ""
      dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.SspClickDWRSchema"
      dwr.enable = true
      dwr.l_time.format = "yyyy-MM-01 00:00:00"
      dwr.groupby.fields = [{
        expr = "subId", as = "appId"
      }]
      dwr.groupby.aggs = [{
        expr = "sum(cpcBidPrice)"
        as ="cost"
        union = "sum(cost)"
      }]
      dwr.groupby.extended.fields=[]
      dwr.groupby.extended.aggs = []
      dwr.include.repeated = true
      dwr.table = "ssp_app_totalcost_dwr"
      dm.kafka.enable = false
      dm.kafka.topic = ""
      dm.phoenix.enable = false
      dm.phoenix.table  = ""
      dm.phoenix.hbase.storable.class = ""
      dm.handler.enable = true
      dm.handler.setting = [{
        class = "com.mobikok.ssp.data.streaming.handler.dm.AppHandler"
        //        TEST
//        rdb {
////          url = "jdbc:mysql://node17:3306/kok_ssp?rewriteBatchedStatements=true&autoReconnect=true&useUnicode=true&characterEncoding=utf8"
////          user = "root"
////          password = "root_root"
//
//            url = "jdbc:mysql://192.168.111.22:4000/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
//            user = "root"
//            password = "@dfei$@DCcsYG"
//        }
        //        PRO
        rdb.url = "jdbc:mysql://192.168.111.22:4000/kok_ssp?autoReconnect=true&useUnicode=true&characterEncoding=UTF-8"
        rdb.user = "root"
        rdb.password = "@dfei$@DCcsYG"
      }]
      kafka.consumer {
        partitoins = [
          {
            topic = "topic_ssp_click_dwr"
            partition = 0
          }
        ]
        set {
          bootstrap.servers = "node30:6667,node31:6667,node32:6667"
          key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          #?
          group.id = "app_totalcost_click_topic_ssp_click_dwr_group1"
          auto.offset.reset = "earliest"
          #auto.offset.reset = "latest"
          enable.auto.commit = "false"
          request.timeout.ms = 2000
          session.timeout.ms = 1500
          heartbeat.interval.ms = 1000
        }
      }
    }

  // ------------------------- APP day-------------------------
    app_fee {
      class = "com.mobikok.ssp.data.streaming.module.MixModule"
      //统计总量,精确到月
      business.date.extract.by = "dwrBusinessDate"
      commit.batch.size = 1
      commit.time.interval = 1800
      master = true
      dwi.fields.extended=[]
      dwi.uuid.enable = false
      dwi.uuid.stat.hbase.table = ""
      dwi.uuid.fields = []
      dwi.uuid.alias = "rowkey"
      dwi.enable = false
      dwi.table = ""
      dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.SspFeeDWRSchema"
      dwr.enable = true
      dwr.groupby.fields = [{
        expr = "publisherId", as = "publisherId"
      }, {
        expr = "subId", as = "appId"
      }]
      dwr.groupby.aggs = [{
        expr = "0",                as ="sendCount",       union = "sum(sendCount)"
      },{
        expr = "0",                as ="showCount",       union = "sum(showCount)"
      }, {
        expr = "0",                as ="clickCount",      union = "sum(clickCount)"
      }, {
        //--计费条数(转化数)
        expr = "sum(times)",       as ="conversion",      union = "sum(conversion)"
      }, {
        //计费显示条数
        expr = "sum(sendTimes)",   as ="sendsConversion", union = "sum(sendsConversion)"
      },  {
        //计费金额(真实收益)
        expr = "sum(reportPrice)", as ="cost",            union = "sum(cost)"
      }, {
        //计费显示金额(收益)
        expr = "sum(sendPrice)",   as ="sendsCost",       union = "sum(sendsCost)"
      }]
      dwr.groupby.extended.fields=[]
      dwr.groupby.extended.aggs = []
      dwr.include.repeated = true
      dwr.table = "ssp_app_dwr"
      dm.kafka.enable = false
      dm.kafka.topic = ""
      dm.phoenix.enable = false
      dm.phoenix.table  = ""
      dm.phoenix.hbase.storable.class = ""
      kafka.consumer {
        partitoins = [
          {
            topic = "topic_ssp_fee_dwr"
            partition = 0
          }
        ]
        set {
          bootstrap.servers = "node30:6667,node31:6667,node32:6667"
          key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          #?
          group.id = "app_fee_topic_ssp_fee_dwr_group1"
          auto.offset.reset = "earliest"
          #auto.offset.reset = "latest"
          enable.auto.commit = "false"
          request.timeout.ms = 2000
          session.timeout.ms = 1500
          heartbeat.interval.ms = 1000
        }
      }
    }
    app_click {
      class = "com.mobikok.ssp.data.streaming.module.MixModule"
      //统计总量,精确到月
      business.date.extract.by = "dwrBusinessDate"
      commit.batch.size = 1
      commit.time.interval = 1800
      dwi.fields.extended=[]
      dwi.uuid.enable = false
      dwi.uuid.stat.hbase.table = ""
      dwi.uuid.fields = []
      dwi.uuid.alias = "rowkey"
      dwi.enable = false
      dwi.table = ""
      dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.SspClickDWRSchema"
      dwr.enable = true
      dwr.groupby.fields = [{
        expr = "publisherId", as = "publisherId"
      }, {
        expr = "subId", as = "appId"
      }]
      dwr.groupby.aggs = [{
        expr = "0",                 as ="sendCount",       union = "sum(sendCount)"
      }, {
        expr = "0",                 as ="showCount",       union = "sum(showCount)"
      }, {
        expr = "sum(times)",        as ="clickCount",      union = "sum(clickCount)"
      }, {
        //--计费条数(转化数)
        //"sum(cpcTimes)" 目前不包含cpcTimes
        expr = "0",                 as ="conversion",      union = "sum(conversion)"
      }, {
        //计费显示条数
        expr = "0",                 as ="sendsConversion", union = "sum(sendsConversion)"
      },  {
        //计费金额(真实收益)
        expr = "sum(cpcBidPrice)",  as ="cost",            union = "sum(cost)"
      }, {
        //计费显示金额(收益)
        expr = "sum(cpcSendPrice)", as ="sendsCost",       union = "sum(sendsCost)"
      }]
      dwr.groupby.extended.fields=[]
      dwr.groupby.extended.aggs = []
      dwr.include.repeated = true
      dwr.table = "ssp_app_dwr"
      dm.greenplum.enable = false
      dm.greenplum.hive.view = "ssp_app_dm"
      dm.kafka.enable = false
      dm.kafka.topic = ""
      dm.phoenix.enable = false
      dm.phoenix.table  = ""
      dm.phoenix.hbase.storable.class = ""
      kafka.consumer {
        partitoins = [
          {
            topic = "topic_ssp_click_dwr"
            partition = 0
          }
        ]
        set {
          bootstrap.servers = "node30:6667,node31:6667,node32:6667"
          key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          #?
          group.id = "app_click_topic_ssp_click_dwr_group1"
          auto.offset.reset = "earliest"
          #auto.offset.reset = "latest"
          enable.auto.commit = "false"
          request.timeout.ms = 2000
          session.timeout.ms = 1500
          heartbeat.interval.ms = 1000
        }
      }
    }
    app_show {
      class = "com.mobikok.ssp.data.streaming.module.MixModule"
      //统计总量,精确到月
      business.date.extract.by = "dwrBusinessDate"
      commit.batch.size = 1
      commit.time.interval = 1800
      dwi.fields.extended=[]
      dwi.uuid.enable = false
      dwi.uuid.stat.hbase.table = ""
      dwi.uuid.fields = []
      dwi.uuid.alias = "rowkey"
      dwi.enable = false
      dwi.table = ""
      dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.SspShowDWRSchema"
      dwr.enable = true
      dwr.groupby.fields = [{
        expr = "publisherId", as = "publisherId"
      }, {
        expr = "subId", as = "appId"
      }]
      dwr.groupby.aggs = [{
        expr = "0",                 as ="sendCount",       union = "sum(sendCount)"
      }, {
        expr = "sum(times)",        as ="showCount",       union = "sum(showCount)"
      }, {
        expr = "0",                 as ="clickCount",      union = "sum(clickCount)"
      }, {
        //--计费条数(转化数)
        //"sum(cpmTimes)" 目前不包含cpmTimes
        expr = "0",                 as ="conversion",      union = "sum(conversion)"
      }, {
        //计费显示条数
        expr = "0",                 as ="sendsConversion", union = "sum(sendsConversion)"
      }, {
        //计费金额(真实收益)
        expr = "sum(cpmBidPrice)",  as ="cost",            union = "sum(cost)"
      }, {
        //计费显示金额(收益)
        expr = "sum(cpmSendPrice)", as ="sendsCost",       union = "sum(sendsCost)"
      }]
      dwr.groupby.extended.fields=[]
      dwr.groupby.extended.aggs = []
      dwr.include.repeated = true
      dwr.table = "ssp_app_dwr"
      dm.kafka.enable = false
      dm.kafka.topic = ""
      dm.phoenix.enable = false
      dm.phoenix.table  = ""
      dm.phoenix.hbase.storable.class = ""
      kafka.consumer {
        partitoins = [
          {
            topic = "topic_ssp_show_dwr"
            partition = 0
          }
        ]
        set {
          bootstrap.servers = "node30:6667,node31:6667,node32:6667"
          key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          #?
          group.id = "app_show_topic_ssp_show_dwr_group1"
          auto.offset.reset = "earliest"
          #auto.offset.reset = "latest"
          enable.auto.commit = "false"
          request.timeout.ms = 2000
          session.timeout.ms = 1500
          heartbeat.interval.ms = 1000
        }
      }
    }
    app_send {
      class = "com.mobikok.ssp.data.streaming.module.MixModule"
      //统计总量,精确到月
      business.date.extract.by = "dwrBusinessDate"
      commit.batch.size = 1
      commit.time.interval = 1800
      dwi.fields.extended=[]
      dwi.uuid.enable = false
      dwi.uuid.stat.hbase.table = ""
      dwi.uuid.fields = []
      dwi.uuid.alias = "rowkey"
      dwi.enable = false
      dwi.table = ""
      dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.SspSendDWRSchema"
      dwr.enable = true
      dwr.groupby.fields = [{
        expr = "publisherId", as = "publisherId"
      }, {
        expr = "subId", as = "appId"
      }]
      dwr.groupby.aggs = [{
        expr = "sum(times)", as ="sendCount",       union = "sum(sendCount)"
      }, {
        expr = "0",          as ="showCount",       union = "sum(showCount)"
      }, {
        expr = "0",          as ="clickCount",      union = "sum(clickCount)"
      }, {
        //--计费条数(转化数)
        //"sum(cpmTimes)" 目前不包含cpmTimes
        expr = "0",          as ="conversion",      union = "sum(conversion)"
      }, {
        //计费显示条数
        expr = "0",          as ="sendsConversion", union = "sum(sendsConversion)"
      }, {
        //计费金额(真实收益)
        expr = "0",          as ="cost",            union = "sum(cost)"
      }, {
        //计费显示金额(收益)
        expr = "0",          as ="sendsCost",       union = "sum(sendsCost)"
      }]
      dwr.groupby.extended.fields=[]
      dwr.groupby.extended.aggs = []
      dwr.include.repeated = true
      dwr.table = "ssp_app_dwr"
      dm.kafka.enable = false
      dm.kafka.topic = ""
      dm.phoenix.enable = false
      dm.phoenix.table  = ""
      dm.phoenix.hbase.storable.class = ""
      kafka.consumer {
        partitoins = [
          {
            topic = "topic_ssp_send_dwr"
            partition = 0
          }
        ]
        set {
          bootstrap.servers = "node30:6667,node31:6667,node32:6667"
          key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
          #?
          group.id = "app_send_topic_ssp_send_dwr_group1"
          auto.offset.reset = "earliest"
          #auto.offset.reset = "latest"
          enable.auto.commit = "false"
          request.timeout.ms = 2000
          session.timeout.ms = 1500
          heartbeat.interval.ms = 1000
        }
      }
    }

}