rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://node17:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="node30:6667,node31:6667,node32:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node30:6667,node31:6667,node32:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    auto.offset.reset = "earliest"
//    auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "node106,node107,node108"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  app.name = "report_campaign"
  streaming.batch.buration = 100
//    streaming.batch.buration = 600
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
    //    spark.streaming.backpressure.enabled = true
    spark.streaming.kafka.maxRatePerPartition = 6000
//    spark.streaming.kafka.maxRatePerPartition = 1
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 3
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 3
    spark.kryoserializer.buffer.max=512
    //    spark.kryo.registrationRequired = true
    spark.streaming.concurrentJobs = 5
    spark.yarn.max.executor.failures = 100
    spark.task.maxFailures = 100
  }
}

modules {

  report_campaign_fill {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    //取日期部分
    business.date.extract.by = "dwrBusinessDate"
    master = true
    commit.batch.size = 1
    commit.time.interval = 1800
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.SspFillDWRSchema"
    dwr.enable = true
    dwr.groupby.fields = [{
      expr = "publisherId", as = "publisherId"
    },{
      expr = "subId",       as = "appId"
    },{
      expr = "countryId",   as = "countryId"
    },{
      expr = "carrierId",   as = "carrierId"
    },{
      expr = "sv",          as = "versionName"
    },{
      expr = "adType",      as = "adType"
    },{
      expr = "campaignId",  as = "campaignId"
    },{
      expr = "offerId",     as = "offerId"
    },{
      expr = "imageId",     as = "imageId"
    },{
      expr = "affSub",      as = "affSub"
    }, {
      expr = "null", as = "packageName"
    }, {
      expr = "null",      as = "domain"
    }, {
      expr = "null",       as = "operatingSystem"
    }, {
      expr = "null",        as = "systemLanguage"
    }, {
      expr = "null",           as = "deviceBrand"
    }, {
      expr = "null",            as = "deviceType"
    }, {
      expr = "null",         as = "browserKernel"
    }, {
      expr = "null",                as = "b_time"
    }]
    dwr.groupby.aggs = [{
      expr = "sum(times)", as ="requestCount",   union = "sum(requestCount)"
    },{
      expr = "0",          as ="sendCount",      union = "sum(sendCount)"
    },{
      expr = "0",          as ="showCount",      union = "sum(showCount)"
    },{
      expr = "0",          as ="clickCount",     union = "sum(clickCount)"
    },{
      expr = "0",          as ="feeReportCount", union = "sum(feeReportCount)"  //计费条数
    },{
      expr = "0",          as ="feeSendCount",   union = "sum(feeSendCount)"    //计费显示条数
    },{
      expr = "0",          as ="feeReportPrice", union = "sum(feeReportPrice)"  //计费金额(真实收益)
    },{
      expr = "0",          as ="feeSendPrice",   union = "sum(feeSendPrice)"    //计费显示金额(收益)
    },{
      expr = "0",          as ="cpcBidPrice",    union = "sum(cpcBidPrice)"
    },{
      expr = "0",          as ="cpmBidPrice",    union = "sum(cpmBidPrice)"
    },{
      expr = "0",          as ="conversion",     union = "sum(conversion)"      //转化数，目前不要含展示和点击产生的
    },{
      expr = "0",          as ="allConversion",  union = "sum(allConversion)"   //转化数，含展示和点击产生的
    },{
      expr = "0",          as ="revenue",        union = "sum(revenue)"         //收益
    },{
      expr = "0",          as ="realRevenue",    union = "sum(realRevenue)"     //真实收益
    },{
      expr = "0",          as ="feeCpcTimes",        union = "sum(feeCpcTimes)"     // fee cpc转化条数
    },{
      expr = "0",          as ="feeCpmTimes",        union = "sum(feeCpmTimes)"     // fee cpm转化条数
    },{
      expr = "0",          as ="feeCpaTimes",        union = "sum(feeCpaTimes)"     // fee cpa转化条数
    },{
      expr = "0",          as ="feeCpaSendTimes",    union = "sum(feeCpaSendTimes)"     // fee cpa send转化条数
    },{
      expr = "0",          as ="feeCpcReportPrice",  union = "sum(feeCpcReportPrice)"     // fee cpc上游收益
    },{
      expr = "0",          as ="feeCpmReportPrice",  union = "sum(feeCpmReportPrice)"     // fee cpm上游收益
    },{
      expr = "0",          as ="feeCpaReportPrice",  union = "sum(feeCpaReportPrice)"     // fee cpa上游收益
    },{
      expr = "0",          as ="feeCpcSendPrice",    union = "sum(feeCpcSendPrice)"     // fee cpc下游收益
    },{
      expr = "0",          as ="feeCpmSendPrice",    union = "sum(feeCpmSendPrice)"     // fee cpm下游收益
    },{
      expr = "0",          as ="feeCpaSendPrice",    union = "sum(feeCpaSendPrice)"     // fee cpa下游收益
    }]
    dwr.include.repeated = true
    dwr.table = "ssp_report_campaign_dwr"
    dm.greenplum.enable = false
    dm.greenplum.hive.view = "ssp_report_campaign_dm"
    dm.greenplum.message.topics.ext=["report_campaign_fill","report_campaign_send", "report_campaign_show", "report_campaign_click", "report_campaign_fee"]
    //++
    dm.greenplum.upsert.by.hive.views=[{
      view="ssp_report_campaign_dm"
      dwr.table="ssp_report_campaign_dwr"
      on.conflict = "publisherId, appId, countryId, carrierId, versionName, adType, campaignId, offerId, imageId, affSub, l_time, b_date"
    }]
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_ssp_fill_dwr"
          partition = 0
        }
      ]
    }
  }

  report_campaign_send {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    //取日期部分
    business.date.extract.by = "dwrBusinessDate"
    commit.batch.size = 1
    commit.time.interval = 1800
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.SspSendDWRSchema"
    dwr.enable = true
    dwr.groupby.fields = [{
      expr = "publisherId", as = "publisherId"
    },{
      expr = "subId",       as = "appId"
    },{
      expr = "countryId",   as = "countryId"
    },{
      expr = "carrierId",   as = "carrierId"
    },{
      expr = "sv",          as = "versionName"
    },{
      expr = "adType",      as = "adType"
    },{
      expr = "campaignId",  as = "campaignId"
    },{
      expr = "offerId",     as = "offerId"
    },{
      expr = "imageId",     as = "imageId"
    },{
      expr = "affSub",      as = "affSub"
    }, {
      expr = "null", as = "packageName"
    }, {
      expr = "null",      as = "domain"
    }, {
      expr = "null",       as = "operatingSystem"
    }, {
      expr = "null",        as = "systemLanguage"
    }, {
      expr = "null",           as = "deviceBrand"
    }, {
      expr = "null",            as = "deviceType"
    }, {
      expr = "null",         as = "browserKernel"
    }, {
      expr = "null",                as = "b_time"
    }]
    dwr.groupby.aggs = [{
      expr = "0",          as ="requestCount",   union = "sum(requestCount)"
    },{
      expr = "sum(times)",as ="sendCount",      union = "sum(sendCount)"
    },{
      expr = "0",          as ="showCount",      union = "sum(showCount)"
    },{
      expr = "0",          as ="clickCount",     union = "sum(clickCount)"
    },{
      expr = "0",          as ="feeReportCount", union = "sum(feeReportCount)"  //计费条数
    },{
      expr = "0",          as ="feeSendCount",   union = "sum(feeSendCount)"    //计费显示条数
    },{
      expr = "0",          as ="feeReportPrice", union = "sum(feeReportPrice)"  //计费金额(真实收益)
    },{
      expr = "0",          as ="feeSendPrice",   union = "sum(feeSendPrice)"    //计费显示金额(收益)
    },{
      expr = "0",          as ="cpcBidPrice",    union = "sum(cpcBidPrice)"
    },{
      expr = "0",          as ="cpmBidPrice",    union = "sum(cpmBidPrice)"
    },{
      expr = "0",          as ="conversion",     union = "sum(conversion)"      //转化数，目前不要含展示和点击产生的
    },{
      expr = "0",          as ="allConversion",  union = "sum(allConversion)"   //转化数，含展示和点击产生的
    },{
      expr = "0",          as ="revenue",        union = "sum(revenue)"         //收益
    },{
      expr = "0",          as ="realRevenue",    union = "sum(realRevenue)"     //真实收益
    },{
      expr = "0",          as ="feeCpcTimes",        union = "sum(feeCpcTimes)"     // fee cpc转化条数
    },{
      expr = "0",          as ="feeCpmTimes",        union = "sum(feeCpmTimes)"     // fee cpm转化条数
    },{
      expr = "0",          as ="feeCpaTimes",        union = "sum(feeCpaTimes)"     // fee cpa转化条数
    },{
      expr = "0",          as ="feeCpaSendTimes",    union = "sum(feeCpaSendTimes)"     // fee cpa send转化条数
    },{
      expr = "0",          as ="feeCpcReportPrice",  union = "sum(feeCpcReportPrice)"     // fee cpc上游收益
    },{
      expr = "0",          as ="feeCpmReportPrice",  union = "sum(feeCpmReportPrice)"     // fee cpm上游收益
    },{
      expr = "0",          as ="feeCpaReportPrice",  union = "sum(feeCpaReportPrice)"     // fee cpa上游收益
    },{
      expr = "0",          as ="feeCpcSendPrice",    union = "sum(feeCpcSendPrice)"     // fee cpc下游收益
    },{
      expr = "0",          as ="feeCpmSendPrice",    union = "sum(feeCpmSendPrice)"     // fee cpm下游收益
    },{
      expr = "0",          as ="feeCpaSendPrice",    union = "sum(feeCpaSendPrice)"     // fee cpa下游收益
    }]
    dwr.include.repeated = true
    dwr.table = "ssp_report_campaign_dwr"
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_ssp_send_dwr"
          partition = 0
        }
      ]
    }
  }

  report_campaign_show {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    //取日期部分
    business.date.extract.by = "dwrBusinessDate"
    commit.batch.size = 1
    commit.time.interval = 1800
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.SspShowDWRSchema"
    dwr.enable = true
    dwr.groupby.fields = [{
      expr = "publisherId",  as = "publisherId"
    },{
      expr = "subId",        as = "appId"
    },{
      expr = "countryId",    as = "countryId"
    },{
      expr = "carrierId",    as = "carrierId"
    },{
      expr = "sv",           as = "versionName"
    },{
      expr = "adType",       as = "adType"
    },{
      expr = "campaignId",   as = "campaignId"
    },{
      expr = "offerId",      as = "offerId"
    },{
      expr = "imageId",      as = "imageId"
    },{
      expr = "affSub",       as = "affSub"
    }, {
      expr = "null", as = "packageName"
    }, {
      expr = "null",      as = "domain"
    }, {
      expr = "null",       as = "operatingSystem"
    }, {
      expr = "null",        as = "systemLanguage"
    }, {
      expr = "null",           as = "deviceBrand"
    }, {
      expr = "null",            as = "deviceType"
    }, {
      expr = "null",         as = "browserKernel"
    }, {
      expr = "null",                as = "b_time"
    }]
    dwr.groupby.aggs = [{
      expr = "0",                 as ="requestCount",   union = "sum(requestCount)"
    },{
      expr = "0",                 as ="sendCount",      union = "sum(sendCount)"
    },{
      expr = "sum(times)",        as ="showCount",      union = "sum(showCount)"
    },{
      expr = "0",                 as ="clickCount",     union = "sum(clickCount)"
    },{
      expr = "0",                 as ="feeReportCount", union = "sum(feeReportCount)"  //计费条数
    },{
      expr = "0",                 as ="feeSendCount",   union = "sum(feeSendCount)"    //计费显示条数
    },{
      expr = "0",                 as ="feeReportPrice", union = "sum(feeReportPrice)"  //计费金额(真实收益)
    },{
      expr = "0",                 as ="feeSendPrice",   union = "sum(feeSendPrice)"    //计费显示金额(收益)
    },{
      expr = "0",                 as ="cpcBidPrice",    union = "sum(cpcBidPrice)"
    },{
      expr = "sum(cpmBidPrice)",  as ="cpmBidPrice",    union = "sum(cpmBidPrice)"
    },{
      expr = "0",                 as ="conversion",     union = "sum(conversion)"      //转化数，目前不要含展示和点击产生的
    },{
      expr = "sum(cpmTimes)",     as ="allConversion",  union = "sum(allConversion)"   //转化数，含展示和点击产生的
    },{
      expr = "sum(cpmSendPrice)", as ="revenue",        union = "sum(revenue)"         //收益
    },{
      expr = "sum(cpmBidPrice)",  as ="realRevenue",    union = "sum(realRevenue)"     //真实收益
    },{
      expr = "0",          as ="feeCpcTimes",        union = "sum(feeCpcTimes)"     // fee cpc转化条数
    },{
      expr = "0",          as ="feeCpmTimes",        union = "sum(feeCpmTimes)"     // fee cpm转化条数
    },{
      expr = "0",          as ="feeCpaTimes",        union = "sum(feeCpaTimes)"     // fee cpa转化条数
    },{
      expr = "0",          as ="feeCpaSendTimes",    union = "sum(feeCpaSendTimes)"     // fee cpa send转化条数
    },{
      expr = "0",          as ="feeCpcReportPrice",  union = "sum(feeCpcReportPrice)"     // fee cpc上游收益
    },{
      expr = "0",          as ="feeCpmReportPrice",  union = "sum(feeCpmReportPrice)"     // fee cpm上游收益
    },{
      expr = "0",          as ="feeCpaReportPrice",  union = "sum(feeCpaReportPrice)"     // fee cpa上游收益
    },{
      expr = "0",          as ="feeCpcSendPrice",    union = "sum(feeCpcSendPrice)"     // fee cpc下游收益
    },{
      expr = "0",          as ="feeCpmSendPrice",    union = "sum(feeCpmSendPrice)"     // fee cpm下游收益
    },{
      expr = "0",          as ="feeCpaSendPrice",    union = "sum(feeCpaSendPrice)"     // fee cpa下游收益
    }]
    dwr.include.repeated = true
    dwr.table = "ssp_report_campaign_dwr"
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_ssp_show_dwr"
          partition = 0
        }
      ]
    }
  }

  report_campaign_click {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    //取日期部分
    business.date.extract.by = "dwrBusinessDate"
    commit.batch.size = 1
    commit.time.interval = 1800
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.SspClickDWRSchema"
    dwr.enable = true
    dwr.groupby.fields = [{
      expr = "publisherId", as = "publisherId"
    },{
      expr = "subId",       as = "appId"
    },{
      expr = "countryId",   as = "countryId"
    },{
      expr = "carrierId",   as = "carrierId"
    },{
      expr = "sv",          as = "versionName"
    },{
      expr = "adType",      as = "adType"
    },{
      expr = "campaignId",  as = "campaignId"
    },{
      expr = "offerId",     as = "offerId"
    },{
      expr = "imageId",     as = "imageId"
    },{
      expr = "affSub",      as = "affSub"
    }, {
      expr = "null", as = "packageName"
    }, {
      expr = "null",      as = "domain"
    }, {
      expr = "null",       as = "operatingSystem"
    }, {
      expr = "null",        as = "systemLanguage"
    }, {
      expr = "null",           as = "deviceBrand"
    }, {
      expr = "null",            as = "deviceType"
    }, {
      expr = "null",         as = "browserKernel"
    }, {
      expr = "null",                as = "b_time"
    }]
    dwr.groupby.aggs = [{
      expr = "0",                as ="requestCount",   union = "sum(requestCount)"
    },{
      expr = "0",                as ="sendCount",      union = "sum(sendCount)"
    },{
      expr = "0",                as ="showCount",      union = "sum(showCount)"
    },{
      expr = "sum(times)",       as ="clickCount",     union = "sum(clickCount)"
    },{
      expr = "0",                as ="feeReportCount", union = "sum(feeReportCount)"  //计费条数
    },{
      expr = "0",                as ="feeSendCount",   union = "sum(feeSendCount)"    //计费显示条数
    },{
      expr = "0",                as ="feeReportPrice", union = "sum(feeReportPrice)"  //计费金额(真实收益)
    },{
      expr = "0",                as ="feeSendPrice",   union = "sum(feeSendPrice)"    //计费显示金额(收益)
    },{
      expr = "sum(cpcBidPrice)", as ="cpcBidPrice",    union = "sum(cpcBidPrice)"
    },{
      expr = "0",                as ="cpmBidPrice",    union = "sum(cpmBidPrice)"
    },{
      expr = "0",                as ="conversion",     union = "sum(conversion)"      //转化数，目前不要含展示和点击产生的
    },{
      expr = "sum(cpcTimes)",    as ="allConversion",  union = "sum(allConversion)"   //转化数，含展示和点击产生的
    },{
      expr = "sum(cpcSendPrice)",as ="revenue",        union = "sum(revenue)"         //收益
    },{
      expr = "sum(cpcBidPrice)", as ="realRevenue",    union = "sum(realRevenue)"     //真实收益
    },{
      expr = "0",          as ="feeCpcTimes",        union = "sum(feeCpcTimes)"     // fee cpc转化条数
    },{
      expr = "0",          as ="feeCpmTimes",        union = "sum(feeCpmTimes)"     // fee cpm转化条数
    },{
      expr = "0",          as ="feeCpaTimes",        union = "sum(feeCpaTimes)"     // fee cpa转化条数
    },{
      expr = "0",          as ="feeCpaSendTimes",    union = "sum(feeCpaSendTimes)"     // fee cpa send转化条数
    },{
      expr = "0",          as ="feeCpcReportPrice",  union = "sum(feeCpcReportPrice)"     // fee cpc上游收益
    },{
      expr = "0",          as ="feeCpmReportPrice",  union = "sum(feeCpmReportPrice)"     // fee cpm上游收益
    },{
      expr = "0",          as ="feeCpaReportPrice",  union = "sum(feeCpaReportPrice)"     // fee cpa上游收益
    },{
      expr = "0",          as ="feeCpcSendPrice",    union = "sum(feeCpcSendPrice)"     // fee cpc下游收益
    },{
      expr = "0",          as ="feeCpmSendPrice",    union = "sum(feeCpmSendPrice)"     // fee cpm下游收益
    },{
      expr = "0",          as ="feeCpaSendPrice",    union = "sum(feeCpaSendPrice)"     // fee cpa下游收益
    }]
    dwr.include.repeated = true
    dwr.table = "ssp_report_campaign_dwr"
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_ssp_click_dwr"
          partition = 0
        }
      ]
    }
  }

  report_campaign_fee {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    //取日期部分
    business.date.extract.by = "dwrBusinessDate"
    commit.batch.size = 1
    commit.time.interval = 1800
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwr.kafka.SspFeeDWRSchema"
    dwr.enable = true
    dwr.groupby.fields = [{
      expr = "publisherId", as = "publisherId"
    },{
      expr = "subId",       as = "appId"
    },{
      expr = "countryId",   as = "countryId"
    },{
      expr = "carrierId",   as = "carrierId"
    },{
      expr = "sv",          as = "versionName"
    },{
      expr = "adType",      as = "adType"
    },{
      expr = "campaignId",  as = "campaignId"
    },{
      expr = "offerId",     as = "offerId"
    },{
      expr = "imageId",     as = "imageId"
    },{
      expr = "affSub",      as = "affSub"
    }, {
      expr = "null", as = "packageName"
    }, {
      expr = "null",      as = "domain"
    }, {
      expr = "null",       as = "operatingSystem"
    }, {
      expr = "null",        as = "systemLanguage"
    }, {
      expr = "null",           as = "deviceBrand"
    }, {
      expr = "null",            as = "deviceType"
    }, {
      expr = "null",         as = "browserKernel"
    }, {
      expr = "null",                as = "b_time"
    }]
    dwr.groupby.aggs = [{
      expr = "0",                as ="requestCount",   union = "sum(requestCount)"
    },{
      expr = "0",                as ="sendCount",      union = "sum(sendCount)"
    },{
      expr = "0",                as ="showCount",      union = "sum(showCount)"
    },{
      expr = "0",                as ="clickCount",     union = "sum(clickCount)"
    },{
      expr = "sum(times)",       as ="feeReportCount", union = "sum(feeReportCount)"  //计费条数
    },{
      expr = "sum(sendTimes)",   as ="feeSendCount",   union = "sum(feeSendCount)"    //计费显示条数
    },{
      expr = "sum(reportPrice)", as ="feeReportPrice", union = "sum(feeReportPrice)"  //计费金额(真实收益)
    },{
      expr = "sum(sendPrice)",   as ="feeSendPrice",   union = "sum(feeSendPrice)"    //计费显示金额(收益)
    },{
      expr = "0",                as ="cpcBidPrice",    union = "sum(cpcBidPrice)"
    },{
      expr = "0",                as ="cpmBidPrice",    union = "sum(cpmBidPrice)"
    },{
      expr = "sum(times)",       as ="conversion",     union = "sum(conversion)"      //转化数，目前不要含展示和点击产生的
    },{
      expr = "sum(times)",       as ="allConversion",  union = "sum(allConversion)"   //转化数，含展示和点击产生的
    },{
      expr = "sum(sendPrice)",   as ="revenue",        union = "sum(revenue)"         //收益
    },{
      expr = "sum(reportPrice)", as ="realRevenue",    union = "sum(realRevenue)"     //真实收益
    },{
      expr = "sum(feeCpcTimes)", as ="feeCpcTimes",    union = "sum(feeCpcTimes)"     // fee cpc转化条数
    },{
      expr = "sum(feeCpmTimes)", as ="feeCpmTimes",    union = "sum(feeCpmTimes)"     // fee cpm转化条数
    },{
      expr = "sum(feeCpaTimes)", as ="feeCpaTimes",    union = "sum(feeCpaTimes)"     // fee cpa转化条数
    },{
      expr = "sum(feeCpaSendTimes)",   as ="feeCpaSendTimes",    union = "sum(feeCpaSendTimes)"     // fee cpa send转化条数
    },{
      expr = "sum(feeCpcReportPrice)", as ="feeCpcReportPrice",  union = "sum(feeCpcReportPrice)"     // fee cpc上游收益
    },{
      expr = "sum(feeCpmReportPrice)", as ="feeCpmReportPrice",  union = "sum(feeCpmReportPrice)"     // fee cpm上游收益
    },{
      expr = "sum(feeCpaReportPrice)", as ="feeCpaReportPrice",  union = "sum(feeCpaReportPrice)"     // fee cpa上游收益
    },{
      expr = "sum(feeCpcSendPrice)",   as ="feeCpcSendPrice",    union = "sum(feeCpcSendPrice)"     // fee cpc下游收益
    },{
      expr = "sum(feeCpmSendPrice)",   as ="feeCpmSendPrice",    union = "sum(feeCpmSendPrice)"     // fee cpm下游收益
    },{
      expr = "sum(feeCpaSendPrice)",   as ="feeCpaSendPrice",    union = "sum(feeCpaSendPrice)"     // fee cpa下游收益
    }]
    dwr.include.repeated = true
    dwr.table = "ssp_report_campaign_dwr"
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_ssp_fee_dwr"
          partition = 0
        }
      ]
    }
  }

}
