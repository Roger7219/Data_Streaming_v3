rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "root"
  password = "root_root"
  kafka.offset.table = "offset"
  transaction.manager.table="sight.transaction_commited_table"
}
hive {
  jdbc.url = "jdbc:hive2://node17:10000/default"
}
message.client.url="http://node14:5555/"
kylin.client.url="http://node14:7070/kylin/api/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="node30:6667,node31:6667,node32:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node30:6667,node31:6667,node32:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    auto.offset.reset = "earliest"
    #auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "node106,node107,node108"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  app.name = "ssp_click"
//  streaming.batch.buration = 1200
  streaming.batch.buration = 300
//  streaming.batch.buration = 10
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
    spark.streaming.kafka.maxRatePerPartition = 1250
//    spark.streaming.kafka.maxRatePerPartition = 500
//    spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 3
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize = 1024000000
    spark.sql.shuffle.partitions = 3
    spark.kryoserializer.buffer.max = 256
    spark.streaming.concurrentJobs = 1
    spark.scheduler.mode=FAIR
  }
}
modules {

  ////  #点击数
  //  ${module.name} Kafka偏移通过改module.name实现
  click {
    class = "com.mobikok.ssp.data.streaming.module.MixModule"
    business.date.extract.by = "clickTime"
    commit.time.interval = 1
    commit.batch.size = 1
    dwi.enable = true
    dwi.table = "ssp_click_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficOldDWISchema"
    dwr.enable = true
    dwr.groupby.fields = [{
      expr = "publisherId", as = "publisherId"
    }, {
      expr = "subId",       as = "subId"
    }, {
      expr = "countryId",   as = "countryId"
    }, {
      expr = "carrierId",   as = "carrierId"
    }, {
      expr = "sv",          as = "sv"
    }, {
      expr = "adType",      as = "adType"
    }, {
      expr = "campaignId",  as = "campaignId"
    }, {
      expr = "offerId",     as = "offerId"
    }, {
      expr = "imageId",     as = "imageId"
    }, {
      expr = "affSub",      as = "affSub"
    }, {
      expr = "null",        as = "packageName"
    }, {
      expr = "null",        as = "domain"
    }, {
      expr = "null",        as = "operatingSystem"
    }, {
      expr = "null",        as = "systemLanguage"
    }, {
      expr = "null",        as = "deviceBrand"
    }, {
      expr = "null",        as = "deviceType"
    }, {
      expr = "null",        as = "browserKernel"
    }, {
      expr = "null",        as = "b_time"
    }]
    dwr.groupby.date.extract.by = "createTime"
    dwr.groupby.aggs = [{
      expr = "count(1)"
      as = "times"
      union = "sum(times)"
    }, {
      // 1 cpc(click), 2 cpm(show), 3 cpa(转化数=计费数?)
      expr = "count(if( priceMethod = 1,  1, null))"
      as = "cpcTimes"
      union = "sum(cpcTimes)"
    }, {
      // 1 cpc(click), 2 cpm(show), 3 cpa(转化数=计费数?)
      expr = "sum( cast( if( priceMethod = 1,  bidPrice, 0) as decimal(19,10) ) )"
      as = "cpcBidPrice"
      union = "sum(cpcBidPrice)"
    }, {
      expr = "sum( cast( if( priceMethod = 1,  sendPrice, 0) as decimal(19,10) ) )"
      as = "cpcSendPrice"
      union = "sum(cpcSendPrice)"
    }]
    dwr.table = "ssp_click_dwr"
    dm.kafka.enable = true
    dm.kafka.topic = "topic_ssp_click_dwr"
    kafka.consumer {
      partitoins = [
        {
          topic = "topic_ad_click"
          partition = 0
        },
        {
          topic = "topic_ad_click"
          partition = 1
        },
        {
          topic = "topic_ad_click"
          partition = 2
        },
        {
          topic = "topic_ad_click"
          partition = 3
        },
        {
          topic = "topic_ad_click"
          partition = 4
        },
        {
          topic = "topic_ad_click"
          partition = 5
        },
        {
          topic = "topic_ad_click"
          partition = 6
        },
        {
          topic = "topic_ad_click"
          partition = 7
        }
      ]
    }
  }
//
//  click_1 {
//    class = "com.mobikok.ssp.data.streaming.module.GenericModule"
//    business.date.extract.by = "clickTime"
//    commit.time.interval = 1800
//    commit.batch.size = 50000
//    dwi.enable = true
//    dwi.table = "ssp_click_dwi"
//    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
//    dwr.enable = true
//    dwr.groupby.fields = [{
//      expr = "publisherId", as = "publisherId"
//    }, {
//      expr = "subId",       as = "subId"
//    }, {
//      expr = "countryId",   as = "countryId"
//    }, {
//      expr = "carrierId",   as = "carrierId"
//    }, {
//      expr = "sv",          as = "sv"
//    }, {
//      expr = "adType",      as = "adType"
//    }, {
//      expr = "campaignId",  as = "campaignId"
//    }, {
//      expr = "offerId",     as = "offerId"
//    }, {
//      expr = "imageId",     as = "imageId"
//    }, {
//      expr = "affSub",      as = "affSub"
//    }]
//    dwr.groupby.date.extract.by = "createTime"
//    dwr.groupby.aggs = [{
//      expr = "count(1)"
//      as = "times"
//      union = "sum(times)"
//    }, {
//      // 1 cpc(click), 2 cpm(show), 3 cpa(转化数=计费数?)
//      expr = "count(if( priceMethod = 1,  1, null))"
//      as = "cpcTimes"
//      union = "sum(cpcTimes)"
//    }, {
//      // 1 cpc(click), 2 cpm(show), 3 cpa(转化数=计费数?)
//      expr = "sum( cast( if( priceMethod = 1,  bidPrice, 0) as decimal(19,10) ) )"
//      as = "cpcBidPrice"
//      union = "sum(cpcBidPrice)"
//    }, {
//      expr = "sum( cast( if( priceMethod = 1,  sendPrice, 0) as decimal(19,10) ) )"
//      as = "cpcSendPrice"
//      union = "sum(cpcSendPrice)"
//    }]
//    dwr.table = "ssp_click_dwr"
//    dm.kafka.enable = true
//    dm.kafka.topic = "topic_ssp_click_dwr"
//    kafka.consumer {
//      partitoins = [
//        {
//          topic = "topic_ad_click"
//          partition = 1
//        }
//      ]
//    }
//  }
//  click_2 {
//    class = "com.mobikok.ssp.data.streaming.module.GenericModule"
//    business.date.extract.by = "clickTime"
//    commit.time.interval = 1800
//    commit.batch.size = 50000
//    dwi.enable = true
//    dwi.table = "ssp_click_dwi"
//    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
//    dwr.enable = true
//    dwr.groupby.fields = [{
//      expr = "publisherId", as = "publisherId"
//    }, {
//      expr = "subId",       as = "subId"
//    }, {
//      expr = "countryId",   as = "countryId"
//    }, {
//      expr = "carrierId",   as = "carrierId"
//    }, {
//      expr = "sv",          as = "sv"
//    }, {
//      expr = "adType",      as = "adType"
//    }, {
//      expr = "campaignId",  as = "campaignId"
//    }, {
//      expr = "offerId",     as = "offerId"
//    }, {
//      expr = "imageId",     as = "imageId"
//    }, {
//      expr = "affSub",      as = "affSub"
//    }]
//    dwr.groupby.date.extract.by = "createTime"
//    dwr.groupby.aggs = [{
//      expr = "count(1)"
//      as = "times"
//      union = "sum(times)"
//    }, {
//      // 1 cpc(click), 2 cpm(show), 3 cpa(转化数=计费数?)
//      expr = "count(if( priceMethod = 1,  1, null))"
//      as = "cpcTimes"
//      union = "sum(cpcTimes)"
//    }, {
//      // 1 cpc(click), 2 cpm(show), 3 cpa(转化数=计费数?)
//      expr = "sum( cast( if( priceMethod = 1,  bidPrice, 0) as decimal(19,10) ) )"
//      as = "cpcBidPrice"
//      union = "sum(cpcBidPrice)"
//    }, {
//      expr = "sum( cast( if( priceMethod = 1,  sendPrice, 0) as decimal(19,10) ) )"
//      as = "cpcSendPrice"
//      union = "sum(cpcSendPrice)"
//    }]
//    dwr.table = "ssp_click_dwr"
//    dm.kafka.enable = true
//    dm.kafka.topic = "topic_ssp_click_dwr"
//    kafka.consumer {
//      partitoins = [
//        {
//          topic = "topic_ad_click"
//          partition = 2
//        }
//      ]
//    }
//  }
//
//  click_3 {
//    class = "com.mobikok.ssp.data.streaming.module.GenericModule"
//    business.date.extract.by = "clickTime"
//    commit.time.interval = 1800
//    commit.batch.size = 50000
//    dwi.enable = true
//    dwi.table = "ssp_click_dwi"
//    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
//    dwr.enable = true
//    dwr.groupby.fields = [{
//      expr = "publisherId", as = "publisherId"
//    }, {
//      expr = "subId",       as = "subId"
//    }, {
//      expr = "countryId",   as = "countryId"
//    }, {
//      expr = "carrierId",   as = "carrierId"
//    }, {
//      expr = "sv",          as = "sv"
//    }, {
//      expr = "adType",      as = "adType"
//    }, {
//      expr = "campaignId",  as = "campaignId"
//    }, {
//      expr = "offerId",     as = "offerId"
//    }, {
//      expr = "imageId",     as = "imageId"
//    }, {
//      expr = "affSub",      as = "affSub"
//    }]
//    dwr.groupby.date.extract.by = "createTime"
//    dwr.groupby.aggs = [{
//      expr = "count(1)"
//      as = "times"
//      union = "sum(times)"
//    }, {
//      // 1 cpc(click), 2 cpm(show), 3 cpa(转化数=计费数?)
//      expr = "count(if( priceMethod = 1,  1, null))"
//      as = "cpcTimes"
//      union = "sum(cpcTimes)"
//    }, {
//      // 1 cpc(click), 2 cpm(show), 3 cpa(转化数=计费数?)
//      expr = "sum( cast( if( priceMethod = 1,  bidPrice, 0) as decimal(19,10) ) )"
//      as = "cpcBidPrice"
//      union = "sum(cpcBidPrice)"
//    }, {
//      expr = "sum( cast( if( priceMethod = 1,  sendPrice, 0) as decimal(19,10) ) )"
//      as = "cpcSendPrice"
//      union = "sum(cpcSendPrice)"
//    }]
//    dwr.table = "ssp_click_dwr"
//    dm.kafka.enable = true
//    dm.kafka.topic = "topic_ssp_click_dwr"
//    kafka.consumer {
//      partitoins = [
//        {
//          topic = "topic_ad_click"
//          partition = 3
//        }
//      ]
//    }
//  }
//
//  click_4 {
//    class = "com.mobikok.ssp.data.streaming.module.GenericModule"
//    business.date.extract.by = "clickTime"
//    commit.time.interval = 1800
//    commit.batch.size = 50000
//    dwi.enable = true
//    dwi.table = "ssp_click_dwi"
//    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
//    dwr.enable = true
//    dwr.groupby.fields = [{
//      expr = "publisherId", as = "publisherId"
//    }, {
//      expr = "subId",       as = "subId"
//    }, {
//      expr = "countryId",   as = "countryId"
//    }, {
//      expr = "carrierId",   as = "carrierId"
//    }, {
//      expr = "sv",          as = "sv"
//    }, {
//      expr = "adType",      as = "adType"
//    }, {
//      expr = "campaignId",  as = "campaignId"
//    }, {
//      expr = "offerId",     as = "offerId"
//    }, {
//      expr = "imageId",     as = "imageId"
//    }, {
//      expr = "affSub",      as = "affSub"
//    }]
//    dwr.groupby.date.extract.by = "createTime"
//    dwr.groupby.aggs = [{
//      expr = "count(1)"
//      as = "times"
//      union = "sum(times)"
//    }, {
//      // 1 cpc(click), 2 cpm(show), 3 cpa(转化数=计费数?)
//      expr = "count(if( priceMethod = 1,  1, null))"
//      as = "cpcTimes"
//      union = "sum(cpcTimes)"
//    }, {
//      // 1 cpc(click), 2 cpm(show), 3 cpa(转化数=计费数?)
//      expr = "sum( cast( if( priceMethod = 1,  bidPrice, 0) as decimal(19,10) ) )"
//      as = "cpcBidPrice"
//      union = "sum(cpcBidPrice)"
//    }, {
//      expr = "sum( cast( if( priceMethod = 1,  sendPrice, 0) as decimal(19,10) ) )"
//      as = "cpcSendPrice"
//      union = "sum(cpcSendPrice)"
//    }]
//    dwr.table = "ssp_click_dwr"
//    dm.kafka.enable = true
//    dm.kafka.topic = "topic_ssp_click_dwr"
//    kafka.consumer {
//      partitoins = [
//        {
//          topic = "topic_ad_click"
//          partition = 4
//        }
//      ]
//    }
//  }

}