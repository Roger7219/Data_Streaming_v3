rdb {
  url = "jdbc:mysql://node17:3306/sight"
  user = "sight"
  password = "%oEL!L#Lkf&B!$F9JapY"
  kafka.offset.table = "offset"
}
hive {
  jdbc.url = "jdbc:hive2://node17:10000/default"
}
message.client.url="http://node14:5555/"
kafka.producer {
  is.async=false
  set {
    bootstrap.servers="node30:6667,node104:6667,node32:6667"
    client.id="niubility_producer"
    acks=-1
    key.serializer="org.apache.kafka.common.serialization.StringSerializer"
    value.serializer="org.apache.kafka.common.serialization.StringSerializer"
  }
}
kafka.consumer {
  set {
    bootstrap.servers = "node30:6667,node104:6667,node32:6667"
    key.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    value.deserializer = "org.apache.kafka.common.serialization.StringDeserializer"
    //    auto.offset.reset = "earliest"
    auto.offset.reset = "latest"
    enable.auto.commit = "false"
    request.timeout.ms = 2000
    session.timeout.ms = 1500
    heartbeat.interval.ms = 1000
  }
}
hbase {
  set {
    hbase.zookeeper.quorum = "node14,node15,node16,node17,node30,node32,node124,node125,node126"
    hbase.zookeeper.property.clientPort = "2181"
    spark.serializer = org.apache.spark.serializer.KryoSerializer
  }
}
spark.conf {
  streaming.batch.buration = 100
  set {
    mapreduce.job.queuename = queueA
    mapreduce.job.priority = HIGH
    hive.exec.dynamic.partition.mode = nonstrict
    //    spark.streaming.kafka.maxRatePerPartition = 2000
    spark.streaming.kafka.maxRatePerPartition = 1250
    #spark.streaming.receiver.maxRate=1000
    spark.serializer = org.apache.spark.serializer.KryoSerializer
    spark.default.parallelism = 20
    hive.merge.mapfiles = true
    hive.merge.mapredfiles = true
    hive.merge.smallfiles.avgsize=1024000000
    spark.sql.shuffle.partitions = 20
    spark.kryoserializer.buffer.max=256
    spark.scheduler.mode=FAIR
    //    spark.streaming.concurrentJobs = 6
  }
}
clickhouse {
  hosts = ["node111", "node110", "node16" , "node15"]
}
modules {

  overall_fill {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    b_time.by = "createTime"
    master = true
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
    dwr.store = true
    dwr.groupby.fields = [
      {
        expr = "publisherId", as = "publisherId"
      },{
        expr = "subId",       as = "appId"
      },{
        expr = "countryId",   as = "countryId"
      },{
        expr = "carrierId",   as = "carrierId"
      },{
        expr = "sv",          as = "versionName"
      },{
        expr = "adType",      as = "adType"
      },{
        expr = "campaignId",  as = "campaignId"
      },{
        expr = "offerId",     as = "offerId"
      },{
        expr = "imageId",     as = "imageId"
      },{
        expr = "affSub",      as = "affSub"
      }, {
        expr = "packageName", as = "packageName"
      }, {
        expr = "domain",      as = "domain"
      }, {
        expr = "operatingSystem(userAgent)",        as = "operatingSystem"
      }, {
        expr = "language(userAgent)",               as = "systemLanguage"
      }, {
        expr = "machineModel(userAgent)",           as = "deviceBrand"
      }, {
        expr = "deviceType(userAgent)",             as = "deviceType"
      }, {
        expr = "browserKernel(userAgent)",          as = "browserKernel"
      }, {
        expr = "respStatus",                        as = "respStatus"
      }, {
        expr = "test",                              as = "test"
      }, {
        expr = "ruleId",                            as = "ruleId"
      }, {
        expr = "smartId",                           as = "smartId"
      }, {
        expr = "eventName",                         as = "eventName"
      }
      , {
        expr = "raterType",                         as = "raterType"
      }, {
        expr = "raterId",                           as = "raterId"
      }
    ]
    dwr.groupby.aggs = [
      {
        expr = "count(1)",          as ="requestCount",   union = "sum(requestCount)"
      },{
        expr = "0",                 as ="sendCount",      union = "sum(sendCount)"
      },{
        expr = "0",                 as ="showCount",      union = "sum(showCount)"
      },{
        expr = "0",                 as ="clickCount",     union = "sum(clickCount)"
      },{
        expr = "0",                 as ="feeReportCount", union = "sum(feeReportCount)"  //计费条数
      },{
        expr = "0",                 as ="feeSendCount",   union = "sum(feeSendCount)"    //计费显示条数
      },{
        expr = "0",                 as ="feeReportPrice", union = "sum(feeReportPrice)"  //计费金额(真实收益)
      },{
        expr = "0",                 as ="feeSendPrice",   union = "sum(feeSendPrice)"    //计费显示金额(收益)
      },{
        expr = "0",                 as ="cpcBidPrice",    union = "sum(cpcBidPrice)"
      },{
        expr = "0",                 as ="cpmBidPrice",    union = "sum(cpmBidPrice)"
      },{
        expr = "0",                 as ="conversion",     union = "sum(conversion)"      //转化数，目前不要含展示和点击产生的
      },{
        expr = "0",                 as ="allConversion",  union = "sum(allConversion)"   //转化数，含展示和点击产生的
      },{
        expr = "0",                 as ="revenue",        union = "sum(revenue)"         //收益
      },{
        expr = "0",                 as ="realRevenue",    union = "sum(realRevenue)"     //真实收益
      },{
        expr = "0",                 as ="feeCpcTimes",    union = "sum(feeCpcTimes)"     // fee cpc转化条数
      },{
        expr = "0",                 as ="feeCpmTimes",    union = "sum(feeCpmTimes)"     // fee cpm转化条数
      },{
        expr = "0",                 as ="feeCpaTimes",    union = "sum(feeCpaTimes)"     // fee cpa转化条数
      },{
        expr = "0",                 as ="feeCpaSendTimes",    union = "sum(feeCpaSendTimes)"     // fee cpa send转化条数
      },{
        expr = "0",                 as ="feeCpcReportPrice",  union = "sum(feeCpcReportPrice)"     // fee cpc上游收益
      },{
        expr = "0",                 as ="feeCpmReportPrice",  union = "sum(feeCpmReportPrice)"     // fee cpm上游收益
      },{
        expr = "0",                 as ="feeCpaReportPrice",  union = "sum(feeCpaReportPrice)"     // fee cpa上游收益
      },{
        expr = "0",                 as ="feeCpcSendPrice",    union = "sum(feeCpcSendPrice)"     // fee cpc下游收益
      },{
        expr = "0",                 as ="feeCpmSendPrice",    union = "sum(feeCpmSendPrice)"     // fee cpm下游收益
      },{
        expr = "0",                 as ="feeCpaSendPrice",    union = "sum(feeCpaSendPrice)"     // fee cpa下游收益
      },{
        expr = "0",                 as ="winPrice",           union = "sum(winPrice)"     // 中签价格
      },{
        expr = "0",                 as ="winNotices",         union = "sum(winNotices)"     // 中签数
      },{
        expr = "0",                 as ="newCount",           union = "sum(newCount)"
      },{
        expr = "0",                 as ="activeCount",        union = "sum(activeCount)"
      }
    ]
    dwr.table = "ssp_report_overall_dwr"
    dwr.subtables= {
      this = {
        groupby = "*"
      }
      day = {
        groupby = "publisherId,appId,countryId,carrierId,versionName,adType,campaignId,offerId,imageId,affSub,packageName,respStatus,test,ruleId,smartId,eventName"
      }
      month = {
        groupby = "publisherid,appid,countryid,campaignid,offerid,versionName"
      }
    }
    kafka.consumer {
      partitions = [
        { topic = "topic_ad_fill_new"}
      ]
    }
  }

  overall_send {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    b_time.by = "createTime"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
    dwr.store = true
    dwr.groupby.fields = [
      {
        expr = "publisherId", as = "publisherId"
      },{
        expr = "subId",       as = "appId"
      },{
        expr = "countryId",   as = "countryId"
      },{
        expr = "carrierId",   as = "carrierId"
      },{
        expr = "sv",          as = "versionName"
      },{
        expr = "adType",      as = "adType"
      },{
        expr = "campaignId",  as = "campaignId"
      },{
        expr = "offerId",     as = "offerId"
      },{
        expr = "imageId",     as = "imageId"
      },{
        expr = "affSub",      as = "affSub"
      }, {
        expr = "packageName", as = "packageName"
      }, {
        expr = "domain",      as = "domain"
      }, {
        expr = "operatingSystem(userAgent)",        as = "operatingSystem"
      }, {
        expr = "language(userAgent)",               as = "systemLanguage"
      }, {
        expr = "machineModel(userAgent)",           as = "deviceBrand"
      }, {
        expr = "deviceType(userAgent)",             as = "deviceType"
      }, {
        expr = "browserKernel(userAgent)",          as = "browserKernel"
      }, {
        expr = "respStatus",                        as = "respStatus"
      }, {
        expr = "test",                              as = "test"
      }, {
        expr = "ruleId",                            as = "ruleId"
      }, {
        expr = "smartId",                           as = "smartId"
      }, {
        expr = "eventName",                         as = "eventName"
      }
      , {
        expr = "raterType",                         as = "raterType"
      }, {
        expr = "raterId",                           as = "raterId"
      }
    ]
    dwr.groupby.aggs = [
      {
        expr = "0",          as ="requestCount",   union = "sum(requestCount)"
      },{
        expr = "count(1)",   as ="sendCount",      union = "sum(sendCount)"
      },{
        expr = "0",          as ="showCount",      union = "sum(showCount)"
      },{
        expr = "0",          as ="clickCount",     union = "sum(clickCount)"
      },{
        expr = "0",          as ="feeReportCount", union = "sum(feeReportCount)"  //计费条数
      },{
        expr = "0",          as ="feeSendCount",   union = "sum(feeSendCount)"    //计费显示条数
      },{
        expr = "0",          as ="feeReportPrice", union = "sum(feeReportPrice)"  //计费金额(真实收益)
      },{
        expr = "0",          as ="feeSendPrice",   union = "sum(feeSendPrice)"    //计费显示金额(收益)
      },{
        expr = "0",          as ="cpcBidPrice",    union = "sum(cpcBidPrice)"
      },{
        expr = "0",          as ="cpmBidPrice",    union = "sum(cpmBidPrice)"
      },{
        expr = "0",          as ="conversion",     union = "sum(conversion)"      //转化数，目前不要含展示和点击产生的
      },{
        expr = "0",          as ="allConversion",  union = "sum(allConversion)"   //转化数，含展示和点击产生的
      },{
        expr = "0",          as ="revenue",        union = "sum(revenue)"         //收益
      },{
        expr = "0",          as ="realRevenue",    union = "sum(realRevenue)"     //真实收益
      },{
        expr = "0",          as ="feeCpcTimes",        union = "sum(feeCpcTimes)"     // fee cpc转化条数
      },{
        expr = "0",          as ="feeCpmTimes",        union = "sum(feeCpmTimes)"     // fee cpm转化条数
      },{
        expr = "0",          as ="feeCpaTimes",        union = "sum(feeCpaTimes)"     // fee cpa转化条数
      },{
        expr = "0",          as ="feeCpaSendTimes",    union = "sum(feeCpaSendTimes)"     // fee cpa send转化条数
      },{
        expr = "0",          as ="feeCpcReportPrice",  union = "sum(feeCpcReportPrice)"     // fee cpc上游收益
      },{
        expr = "0",          as ="feeCpmReportPrice",  union = "sum(feeCpmReportPrice)"     // fee cpm上游收益
      },{
        expr = "0",          as ="feeCpaReportPrice",  union = "sum(feeCpaReportPrice)"     // fee cpa上游收益
      },{
        expr = "0",          as ="feeCpcSendPrice",    union = "sum(feeCpcSendPrice)"     // fee cpc下游收益
      },{
        expr = "0",          as ="feeCpmSendPrice",    union = "sum(feeCpmSendPrice)"     // fee cpm下游收益
      },{
        expr = "0",          as ="feeCpaSendPrice",    union = "sum(feeCpaSendPrice)"     // fee cpa下游收益
      },{
        expr = "0",          as ="winPrice",           union = "sum(winPrice)"     // 中签价格
      },{
        expr = "0",          as ="winNotices",         union = "sum(winNotices)"     // 中签数
      },{
        expr = "0",          as ="newCount",           union = "sum(newCount)"
      },{
        expr = "0",          as ="activeCount",        union = "sum(activeCount)"
      }
    ]
    dwr.table = "ssp_report_overall_dwr"
    kafka.consumer {
      partitions = [
        { topic = "topic_ad_send_new"}
      ]
    }
  }

  overall_show {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    b_time.by = "showTime"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
    dwr.store = true
    dwr.groupby.fields = [
      {
        expr = "publisherId", as = "publisherId"
      },{
        expr = "subId",       as = "appId"
      },{
        expr = "countryId",   as = "countryId"
      },{
        expr = "carrierId",   as = "carrierId"
      },{
        expr = "sv",          as = "versionName"
      },{
        expr = "adType",      as = "adType"
      },{
        expr = "campaignId",  as = "campaignId"
      },{
        expr = "offerId",     as = "offerId"
      },{
        expr = "imageId",     as = "imageId"
      },{
        expr = "affSub",      as = "affSub"
      }, {
        expr = "packageName", as = "packageName"
      }, {
        expr = "domain",      as = "domain"
      }, {
        expr = "operatingSystem(userAgent)",        as = "operatingSystem"
      }, {
        expr = "language(userAgent)",               as = "systemLanguage"
      }, {
        expr = "machineModel(userAgent)",           as = "deviceBrand"
      }, {
        expr = "deviceType(userAgent)",             as = "deviceType"
      }, {
        expr = "browserKernel(userAgent)",          as = "browserKernel"
      }, {
        expr = "respStatus",                        as = "respStatus"
      }, {
        expr = "test",                              as = "test"
      }, {
        expr = "ruleId",                            as = "ruleId"
      }, {
        expr = "smartId",                           as = "smartId"
      }, {
        expr = "eventName",                         as = "eventName"
      }
      , {
        expr = "raterType",                         as = "raterType"
      }, {
        expr = "raterId",                           as = "raterId"
      }
    ]
    dwr.groupby.aggs = [
      {
        expr = "0",                 as ="requestCount",   union = "sum(requestCount)"
      },{
        expr = "0",                 as ="sendCount",      union = "sum(sendCount)"
      },{
        expr = "count(1)",          as ="showCount",      union = "sum(showCount)"
      },{
        expr = "0",                 as ="clickCount",     union = "sum(clickCount)"
      },{
        expr = "0",                 as ="feeReportCount", union = "sum(feeReportCount)"  //计费条数
      },{
        expr = "0",                 as ="feeSendCount",   union = "sum(feeSendCount)"    //计费显示条数
      },{
        expr = "0",                 as ="feeReportPrice", union = "sum(feeReportPrice)"  //计费金额(真实收益)
      },{
        expr = "0",                 as ="feeSendPrice",   union = "sum(feeSendPrice)"    //计费显示金额(收益)
      },{
        expr = "0",                 as ="cpcBidPrice",    union = "sum(cpcBidPrice)"
      },{
        expr = "sum( cast( if( priceMethod = 2,  bidPrice, 0) as decimal(19,10) ) ) / 1000",  as ="cpmBidPrice",    union = "sum(cpmBidPrice)"
      },{
        expr = "0",                 as ="conversion",     union = "sum(conversion)"      //转化数，目前不要含展示和点击产生的
      },{
        expr = "count( if( priceMethod = 2, 1, null) )",     as ="allConversion",  union = "sum(allConversion)"   //转化数，含展示和点击产生的
      },{
        expr = "sum( cast( if( priceMethod = 2,  sendPrice, 0) as decimal(19,10) ) )", as ="revenue",        union = "sum(revenue)"         //收益
      },{
        expr = "sum( cast( if( priceMethod = 2,  bidPrice, 0) as decimal(19,10) ) ) / 1000",  as ="realRevenue",    union = "sum(realRevenue)"     //真实收益
      },{
        expr = "0",          as ="feeCpcTimes",        union = "sum(feeCpcTimes)"     // fee cpc转化条数
      },{
        expr = "0",          as ="feeCpmTimes",        union = "sum(feeCpmTimes)"     // fee cpm转化条数
      },{
        expr = "0",          as ="feeCpaTimes",        union = "sum(feeCpaTimes)"     // fee cpa转化条数
      },{
        expr = "0",          as ="feeCpaSendTimes",    union = "sum(feeCpaSendTimes)"     // fee cpa send转化条数
      },{
        expr = "0",          as ="feeCpcReportPrice",  union = "sum(feeCpcReportPrice)"     // fee cpc上游收益
      },{
        expr = "0",          as ="feeCpmReportPrice",  union = "sum(feeCpmReportPrice)"     // fee cpm上游收益
      },{
        expr = "0",          as ="feeCpaReportPrice",  union = "sum(feeCpaReportPrice)"     // fee cpa上游收益
      },{
        expr = "0",          as ="feeCpcSendPrice",    union = "sum(feeCpcSendPrice)"     // fee cpc下游收益
      },{
        expr = "0",          as ="feeCpmSendPrice",    union = "sum(feeCpmSendPrice)"     // fee cpm下游收益
      },{
        expr = "0",          as ="feeCpaSendPrice",    union = "sum(feeCpaSendPrice)"     // fee cpa下游收益
      },{
        expr = "0",          as ="winPrice",           union = "sum(winPrice)"     // 中签价格
      },{
        expr = "0",          as ="winNotices",         union = "sum(winNotices)"     // 中签数
      },{
        expr = "0",          as ="newCount",           union = "sum(newCount)"
      },{
        expr = "0",          as ="activeCount",        union = "sum(activeCount)"
      }
    ]
    dwr.table = "ssp_report_overall_dwr"
    kafka.consumer {
      partitions = [
        {topic = "topic_ad_show"}
      ]
    }
  }

  overall_click {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    b_time.by = "clickTime"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
    dwr.store = true
    dwr.groupby.fields = [
      {
        expr = "publisherId", as = "publisherId"
      },{
        expr = "subId",       as = "appId"
      },{
        expr = "countryId",   as = "countryId"
      },{
        expr = "carrierId",   as = "carrierId"
      },{
        expr = "sv",          as = "versionName"
      },{
        expr = "adType",      as = "adType"
      },{
        expr = "campaignId",  as = "campaignId"
      },{
        expr = "offerId",     as = "offerId"
      },{
        expr = "imageId",     as = "imageId"
      },{
        expr = "affSub",      as = "affSub"
      }, {
        expr = "packageName", as = "packageName"
      }, {
        expr = "domain",      as = "domain"
      }, {
        expr = "operatingSystem(userAgent)",        as = "operatingSystem"
      }, {
        expr = "language(userAgent)",               as = "systemLanguage"
      }, {
        expr = "machineModel(userAgent)",           as = "deviceBrand"
      }, {
        expr = "deviceType(userAgent)",             as = "deviceType"
      }, {
        expr = "browserKernel(userAgent)",          as = "browserKernel"
      }, {
        expr = "respStatus",                        as = "respStatus"
      }, {
        expr = "test",                              as = "test"
      }, {
        expr = "ruleId",                            as = "ruleId"
      }, {
        expr = "smartId",                           as = "smartId"
      }, {
        expr = "eventName",                         as = "eventName"
      }
      , {
        expr = "raterType",                         as = "raterType"
      }, {
        expr = "raterId",                           as = "raterId"
      }
    ]
    dwr.groupby.aggs = [
      {
        expr = "0",                as ="requestCount",   union = "sum(requestCount)"
      },{
        expr = "0",                as ="sendCount",      union = "sum(sendCount)"
      },{
        expr = "0",                as ="showCount",      union = "sum(showCount)"
      },{
        expr = "count(1)",         as ="clickCount",     union = "sum(clickCount)"
      },{
        expr = "0",                as ="feeReportCount", union = "sum(feeReportCount)"  //计费条数
      },{
        expr = "0",                as ="feeSendCount",   union = "sum(feeSendCount)"    //计费显示条数
      },{
        expr = "0",                as ="feeReportPrice", union = "sum(feeReportPrice)"  //计费金额(真实收益)
      },{
        expr = "0",                as ="feeSendPrice",   union = "sum(feeSendPrice)"    //计费显示金额(收益)
      },{
        expr = "sum( cast( if( priceMethod = 1,  bidPrice, 0) as decimal(19,10) ) )", as ="cpcBidPrice",    union = "sum(cpcBidPrice)"
      },{
        expr = "0",                as ="cpmBidPrice",    union = "sum(cpmBidPrice)"
      },{
        expr = "0",                as ="conversion",     union = "sum(conversion)"      //转化数，目前不要含展示和点击产生的
      },{
        expr = "count(if( priceMethod = 1,  1, null))",    as ="allConversion",  union = "sum(allConversion)"   //转化数，含展示和点击产生的
      },{
        expr = "sum( cast( if( priceMethod = 1,  sendPrice, 0) as decimal(19,10) ) )",as ="revenue",        union = "sum(revenue)"         //收益
      },{
        expr = "sum( cast( if( priceMethod = 1,  bidPrice, 0) as decimal(19,10) ) )", as ="realRevenue",    union = "sum(realRevenue)"     //真实收益
      },{
        expr = "0",          as ="feeCpcTimes",        union = "sum(feeCpcTimes)"     // fee cpc转化条数
      },{
        expr = "0",          as ="feeCpmTimes",        union = "sum(feeCpmTimes)"     // fee cpm转化条数
      },{
        expr = "0",          as ="feeCpaTimes",        union = "sum(feeCpaTimes)"     // fee cpa转化条数
      },{
        expr = "0",          as ="feeCpaSendTimes",    union = "sum(feeCpaSendTimes)"     // fee cpa send转化条数
      },{
        expr = "0",          as ="feeCpcReportPrice",  union = "sum(feeCpcReportPrice)"     // fee cpc上游收益
      },{
        expr = "0",          as ="feeCpmReportPrice",  union = "sum(feeCpmReportPrice)"     // fee cpm上游收益
      },{
        expr = "0",          as ="feeCpaReportPrice",  union = "sum(feeCpaReportPrice)"     // fee cpa上游收益
      },{
        expr = "0",          as ="feeCpcSendPrice",    union = "sum(feeCpcSendPrice)"     // fee cpc下游收益
      },{
        expr = "0",          as ="feeCpmSendPrice",    union = "sum(feeCpmSendPrice)"     // fee cpm下游收益
      },{
        expr = "0",          as ="feeCpaSendPrice",    union = "sum(feeCpaSendPrice)"     // fee cpa下游收益
      },{
        expr = "0",          as ="winPrice",           union = "sum(winPrice)"     // 中签价格
      },{
        expr = "0",          as ="winNotices",         union = "sum(winNotices)"     // 中签数
      },{
        expr = "0",          as ="newCount",           union = "sum(newCount)"
      },{
        expr = "0",          as ="activeCount",        union = "sum(activeCount)"
      }
    ]
    dwr.table = "ssp_report_overall_dwr"
    kafka.consumer {
      partitions = [
        { topic = "topic_ad_click"}
      ]
    }
  }

  overall_fee {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    b_time.by = "reportTime"
    dwi.uuid.enable = true
    dwi.uuid.fields = ["clickId"]
    dwi.uuid.b_time.range=[-24, 24]
    dwi.store = true
    dwi.table = "ssp_overall_fee_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
    dwr.store = true
    dwr.groupby.fields = [
      {
        expr = "publisherId", as = "publisherId"
      },{
        expr = "subId",       as = "appId"
      },{
        expr = "countryId",   as = "countryId"
      },{
        expr = "carrierId",   as = "carrierId"
      },{
        expr = "sv",          as = "versionName"
      },{
        expr = "adType",      as = "adType"
      },{
        expr = "campaignId",  as = "campaignId"
      },{
        expr = "offerId",     as = "offerId"
      },{
        expr = "imageId",     as = "imageId"
      },{
        expr = "affSub",      as = "affSub"
      }, {
        expr = "packageName", as = "packageName"
      }, {
        expr = "domain",      as = "domain"
      }, {
        expr = "operatingSystem(userAgent)",        as = "operatingSystem"
      }, {
        expr = "language(userAgent)",               as = "systemLanguage"
      }, {
        expr = "machineModel(userAgent)",           as = "deviceBrand"
      }, {
        expr = "deviceType(userAgent)",             as = "deviceType"
      }, {
        expr = "browserKernel(userAgent)",          as = "browserKernel"
      }, {
        expr = "respStatus",                        as = "respStatus"
      }, {
        expr = "test",                              as = "test"
      }, {
        expr = "ruleId",                            as = "ruleId"
      }, {
        expr = "smartId",                           as = "smartId"
      }, {
        expr = "eventName",                         as = "eventName"
      }
      ,{
        expr = "raterType",                         as = "raterType"
      }, {
        expr = "raterId",                           as = "raterId"
      }
    ]
    dwr.groupby.aggs = [
      {
        expr = "0",                as ="requestCount",   union = "sum(requestCount)"
      },{
        expr = "0",                as ="sendCount",      union = "sum(sendCount)"
      },{
        expr = "0",                as ="showCount",      union = "sum(showCount)"
      },{
        expr = "0",                as ="clickCount",     union = "sum(clickCount)"
      },{
        expr = "count(1)",         as ="feeReportCount", union = "sum(feeReportCount)"  //计费条数
      },{
        expr = "count(if(isSend = 1, 1, null))",             as ="feeSendCount",   union = "sum(feeSendCount)"    //计费显示条数
      },{
        expr = "sum( cast(reportPrice as decimal(19,10)) )", as ="feeReportPrice", union = "sum(feeReportPrice)"  //计费金额(真实收益)
      },{
        expr = "sum( cast(sendPrice as decimal(19,10)) )",   as ="feeSendPrice",   union = "sum(feeSendPrice)"    //计费显示金额(收益)
      },{
        expr = "0",                as ="cpcBidPrice",    union = "sum(cpcBidPrice)"
      },{
        expr = "0",                as ="cpmBidPrice",    union = "sum(cpmBidPrice)"
      },{
        expr = "count(1)",         as ="conversion",     union = "sum(conversion)"      //转化数，目前不要含展示和点击产生的
      },{
        expr = "count(1)",         as ="allConversion",  union = "sum(allConversion)"   //转化数，含展示和点击产生的
      },{
        expr = "sum( cast(sendPrice as decimal(19,10)) )",    as ="revenue",        union = "sum(revenue)"         //收益
      },{
        expr = "sum( cast(reportPrice as decimal(19,10)) )",  as ="realRevenue",    union = "sum(realRevenue)"     //真实收益
      },{
        expr = "count(if( priceMethod = 1,  1, null))",       as ="feeCpcTimes",    union = "sum(feeCpcTimes)"     // fee cpc转化条数
      },{
        expr = "count(if( priceMethod = 2,  1, null))",       as ="feeCpmTimes",    union = "sum(feeCpmTimes)"     // fee cpm转化条数
      },{
        expr = "count(if( priceMethod = 3,  1, null))",       as ="feeCpaTimes",    union = "sum(feeCpaTimes)"     // fee cpa转化条数
      },{
        expr = "count(if( priceMethod = 3 and isSend = 1,  1, null))",   as ="feeCpaSendTimes",    union = "sum(feeCpaSendTimes)"     // fee cpa send转化条数
      },{
        expr = "sum( cast( if( priceMethod = 1,  reportPrice, 0) as decimal(19,10) ) )", as ="feeCpcReportPrice",  union = "sum(feeCpcReportPrice)"     // fee cpc上游收益
      },{
        expr = "sum( cast( if( priceMethod = 2,  reportPrice, 0) as decimal(19,10) ) )", as ="feeCpmReportPrice",  union = "sum(feeCpmReportPrice)"     // fee cpm上游收益
      },{
        expr = "sum( cast( if( priceMethod = 3,  reportPrice, 0) as decimal(19,10) ) )", as ="feeCpaReportPrice",  union = "sum(feeCpaReportPrice)"     // fee cpa上游收益
      },{
        expr = "sum( cast( if( priceMethod = 1,  sendPrice, 0) as decimal(19,10) ) )",   as ="feeCpcSendPrice",    union = "sum(feeCpcSendPrice)"     // fee cpc下游收益
      },{
        expr = "sum( cast( if( priceMethod = 2,  sendPrice, 0) as decimal(19,10) ) )",   as ="feeCpmSendPrice",    union = "sum(feeCpmSendPrice)"     // fee cpm下游收益
      },{
        expr = "sum( cast( if( priceMethod = 3 and isSend = 1,  sendPrice, 0) as decimal(19,10) ) )",   as ="feeCpaSendPrice",    union = "sum(feeCpaSendPrice)"     // fee cpa下游收益
      },{
        expr = "0",           as ="winPrice",           union = "sum(winPrice)"     // 中签价格
      },{
        expr = "0",           as ="winNotices",         union = "sum(winNotices)"     // 中签数
      },{
        expr = "0",           as ="newCount",           union = "sum(newCount)"
      },{
        expr = "0",           as ="activeCount",        union = "sum(activeCount)"
      }
    ]
    dwr.table = "ssp_report_overall_dwr"
    kafka.consumer {
      partitions = [
        {topic = "topic_ad_fee"}
      ]
    }
  }

  overall_win {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    b_time.by = "winTime"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
    dwr.store = true
    dwr.groupby.fields = [
      {
        expr = "publisherId", as = "publisherId"
      },{
        expr = "subId",       as = "appId"
      },{
        expr = "countryId",   as = "countryId"
      },{
        expr = "carrierId",   as = "carrierId"
      },{
        expr = "sv",          as = "versionName"
      },{
        expr = "adType",      as = "adType"
      },{
        expr = "campaignId",  as = "campaignId"
      },{
        expr = "offerId",     as = "offerId"
      },{
        expr = "imageId",     as = "imageId"
      },{
        expr = "affSub",      as = "affSub"
      }, {
        expr = "packageName", as = "packageName"
      }, {
        expr = "domain",      as = "domain"
      }, {
        expr = "operatingSystem(userAgent)",        as = "operatingSystem"
      }, {
        expr = "language(userAgent)",               as = "systemLanguage"
      }, {
        expr = "machineModel(userAgent)",           as = "deviceBrand"
      }, {
        expr = "deviceType(userAgent)",             as = "deviceType"
      }, {
        expr = "browserKernel(userAgent)",          as = "browserKernel"
      }, {
        expr = "respStatus",                        as = "respStatus"
      }, {
        expr = "test",                              as = "test"
      }, {
        expr = "ruleId",                            as = "ruleId"
      }, {
        expr = "smartId",                           as = "smartId"
      }, {
        expr = "eventName",                         as = "eventName"
      },
      {
        expr = "raterType",                         as = "raterType"
      }, {
        expr = "raterId",                           as = "raterId"
      }
    ]
    dwr.groupby.aggs = [
      {
        expr = "0",                 as ="requestCount",   union = "sum(requestCount)"
      },{
        expr = "0",                 as ="sendCount",      union = "sum(sendCount)"
      },{
        expr = "0",                 as ="showCount",      union = "sum(showCount)"
      },{
        expr = "0",                 as ="clickCount",     union = "sum(clickCount)"
      },{
        expr = "0",                 as ="feeReportCount", union = "sum(feeReportCount)"  //计费条数
      },{
        expr = "0",                 as ="feeSendCount",   union = "sum(feeSendCount)"    //计费显示条数
      },{
        expr = "0",                 as ="feeReportPrice", union = "sum(feeReportPrice)"  //计费金额(真实收益)
      },{
        expr = "0",                 as ="feeSendPrice",   union = "sum(feeSendPrice)"    //计费显示金额(收益)
      },{
        expr = "0",                 as ="cpcBidPrice",    union = "sum(cpcBidPrice)"
      },{
        expr = "0",                 as ="cpmBidPrice",    union = "sum(cpmBidPrice)"
      },{
        expr = "0",                 as ="conversion",     union = "sum(conversion)"      //转化数，目前不要含展示和点击产生的
      },{
        expr = "0",                 as ="allConversion",  union = "sum(allConversion)"   //转化数，含展示和点击产生的
      },{
        expr = "0",                 as ="revenue",        union = "sum(revenue)"         //收益
      },{
        expr = "0",                 as ="realRevenue",    union = "sum(realRevenue)"     //真实收益
      },{
        expr = "0",                 as ="feeCpcTimes",    union = "sum(feeCpcTimes)"     // fee cpc转化条数
      },{
        expr = "0",                 as ="feeCpmTimes",    union = "sum(feeCpmTimes)"     // fee cpm转化条数
      },{
        expr = "0",                 as ="feeCpaTimes",    union = "sum(feeCpaTimes)"     // fee cpa转化条数
      },{
        expr = "0",                 as ="feeCpaSendTimes",    union = "sum(feeCpaSendTimes)"     // fee cpa send转化条数
      },{
        expr = "0",                 as ="feeCpcReportPrice",  union = "sum(feeCpcReportPrice)"     // fee cpc上游收益
      },{
        expr = "0",                 as ="feeCpmReportPrice",  union = "sum(feeCpmReportPrice)"     // fee cpm上游收益
      },{
        expr = "0",                 as ="feeCpaReportPrice",  union = "sum(feeCpaReportPrice)"     // fee cpa上游收益
      },{
        expr = "0",                 as ="feeCpcSendPrice",    union = "sum(feeCpcSendPrice)"     // fee cpc下游收益
      },{
        expr = "0",                 as ="feeCpmSendPrice",    union = "sum(feeCpmSendPrice)"     // fee cpm下游收益
      },{
        expr = "0",                 as ="feeCpaSendPrice",    union = "sum(feeCpaSendPrice)"     // fee cpa下游收益
      },{
        expr = "sum( cast(winPrice as decimal(19,10)) )",     as ="winPrice",           union = "sum(winPrice)"     // 中签价格
      },{
        expr = "count(1)",          as ="winNotices",         union = "sum(winNotices)"     // 中签数
      },{
        expr = "0",                 as ="newCount",           union = "sum(newCount)"
      },{
        expr = "0",                 as ="activeCount",        union = "sum(activeCount)"
      }
    ]
    dwr.table = "ssp_report_overall_dwr"
    kafka.consumer {
      partitions = [
        {topic = "topic_ad_win"}
      ]
    }
  }

  overall_user_new {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    b_time.by = "createTime"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspUserNewDWISchema"
    dwr.store = true
    dwr.groupby.fields = [
      {
        expr = "null",        as = "publisherId"
      },{
        expr = "appId",       as = "appId"
      },{
        expr = "countryId",   as = "countryId"
      },{
        expr = "carrierId",   as = "carrierId"
      },{
        expr = "sv",          as = "versionName"
      },{
        expr = "null",        as = "adType"
      },{
        expr = "null",        as = "campaignId"
      },{
        expr = "null",        as = "offerId"
      },{
        expr = "null",        as = "imageId"
      },{
        expr = "affSub",      as = "affSub"
      }, {
        expr = "packageName", as = "packageName"
      }, {
        expr = "null",        as = "domain"
      }, {
        expr = "operatingSystem(userAgent)",        as = "operatingSystem"
      }, {
        expr = "language(userAgent)",               as = "systemLanguage"
      }, {
        expr = "machineModel(userAgent)",           as = "deviceBrand"
      }, {
        expr = "deviceType(userAgent)",             as = "deviceType"
      }, {
        expr = "browserKernel(userAgent)",          as = "browserKernel"
      }, {
        expr = "null",                              as = "respStatus"
      }, {
        expr = "null",                              as = "test"
      }, {
        expr = "null",                              as = "ruleId"
      }, {
        expr = "null",                              as = "smartId"
      }, {
        expr = "null",                              as = "eventName"
      }, {
        expr = "null",                              as = "raterType"
      }, {
        expr = "null",                              as = "raterId"
      }
    ]
    dwr.groupby.aggs = [
      {
        expr = "0",                 as ="requestCount",   union = "sum(requestCount)"
      },{
        expr = "0",                 as ="sendCount",      union = "sum(sendCount)"
      },{
        expr = "0",                 as ="showCount",      union = "sum(showCount)"
      },{
        expr = "0",                 as ="clickCount",     union = "sum(clickCount)"
      },{
        expr = "0",                 as ="feeReportCount", union = "sum(feeReportCount)"  //计费条数
      },{
        expr = "0",                 as ="feeSendCount",   union = "sum(feeSendCount)"    //计费显示条数
      },{
        expr = "0",                 as ="feeReportPrice", union = "sum(feeReportPrice)"  //计费金额(真实收益)
      },{
        expr = "0",                 as ="feeSendPrice",   union = "sum(feeSendPrice)"    //计费显示金额(收益)
      },{
        expr = "0",                 as ="cpcBidPrice",    union = "sum(cpcBidPrice)"
      },{
        expr = "0",                 as ="cpmBidPrice",    union = "sum(cpmBidPrice)"
      },{
        expr = "0",                 as ="conversion",     union = "sum(conversion)"      //转化数，目前不要含展示和点击产生的
      },{
        expr = "0",                 as ="allConversion",  union = "sum(allConversion)"   //转化数，含展示和点击产生的
      },{
        expr = "0",                 as ="revenue",        union = "sum(revenue)"         //收益
      },{
        expr = "0",                 as ="realRevenue",    union = "sum(realRevenue)"     //真实收益
      },{
        expr = "0",                 as ="feeCpcTimes",    union = "sum(feeCpcTimes)"     // fee cpc转化条数
      },{
        expr = "0",                 as ="feeCpmTimes",    union = "sum(feeCpmTimes)"     // fee cpm转化条数
      },{
        expr = "0",                 as ="feeCpaTimes",    union = "sum(feeCpaTimes)"     // fee cpa转化条数
      },{
        expr = "0",                 as ="feeCpaSendTimes",    union = "sum(feeCpaSendTimes)"     // fee cpa send转化条数
      },{
        expr = "0",                 as ="feeCpcReportPrice",  union = "sum(feeCpcReportPrice)"     // fee cpc上游收益
      },{
        expr = "0",                 as ="feeCpmReportPrice",  union = "sum(feeCpmReportPrice)"     // fee cpm上游收益
      },{
        expr = "0",                 as ="feeCpaReportPrice",  union = "sum(feeCpaReportPrice)"     // fee cpa上游收益
      },{
        expr = "0",                 as ="feeCpcSendPrice",    union = "sum(feeCpcSendPrice)"     // fee cpc下游收益
      },{
        expr = "0",                 as ="feeCpmSendPrice",    union = "sum(feeCpmSendPrice)"     // fee cpm下游收益
      },{
        expr = "0",                 as ="feeCpaSendPrice",    union = "sum(feeCpaSendPrice)"     // fee cpa下游收益
      },{
        expr = "0",                 as ="winPrice",           union = "sum(winPrice)"     // 中签价格
      },{
        expr = "0",                 as ="winNotices",         union = "sum(winNotices)"     // 中签数
      },{
        expr = "count(1)",          as ="newCount",           union = "sum(newCount)"
      },{
        expr = "0",                 as ="activeCount",        union = "sum(activeCount)"
      }
    ]
    dwr.table = "ssp_report_overall_dwr"
    kafka.consumer {
      partitions = [
        {
          topic = "topic_ad_user_new_v2"//"topic_ad_user"
        }
      ]
    }
  }

  overall_user_active {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    b_time.by = "createTime"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspUserNewDWISchema"
    dwr.store = true
    dwr.groupby.fields = [
      {
        expr = "null",          as = "publisherId"
      },{
        expr = "appId",       as = "appId"
      },{
        expr = "countryId",   as = "countryId"
      },{
        expr = "carrierId",   as = "carrierId"
      },{
        expr = "sv",          as = "versionName"
      },{
        expr = "null",          as = "adType"
      },{
        expr = "null",          as = "campaignId"
      },{
        expr = "null",          as = "offerId"
      },{
        expr = "null",          as = "imageId"
      },{
        expr = "affSub",      as = "affSub"
      }, {
        expr = "packageName", as = "packageName"
      }, {
        expr = "null",        as = "domain"
      }, {
        expr = "operatingSystem(userAgent)",        as = "operatingSystem"
      }, {
        expr = "language(userAgent)",               as = "systemLanguage"
      }, {
        expr = "machineModel(userAgent)",           as = "deviceBrand"
      }, {
        expr = "deviceType(userAgent)",             as = "deviceType"
      }, {
        expr = "browserKernel(userAgent)",          as = "browserKernel"
      }, {
        expr = "null",                              as = "respStatus"
      }, {
        expr = "null",                              as = "test"
      }, {
        expr = "null",                              as = "ruleId"
      }, {
        expr = "null",                              as = "smartId"
      }, {
        expr = "null",                              as = "eventName"
      }, {
        expr = "null",                              as = "raterType"
      }, {
        expr = "null",                              as = "raterId"
      }
    ]
    dwr.groupby.aggs = [
      {
        expr = "0",                 as ="requestCount",   union = "sum(requestCount)"
      },{
        expr = "0",                 as ="sendCount",      union = "sum(sendCount)"
      },{
        expr = "0",                 as ="showCount",      union = "sum(showCount)"
      },{
        expr = "0",                 as ="clickCount",     union = "sum(clickCount)"
      },{
        expr = "0",                 as ="feeReportCount", union = "sum(feeReportCount)"  //计费条数
      },{
        expr = "0",                 as ="feeSendCount",   union = "sum(feeSendCount)"    //计费显示条数
      },{
        expr = "0",                 as ="feeReportPrice", union = "sum(feeReportPrice)"  //计费金额(真实收益)
      },{
        expr = "0",                 as ="feeSendPrice",   union = "sum(feeSendPrice)"    //计费显示金额(收益)
      },{
        expr = "0",                 as ="cpcBidPrice",    union = "sum(cpcBidPrice)"
      },{
        expr = "0",                 as ="cpmBidPrice",    union = "sum(cpmBidPrice)"
      },{
        expr = "0",                 as ="conversion",     union = "sum(conversion)"      //转化数，目前不要含展示和点击产生的
      },{
        expr = "0",                 as ="allConversion",  union = "sum(allConversion)"   //转化数，含展示和点击产生的
      },{
        expr = "0",                 as ="revenue",        union = "sum(revenue)"         //收益
      },{
        expr = "0",                 as ="realRevenue",    union = "sum(realRevenue)"     //真实收益
      },{
        expr = "0",                 as ="feeCpcTimes",    union = "sum(feeCpcTimes)"     // fee cpc转化条数
      },{
        expr = "0",                 as ="feeCpmTimes",    union = "sum(feeCpmTimes)"     // fee cpm转化条数
      },{
        expr = "0",                 as ="feeCpaTimes",    union = "sum(feeCpaTimes)"     // fee cpa转化条数
      },{
        expr = "0",                 as ="feeCpaSendTimes",    union = "sum(feeCpaSendTimes)"     // fee cpa send转化条数
      },{
        expr = "0",                 as ="feeCpcReportPrice",  union = "sum(feeCpcReportPrice)"     // fee cpc上游收益
      },{
        expr = "0",                 as ="feeCpmReportPrice",  union = "sum(feeCpmReportPrice)"     // fee cpm上游收益
      },{
        expr = "0",                 as ="feeCpaReportPrice",  union = "sum(feeCpaReportPrice)"     // fee cpa上游收益
      },{
        expr = "0",                 as ="feeCpcSendPrice",    union = "sum(feeCpcSendPrice)"     // fee cpc下游收益
      },{
        expr = "0",                 as ="feeCpmSendPrice",    union = "sum(feeCpmSendPrice)"     // fee cpm下游收益
      },{
        expr = "0",                 as ="feeCpaSendPrice",    union = "sum(feeCpaSendPrice)"     // fee cpa下游收益
      },{
        expr = "0",                 as ="winPrice",           union = "sum(winPrice)"     // 中签价格
      },{
        expr = "0",                 as ="winNotices",         union = "sum(winNotices)"     // 中签数
      },{
        expr = "0",                 as ="newCount",           union = "sum(newCount)"
      },{
        expr = "count(1)",          as ="activeCount",        union = "sum(activeCount)"
      }
    ]
    dwr.table = "ssp_report_overall_dwr"
    kafka.consumer {
      partitions = [
        {
          topic = "topic_ad_user_active_v2"//"topic_ad_user_active"
        }
      ]
    }
  }

  overall_events {
    class = "com.mobikok.ssp.data.streaming.module.PluggableModule"
    b_time.by = "reportTime"
    dwi.store = true
    dwi.table = "ssp_overall_events_dwi"
    dwi.kafka.schema = "com.mobikok.ssp.data.streaming.schema.dwi.kafka.SspTrafficDWISchema"
    dwr.store = true
    dwr.groupby.fields = [
      {
        expr = "publisherId", as = "publisherId"
      },{
        expr = "subId",       as = "appId"
      },{
        expr = "countryId",   as = "countryId"
      },{
        expr = "carrierId",   as = "carrierId"
      },{
        expr = "sv",          as = "versionName"
      },{
        expr = "adType",      as = "adType"
      },{
        expr = "campaignId",  as = "campaignId"
      },{
        expr = "offerId",     as = "offerId"
      },{
        expr = "imageId",     as = "imageId"
      },{
        expr = "affSub",      as = "affSub"
      }, {
        expr = "packageName", as = "packageName"
      }, {
        expr = "domain",      as = "domain"
      }, {
        expr = "operatingSystem(userAgent)",        as = "operatingSystem"
      }, {
        expr = "language(userAgent)",               as = "systemLanguage"
      }, {
        expr = "machineModel(userAgent)",           as = "deviceBrand"
      }, {
        expr = "deviceType(userAgent)",             as = "deviceType"
      }, {
        expr = "browserKernel(userAgent)",          as = "browserKernel"
      }, {
        expr = "respStatus",                        as = "respStatus"
      }, {
        expr = "test",                              as = "test"
      }, {
        expr = "ruleId",                            as = "ruleId"
      }, {
        expr = "smartId",                           as = "smartId"
      }, {
        expr = "eventName",                         as = "eventName"
      }, {
        expr = "null",                              as = "raterType"
      }, {
        expr = "null",                              as = "raterId"
      }
    ]
    dwr.groupby.aggs = [
      {
        expr = "0",                 as ="requestCount",   union = "sum(requestCount)"
      },{
        expr = "0",                 as ="sendCount",      union = "sum(sendCount)"
      },{
        expr = "0",                 as ="showCount",      union = "sum(showCount)"
      },{
        expr = "0",                 as ="clickCount",     union = "sum(clickCount)"
      },{
        expr = "0",                 as ="feeReportCount", union = "sum(feeReportCount)"  //计费条数
      },{
        expr = "0",                 as ="feeSendCount",   union = "sum(feeSendCount)"    //计费显示条数
      },{
        expr = "0",                 as ="feeReportPrice", union = "sum(feeReportPrice)"  //计费金额(真实收益)
      },{
        expr = "0",                 as ="feeSendPrice",   union = "sum(feeSendPrice)"    //计费显示金额(收益)
      },{
        expr = "0",                 as ="cpcBidPrice",    union = "sum(cpcBidPrice)"
      },{
        expr = "0",                 as ="cpmBidPrice",    union = "sum(cpmBidPrice)"
      },{
        expr = "0",                 as ="conversion",     union = "sum(conversion)"      //转化数，目前不要含展示和点击产生的
      },{
        expr = "0",                 as ="allConversion",  union = "sum(allConversion)"   //转化数，含展示和点击产生的
      },{
        expr = "0",                 as ="revenue",        union = "sum(revenue)"         //收益
      },{
        expr = "0",                 as ="realRevenue",    union = "sum(realRevenue)"     //真实收益
      },{
        expr = "0",                 as ="feeCpcTimes",    union = "sum(feeCpcTimes)"     // fee cpc转化条数
      },{
        expr = "0",                 as ="feeCpmTimes",    union = "sum(feeCpmTimes)"     // fee cpm转化条数
      },{
        expr = "0",                 as ="feeCpaTimes",    union = "sum(feeCpaTimes)"     // fee cpa转化条数
      },{
        expr = "0",                 as ="feeCpaSendTimes",    union = "sum(feeCpaSendTimes)"     // fee cpa send转化条数
      },{
        expr = "0",                 as ="feeCpcReportPrice",  union = "sum(feeCpcReportPrice)"     // fee cpc上游收益
      },{
        expr = "0",                 as ="feeCpmReportPrice",  union = "sum(feeCpmReportPrice)"     // fee cpm上游收益
      },{
        expr = "0",                 as ="feeCpaReportPrice",  union = "sum(feeCpaReportPrice)"     // fee cpa上游收益
      },{
        expr = "0",                 as ="feeCpcSendPrice",    union = "sum(feeCpcSendPrice)"     // fee cpc下游收益
      },{
        expr = "0",                 as ="feeCpmSendPrice",    union = "sum(feeCpmSendPrice)"     // fee cpm下游收益
      },{
        expr = "0",                 as ="feeCpaSendPrice",    union = "sum(feeCpaSendPrice)"     // fee cpa下游收益
      },{
        expr = "0",                 as ="winPrice",           union = "sum(winPrice)"     // 中签价格
      },{
        expr = "0",                 as ="winNotices",         union = "sum(winNotices)"     // 中签数
      },{
        expr = "0",                 as ="newCount",           union = "sum(newCount)"
      },{
        expr = "0",                 as ="activeCount",        union = "sum(activeCount)"
      }
    ]
    dwr.table = "ssp_report_overall_dwr"
    kafka.consumer {
      partitions = [
        {topic = "topic_ad_event"}
      ]
    }
  }

}